
Pro_2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003bbc  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08003d84  08003d84  00013d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003d9c  08003d9c  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  08003d9c  08003d9c  00013d9c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003da4  08003da4  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003da4  08003da4  00013da4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08003da8  08003da8  00013da8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  08003dac  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000004ac  2000000c  08003db8  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  200004b8  08003db8  000204b8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d13b  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000201e  00000000  00000000  0002d177  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b00  00000000  00000000  0002f198  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000a38  00000000  00000000  0002fc98  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00024dc3  00000000  00000000  000306d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000c893  00000000  00000000  00055493  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000e4122  00000000  00000000  00061d26  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00145e48  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002d08  00000000  00000000  00145e9c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08003d6c 	.word	0x08003d6c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	08003d6c 	.word	0x08003d6c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	b082      	sub	sp, #8
 8000504:	af00      	add	r7, sp, #0
 8000506:	6078      	str	r0, [r7, #4]
		switch (key[0])
 8000508:	4b11      	ldr	r3, [pc, #68]	; (8000550 <HAL_UART_RxCpltCallback+0x50>)
 800050a:	781b      	ldrb	r3, [r3, #0]
 800050c:	2b7a      	cmp	r3, #122	; 0x7a
 800050e:	d00f      	beq.n	8000530 <HAL_UART_RxCpltCallback+0x30>
 8000510:	2b7a      	cmp	r3, #122	; 0x7a
 8000512:	dc13      	bgt.n	800053c <HAL_UART_RxCpltCallback+0x3c>
 8000514:	2b61      	cmp	r3, #97	; 0x61
 8000516:	d006      	beq.n	8000526 <HAL_UART_RxCpltCallback+0x26>
 8000518:	2b71      	cmp	r3, #113	; 0x71
 800051a:	d10f      	bne.n	800053c <HAL_UART_RxCpltCallback+0x3c>
		{
			case 'q':
				HAL_GPIO_TogglePin(GPIOB, LD1_Pin);
 800051c:	2101      	movs	r1, #1
 800051e:	480d      	ldr	r0, [pc, #52]	; (8000554 <HAL_UART_RxCpltCallback+0x54>)
 8000520:	f000 ff31 	bl	8001386 <HAL_GPIO_TogglePin>
				break;
 8000524:	e00a      	b.n	800053c <HAL_UART_RxCpltCallback+0x3c>
			case 'a':
				HAL_GPIO_TogglePin(GPIOB, LD2_Pin);
 8000526:	2180      	movs	r1, #128	; 0x80
 8000528:	480a      	ldr	r0, [pc, #40]	; (8000554 <HAL_UART_RxCpltCallback+0x54>)
 800052a:	f000 ff2c 	bl	8001386 <HAL_GPIO_TogglePin>
				break;
 800052e:	e005      	b.n	800053c <HAL_UART_RxCpltCallback+0x3c>
			case 'z':
				HAL_GPIO_TogglePin(GPIOB, LD3_Pin);
 8000530:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8000534:	4807      	ldr	r0, [pc, #28]	; (8000554 <HAL_UART_RxCpltCallback+0x54>)
 8000536:	f000 ff26 	bl	8001386 <HAL_GPIO_TogglePin>
				break;
 800053a:	bf00      	nop
		}
		HAL_UART_Receive_IT(&huart3, key, 1);
 800053c:	2201      	movs	r2, #1
 800053e:	4904      	ldr	r1, [pc, #16]	; (8000550 <HAL_UART_RxCpltCallback+0x50>)
 8000540:	4805      	ldr	r0, [pc, #20]	; (8000558 <HAL_UART_RxCpltCallback+0x58>)
 8000542:	f002 f977 	bl	8002834 <HAL_UART_Receive_IT>

	//}
}
 8000546:	bf00      	nop
 8000548:	3708      	adds	r7, #8
 800054a:	46bd      	mov	sp, r7
 800054c:	bd80      	pop	{r7, pc}
 800054e:	bf00      	nop
 8000550:	200004b0 	.word	0x200004b0
 8000554:	40020400 	.word	0x40020400
 8000558:	20000028 	.word	0x20000028

0800055c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800055c:	b580      	push	{r7, lr}
 800055e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000560:	f000 fb27 	bl	8000bb2 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000564:	f000 f810 	bl	8000588 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000568:	f000 f8fc 	bl	8000764 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 800056c:	f000 f89c 	bl	80006a8 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000570:	f000 f8ca 	bl	8000708 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
//  char tekst[] = "      \n\r";
  HAL_UART_Receive_IT(&huart3, key, 1);
 8000574:	2201      	movs	r2, #1
 8000576:	4902      	ldr	r1, [pc, #8]	; (8000580 <main+0x24>)
 8000578:	4802      	ldr	r0, [pc, #8]	; (8000584 <main+0x28>)
 800057a:	f002 f95b 	bl	8002834 <HAL_UART_Receive_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
//  int it = 0;
  while (1)
 800057e:	e7fe      	b.n	800057e <main+0x22>
 8000580:	200004b0 	.word	0x200004b0
 8000584:	20000028 	.word	0x20000028

08000588 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000588:	b580      	push	{r7, lr}
 800058a:	b0b4      	sub	sp, #208	; 0xd0
 800058c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800058e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000592:	2230      	movs	r2, #48	; 0x30
 8000594:	2100      	movs	r1, #0
 8000596:	4618      	mov	r0, r3
 8000598:	f003 fbe0 	bl	8003d5c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800059c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 80005a0:	2200      	movs	r2, #0
 80005a2:	601a      	str	r2, [r3, #0]
 80005a4:	605a      	str	r2, [r3, #4]
 80005a6:	609a      	str	r2, [r3, #8]
 80005a8:	60da      	str	r2, [r3, #12]
 80005aa:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80005ac:	f107 0308 	add.w	r3, r7, #8
 80005b0:	2284      	movs	r2, #132	; 0x84
 80005b2:	2100      	movs	r1, #0
 80005b4:	4618      	mov	r0, r3
 80005b6:	f003 fbd1 	bl	8003d5c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005ba:	f001 f847 	bl	800164c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005be:	4b37      	ldr	r3, [pc, #220]	; (800069c <SystemClock_Config+0x114>)
 80005c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c2:	4a36      	ldr	r2, [pc, #216]	; (800069c <SystemClock_Config+0x114>)
 80005c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c8:	6413      	str	r3, [r2, #64]	; 0x40
 80005ca:	4b34      	ldr	r3, [pc, #208]	; (800069c <SystemClock_Config+0x114>)
 80005cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80005d6:	4b32      	ldr	r3, [pc, #200]	; (80006a0 <SystemClock_Config+0x118>)
 80005d8:	681b      	ldr	r3, [r3, #0]
 80005da:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80005de:	4a30      	ldr	r2, [pc, #192]	; (80006a0 <SystemClock_Config+0x118>)
 80005e0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005e4:	6013      	str	r3, [r2, #0]
 80005e6:	4b2e      	ldr	r3, [pc, #184]	; (80006a0 <SystemClock_Config+0x118>)
 80005e8:	681b      	ldr	r3, [r3, #0]
 80005ea:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80005ee:	603b      	str	r3, [r7, #0]
 80005f0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80005f2:	2301      	movs	r3, #1
 80005f4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005f8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000600:	2302      	movs	r3, #2
 8000602:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000606:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800060a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 800060e:	2304      	movs	r3, #4
 8000610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000614:	2348      	movs	r3, #72	; 0x48
 8000616:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800061a:	2302      	movs	r3, #2
 800061c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000620:	2303      	movs	r3, #3
 8000622:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000626:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f81e 	bl	800166c <HAL_RCC_OscConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000636:	f000 f97b 	bl	8000930 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800063a:	230f      	movs	r3, #15
 800063c:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000640:	2302      	movs	r3, #2
 8000642:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000646:	2300      	movs	r3, #0
 8000648:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800064c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000650:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000654:	2300      	movs	r3, #0
 8000656:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800065a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800065e:	2102      	movs	r1, #2
 8000660:	4618      	mov	r0, r3
 8000662:	f001 faa7 	bl	8001bb4 <HAL_RCC_ClockConfig>
 8000666:	4603      	mov	r3, r0
 8000668:	2b00      	cmp	r3, #0
 800066a:	d001      	beq.n	8000670 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800066c:	f000 f960 	bl	8000930 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000670:	4b0c      	ldr	r3, [pc, #48]	; (80006a4 <SystemClock_Config+0x11c>)
 8000672:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8000674:	2300      	movs	r3, #0
 8000676:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000678:	2300      	movs	r3, #0
 800067a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800067e:	f107 0308 	add.w	r3, r7, #8
 8000682:	4618      	mov	r0, r3
 8000684:	f001 fc98 	bl	8001fb8 <HAL_RCCEx_PeriphCLKConfig>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800068e:	f000 f94f 	bl	8000930 <Error_Handler>
  }
}
 8000692:	bf00      	nop
 8000694:	37d0      	adds	r7, #208	; 0xd0
 8000696:	46bd      	mov	sp, r7
 8000698:	bd80      	pop	{r7, pc}
 800069a:	bf00      	nop
 800069c:	40023800 	.word	0x40023800
 80006a0:	40007000 	.word	0x40007000
 80006a4:	00200100 	.word	0x00200100

080006a8 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80006a8:	b580      	push	{r7, lr}
 80006aa:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80006ac:	4b14      	ldr	r3, [pc, #80]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006ae:	4a15      	ldr	r2, [pc, #84]	; (8000704 <MX_USART3_UART_Init+0x5c>)
 80006b0:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80006b2:	4b13      	ldr	r3, [pc, #76]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006b4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80006b8:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80006ba:	4b11      	ldr	r3, [pc, #68]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006bc:	2200      	movs	r2, #0
 80006be:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80006c0:	4b0f      	ldr	r3, [pc, #60]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006c2:	2200      	movs	r2, #0
 80006c4:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 80006c6:	4b0e      	ldr	r3, [pc, #56]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006c8:	2200      	movs	r2, #0
 80006ca:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 80006cc:	4b0c      	ldr	r3, [pc, #48]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006ce:	220c      	movs	r2, #12
 80006d0:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80006d2:	4b0b      	ldr	r3, [pc, #44]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006d4:	2200      	movs	r2, #0
 80006d6:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80006d8:	4b09      	ldr	r3, [pc, #36]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006da:	2200      	movs	r2, #0
 80006dc:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80006de:	4b08      	ldr	r3, [pc, #32]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006e0:	2200      	movs	r2, #0
 80006e2:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80006e4:	4b06      	ldr	r3, [pc, #24]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80006ea:	4805      	ldr	r0, [pc, #20]	; (8000700 <MX_USART3_UART_Init+0x58>)
 80006ec:	f002 f854 	bl	8002798 <HAL_UART_Init>
 80006f0:	4603      	mov	r3, r0
 80006f2:	2b00      	cmp	r3, #0
 80006f4:	d001      	beq.n	80006fa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80006f6:	f000 f91b 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80006fa:	bf00      	nop
 80006fc:	bd80      	pop	{r7, pc}
 80006fe:	bf00      	nop
 8000700:	20000028 	.word	0x20000028
 8000704:	40004800 	.word	0x40004800

08000708 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000708:	b580      	push	{r7, lr}
 800070a:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 800070c:	4b14      	ldr	r3, [pc, #80]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800070e:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 8000712:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000714:	4b12      	ldr	r3, [pc, #72]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000716:	2206      	movs	r2, #6
 8000718:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 800071a:	4b11      	ldr	r3, [pc, #68]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800071c:	2202      	movs	r2, #2
 800071e:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 8000720:	4b0f      	ldr	r3, [pc, #60]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000722:	2200      	movs	r2, #0
 8000724:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000726:	4b0e      	ldr	r3, [pc, #56]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000728:	2202      	movs	r2, #2
 800072a:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 800072c:	4b0c      	ldr	r3, [pc, #48]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800072e:	2201      	movs	r2, #1
 8000730:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 8000732:	4b0b      	ldr	r3, [pc, #44]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000734:	2200      	movs	r2, #0
 8000736:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000738:	4b09      	ldr	r3, [pc, #36]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800073a:	2200      	movs	r2, #0
 800073c:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800073e:	4b08      	ldr	r3, [pc, #32]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000740:	2201      	movs	r2, #1
 8000742:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000744:	4b06      	ldr	r3, [pc, #24]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000746:	2200      	movs	r2, #0
 8000748:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 800074a:	4805      	ldr	r0, [pc, #20]	; (8000760 <MX_USB_OTG_FS_PCD_Init+0x58>)
 800074c:	f000 fe35 	bl	80013ba <HAL_PCD_Init>
 8000750:	4603      	mov	r3, r0
 8000752:	2b00      	cmp	r3, #0
 8000754:	d001      	beq.n	800075a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000756:	f000 f8eb 	bl	8000930 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800075a:	bf00      	nop
 800075c:	bd80      	pop	{r7, pc}
 800075e:	bf00      	nop
 8000760:	200000ac 	.word	0x200000ac

08000764 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000764:	b580      	push	{r7, lr}
 8000766:	b08c      	sub	sp, #48	; 0x30
 8000768:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800076a:	f107 031c 	add.w	r3, r7, #28
 800076e:	2200      	movs	r2, #0
 8000770:	601a      	str	r2, [r3, #0]
 8000772:	605a      	str	r2, [r3, #4]
 8000774:	609a      	str	r2, [r3, #8]
 8000776:	60da      	str	r2, [r3, #12]
 8000778:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800077a:	4b67      	ldr	r3, [pc, #412]	; (8000918 <MX_GPIO_Init+0x1b4>)
 800077c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800077e:	4a66      	ldr	r2, [pc, #408]	; (8000918 <MX_GPIO_Init+0x1b4>)
 8000780:	f043 0304 	orr.w	r3, r3, #4
 8000784:	6313      	str	r3, [r2, #48]	; 0x30
 8000786:	4b64      	ldr	r3, [pc, #400]	; (8000918 <MX_GPIO_Init+0x1b4>)
 8000788:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800078a:	f003 0304 	and.w	r3, r3, #4
 800078e:	61bb      	str	r3, [r7, #24]
 8000790:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000792:	4b61      	ldr	r3, [pc, #388]	; (8000918 <MX_GPIO_Init+0x1b4>)
 8000794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000796:	4a60      	ldr	r2, [pc, #384]	; (8000918 <MX_GPIO_Init+0x1b4>)
 8000798:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800079c:	6313      	str	r3, [r2, #48]	; 0x30
 800079e:	4b5e      	ldr	r3, [pc, #376]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007a2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80007a6:	617b      	str	r3, [r7, #20]
 80007a8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80007aa:	4b5b      	ldr	r3, [pc, #364]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ae:	4a5a      	ldr	r2, [pc, #360]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007b0:	f043 0301 	orr.w	r3, r3, #1
 80007b4:	6313      	str	r3, [r2, #48]	; 0x30
 80007b6:	4b58      	ldr	r3, [pc, #352]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ba:	f003 0301 	and.w	r3, r3, #1
 80007be:	613b      	str	r3, [r7, #16]
 80007c0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80007c2:	4b55      	ldr	r3, [pc, #340]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007c6:	4a54      	ldr	r2, [pc, #336]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007c8:	f043 0302 	orr.w	r3, r3, #2
 80007cc:	6313      	str	r3, [r2, #48]	; 0x30
 80007ce:	4b52      	ldr	r3, [pc, #328]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d2:	f003 0302 	and.w	r3, r3, #2
 80007d6:	60fb      	str	r3, [r7, #12]
 80007d8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80007da:	4b4f      	ldr	r3, [pc, #316]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007de:	4a4e      	ldr	r2, [pc, #312]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007e0:	f043 0308 	orr.w	r3, r3, #8
 80007e4:	6313      	str	r3, [r2, #48]	; 0x30
 80007e6:	4b4c      	ldr	r3, [pc, #304]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007ea:	f003 0308 	and.w	r3, r3, #8
 80007ee:	60bb      	str	r3, [r7, #8]
 80007f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80007f2:	4b49      	ldr	r3, [pc, #292]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007f6:	4a48      	ldr	r2, [pc, #288]	; (8000918 <MX_GPIO_Init+0x1b4>)
 80007f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80007fc:	6313      	str	r3, [r2, #48]	; 0x30
 80007fe:	4b46      	ldr	r3, [pc, #280]	; (8000918 <MX_GPIO_Init+0x1b4>)
 8000800:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000802:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000806:	607b      	str	r3, [r7, #4]
 8000808:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 800080a:	2200      	movs	r2, #0
 800080c:	f244 0181 	movw	r1, #16513	; 0x4081
 8000810:	4842      	ldr	r0, [pc, #264]	; (800091c <MX_GPIO_Init+0x1b8>)
 8000812:	f000 fd9f 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000816:	2200      	movs	r2, #0
 8000818:	2140      	movs	r1, #64	; 0x40
 800081a:	4841      	ldr	r0, [pc, #260]	; (8000920 <MX_GPIO_Init+0x1bc>)
 800081c:	f000 fd9a 	bl	8001354 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 8000820:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000824:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000826:	4b3f      	ldr	r3, [pc, #252]	; (8000924 <MX_GPIO_Init+0x1c0>)
 8000828:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800082a:	2300      	movs	r3, #0
 800082c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800082e:	f107 031c 	add.w	r3, r7, #28
 8000832:	4619      	mov	r1, r3
 8000834:	483c      	ldr	r0, [pc, #240]	; (8000928 <MX_GPIO_Init+0x1c4>)
 8000836:	f000 fbe1 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 800083a:	2332      	movs	r3, #50	; 0x32
 800083c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800083e:	2302      	movs	r3, #2
 8000840:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000842:	2300      	movs	r3, #0
 8000844:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000846:	2303      	movs	r3, #3
 8000848:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800084a:	230b      	movs	r3, #11
 800084c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800084e:	f107 031c 	add.w	r3, r7, #28
 8000852:	4619      	mov	r1, r3
 8000854:	4834      	ldr	r0, [pc, #208]	; (8000928 <MX_GPIO_Init+0x1c4>)
 8000856:	f000 fbd1 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 800085a:	2386      	movs	r3, #134	; 0x86
 800085c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800085e:	2302      	movs	r3, #2
 8000860:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000862:	2300      	movs	r3, #0
 8000864:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000866:	2303      	movs	r3, #3
 8000868:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800086a:	230b      	movs	r3, #11
 800086c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800086e:	f107 031c 	add.w	r3, r7, #28
 8000872:	4619      	mov	r1, r3
 8000874:	482d      	ldr	r0, [pc, #180]	; (800092c <MX_GPIO_Init+0x1c8>)
 8000876:	f000 fbc1 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 800087a:	f244 0381 	movw	r3, #16513	; 0x4081
 800087e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000880:	2301      	movs	r3, #1
 8000882:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000884:	2300      	movs	r3, #0
 8000886:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000888:	2300      	movs	r3, #0
 800088a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800088c:	f107 031c 	add.w	r3, r7, #28
 8000890:	4619      	mov	r1, r3
 8000892:	4822      	ldr	r0, [pc, #136]	; (800091c <MX_GPIO_Init+0x1b8>)
 8000894:	f000 fbb2 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8000898:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800089c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800089e:	2302      	movs	r3, #2
 80008a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008a2:	2300      	movs	r3, #0
 80008a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008a6:	2303      	movs	r3, #3
 80008a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80008aa:	230b      	movs	r3, #11
 80008ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80008ae:	f107 031c 	add.w	r3, r7, #28
 80008b2:	4619      	mov	r1, r3
 80008b4:	4819      	ldr	r0, [pc, #100]	; (800091c <MX_GPIO_Init+0x1b8>)
 80008b6:	f000 fba1 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80008ba:	2340      	movs	r3, #64	; 0x40
 80008bc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80008be:	2301      	movs	r3, #1
 80008c0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008c2:	2300      	movs	r3, #0
 80008c4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80008c6:	2300      	movs	r3, #0
 80008c8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80008ca:	f107 031c 	add.w	r3, r7, #28
 80008ce:	4619      	mov	r1, r3
 80008d0:	4813      	ldr	r0, [pc, #76]	; (8000920 <MX_GPIO_Init+0x1bc>)
 80008d2:	f000 fb93 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80008d6:	2380      	movs	r3, #128	; 0x80
 80008d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80008da:	2300      	movs	r3, #0
 80008dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008de:	2300      	movs	r3, #0
 80008e0:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80008e2:	f107 031c 	add.w	r3, r7, #28
 80008e6:	4619      	mov	r1, r3
 80008e8:	480d      	ldr	r0, [pc, #52]	; (8000920 <MX_GPIO_Init+0x1bc>)
 80008ea:	f000 fb87 	bl	8000ffc <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80008ee:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80008f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80008f4:	2302      	movs	r3, #2
 80008f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80008f8:	2300      	movs	r3, #0
 80008fa:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80008fc:	2303      	movs	r3, #3
 80008fe:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000900:	230b      	movs	r3, #11
 8000902:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000904:	f107 031c 	add.w	r3, r7, #28
 8000908:	4619      	mov	r1, r3
 800090a:	4805      	ldr	r0, [pc, #20]	; (8000920 <MX_GPIO_Init+0x1bc>)
 800090c:	f000 fb76 	bl	8000ffc <HAL_GPIO_Init>

}
 8000910:	bf00      	nop
 8000912:	3730      	adds	r7, #48	; 0x30
 8000914:	46bd      	mov	sp, r7
 8000916:	bd80      	pop	{r7, pc}
 8000918:	40023800 	.word	0x40023800
 800091c:	40020400 	.word	0x40020400
 8000920:	40021800 	.word	0x40021800
 8000924:	10110000 	.word	0x10110000
 8000928:	40020800 	.word	0x40020800
 800092c:	40020000 	.word	0x40020000

08000930 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000930:	b480      	push	{r7}
 8000932:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000934:	b672      	cpsid	i
}
 8000936:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000938:	e7fe      	b.n	8000938 <Error_Handler+0x8>
	...

0800093c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800093c:	b480      	push	{r7}
 800093e:	b083      	sub	sp, #12
 8000940:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000942:	4b0f      	ldr	r3, [pc, #60]	; (8000980 <HAL_MspInit+0x44>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a0e      	ldr	r2, [pc, #56]	; (8000980 <HAL_MspInit+0x44>)
 8000948:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b0c      	ldr	r3, [pc, #48]	; (8000980 <HAL_MspInit+0x44>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000956:	607b      	str	r3, [r7, #4]
 8000958:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800095a:	4b09      	ldr	r3, [pc, #36]	; (8000980 <HAL_MspInit+0x44>)
 800095c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800095e:	4a08      	ldr	r2, [pc, #32]	; (8000980 <HAL_MspInit+0x44>)
 8000960:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000964:	6453      	str	r3, [r2, #68]	; 0x44
 8000966:	4b06      	ldr	r3, [pc, #24]	; (8000980 <HAL_MspInit+0x44>)
 8000968:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800096a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800096e:	603b      	str	r3, [r7, #0]
 8000970:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000972:	bf00      	nop
 8000974:	370c      	adds	r7, #12
 8000976:	46bd      	mov	sp, r7
 8000978:	f85d 7b04 	ldr.w	r7, [sp], #4
 800097c:	4770      	bx	lr
 800097e:	bf00      	nop
 8000980:	40023800 	.word	0x40023800

08000984 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000984:	b580      	push	{r7, lr}
 8000986:	b08a      	sub	sp, #40	; 0x28
 8000988:	af00      	add	r7, sp, #0
 800098a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800098c:	f107 0314 	add.w	r3, r7, #20
 8000990:	2200      	movs	r2, #0
 8000992:	601a      	str	r2, [r3, #0]
 8000994:	605a      	str	r2, [r3, #4]
 8000996:	609a      	str	r2, [r3, #8]
 8000998:	60da      	str	r2, [r3, #12]
 800099a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 800099c:	687b      	ldr	r3, [r7, #4]
 800099e:	681b      	ldr	r3, [r3, #0]
 80009a0:	4a1b      	ldr	r2, [pc, #108]	; (8000a10 <HAL_UART_MspInit+0x8c>)
 80009a2:	4293      	cmp	r3, r2
 80009a4:	d130      	bne.n	8000a08 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80009a6:	4b1b      	ldr	r3, [pc, #108]	; (8000a14 <HAL_UART_MspInit+0x90>)
 80009a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009aa:	4a1a      	ldr	r2, [pc, #104]	; (8000a14 <HAL_UART_MspInit+0x90>)
 80009ac:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80009b0:	6413      	str	r3, [r2, #64]	; 0x40
 80009b2:	4b18      	ldr	r3, [pc, #96]	; (8000a14 <HAL_UART_MspInit+0x90>)
 80009b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009b6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80009ba:	613b      	str	r3, [r7, #16]
 80009bc:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80009be:	4b15      	ldr	r3, [pc, #84]	; (8000a14 <HAL_UART_MspInit+0x90>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a14      	ldr	r2, [pc, #80]	; (8000a14 <HAL_UART_MspInit+0x90>)
 80009c4:	f043 0308 	orr.w	r3, r3, #8
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b12      	ldr	r3, [pc, #72]	; (8000a14 <HAL_UART_MspInit+0x90>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f003 0308 	and.w	r3, r3, #8
 80009d2:	60fb      	str	r3, [r7, #12]
 80009d4:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80009d6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80009da:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009dc:	2302      	movs	r3, #2
 80009de:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009e0:	2300      	movs	r3, #0
 80009e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e4:	2303      	movs	r3, #3
 80009e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80009e8:	2307      	movs	r3, #7
 80009ea:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009ec:	f107 0314 	add.w	r3, r7, #20
 80009f0:	4619      	mov	r1, r3
 80009f2:	4809      	ldr	r0, [pc, #36]	; (8000a18 <HAL_UART_MspInit+0x94>)
 80009f4:	f000 fb02 	bl	8000ffc <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 0, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2100      	movs	r1, #0
 80009fc:	2027      	movs	r0, #39	; 0x27
 80009fe:	f000 fa34 	bl	8000e6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8000a02:	2027      	movs	r0, #39	; 0x27
 8000a04:	f000 fa4d 	bl	8000ea2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000a08:	bf00      	nop
 8000a0a:	3728      	adds	r7, #40	; 0x28
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40004800 	.word	0x40004800
 8000a14:	40023800 	.word	0x40023800
 8000a18:	40020c00 	.word	0x40020c00

08000a1c <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000a1c:	b580      	push	{r7, lr}
 8000a1e:	b08a      	sub	sp, #40	; 0x28
 8000a20:	af00      	add	r7, sp, #0
 8000a22:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a24:	f107 0314 	add.w	r3, r7, #20
 8000a28:	2200      	movs	r2, #0
 8000a2a:	601a      	str	r2, [r3, #0]
 8000a2c:	605a      	str	r2, [r3, #4]
 8000a2e:	609a      	str	r2, [r3, #8]
 8000a30:	60da      	str	r2, [r3, #12]
 8000a32:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000a34:	687b      	ldr	r3, [r7, #4]
 8000a36:	681b      	ldr	r3, [r3, #0]
 8000a38:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000a3c:	d141      	bne.n	8000ac2 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a3e:	4b23      	ldr	r3, [pc, #140]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000a40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a42:	4a22      	ldr	r2, [pc, #136]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000a44:	f043 0301 	orr.w	r3, r3, #1
 8000a48:	6313      	str	r3, [r2, #48]	; 0x30
 8000a4a:	4b20      	ldr	r3, [pc, #128]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a4e:	f003 0301 	and.w	r3, r3, #1
 8000a52:	613b      	str	r3, [r7, #16]
 8000a54:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000a56:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000a5a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a5c:	2302      	movs	r3, #2
 8000a5e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a60:	2300      	movs	r3, #0
 8000a62:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a64:	2303      	movs	r3, #3
 8000a66:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000a68:	230a      	movs	r3, #10
 8000a6a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a6c:	f107 0314 	add.w	r3, r7, #20
 8000a70:	4619      	mov	r1, r3
 8000a72:	4817      	ldr	r0, [pc, #92]	; (8000ad0 <HAL_PCD_MspInit+0xb4>)
 8000a74:	f000 fac2 	bl	8000ffc <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000a78:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000a7c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a7e:	2300      	movs	r3, #0
 8000a80:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a82:	2300      	movs	r3, #0
 8000a84:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000a86:	f107 0314 	add.w	r3, r7, #20
 8000a8a:	4619      	mov	r1, r3
 8000a8c:	4810      	ldr	r0, [pc, #64]	; (8000ad0 <HAL_PCD_MspInit+0xb4>)
 8000a8e:	f000 fab5 	bl	8000ffc <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000a92:	4b0e      	ldr	r3, [pc, #56]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000a94:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000a96:	4a0d      	ldr	r2, [pc, #52]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000a98:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a9c:	6353      	str	r3, [r2, #52]	; 0x34
 8000a9e:	4b0b      	ldr	r3, [pc, #44]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000aa0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000aa2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000aa6:	60fb      	str	r3, [r7, #12]
 8000aa8:	68fb      	ldr	r3, [r7, #12]
 8000aaa:	4b08      	ldr	r3, [pc, #32]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aae:	4a07      	ldr	r2, [pc, #28]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000ab0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000ab4:	6453      	str	r3, [r2, #68]	; 0x44
 8000ab6:	4b05      	ldr	r3, [pc, #20]	; (8000acc <HAL_PCD_MspInit+0xb0>)
 8000ab8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000aba:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000abe:	60bb      	str	r3, [r7, #8]
 8000ac0:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000ac2:	bf00      	nop
 8000ac4:	3728      	adds	r7, #40	; 0x28
 8000ac6:	46bd      	mov	sp, r7
 8000ac8:	bd80      	pop	{r7, pc}
 8000aca:	bf00      	nop
 8000acc:	40023800 	.word	0x40023800
 8000ad0:	40020000 	.word	0x40020000

08000ad4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000ad4:	b480      	push	{r7}
 8000ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000ad8:	e7fe      	b.n	8000ad8 <NMI_Handler+0x4>

08000ada <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000ada:	b480      	push	{r7}
 8000adc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000ade:	e7fe      	b.n	8000ade <HardFault_Handler+0x4>

08000ae0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000ae0:	b480      	push	{r7}
 8000ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000ae4:	e7fe      	b.n	8000ae4 <MemManage_Handler+0x4>

08000ae6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000ae6:	b480      	push	{r7}
 8000ae8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000aea:	e7fe      	b.n	8000aea <BusFault_Handler+0x4>

08000aec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000aec:	b480      	push	{r7}
 8000aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000af0:	e7fe      	b.n	8000af0 <UsageFault_Handler+0x4>

08000af2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000af2:	b480      	push	{r7}
 8000af4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000af6:	bf00      	nop
 8000af8:	46bd      	mov	sp, r7
 8000afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000afe:	4770      	bx	lr

08000b00 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000b00:	b480      	push	{r7}
 8000b02:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000b04:	bf00      	nop
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr

08000b0e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000b0e:	b480      	push	{r7}
 8000b10:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000b12:	bf00      	nop
 8000b14:	46bd      	mov	sp, r7
 8000b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b1a:	4770      	bx	lr

08000b1c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000b1c:	b580      	push	{r7, lr}
 8000b1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000b20:	f000 f884 	bl	8000c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000b24:	bf00      	nop
 8000b26:	bd80      	pop	{r7, pc}

08000b28 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8000b28:	b580      	push	{r7, lr}
 8000b2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8000b2c:	4802      	ldr	r0, [pc, #8]	; (8000b38 <USART3_IRQHandler+0x10>)
 8000b2e:	f001 febf 	bl	80028b0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8000b32:	bf00      	nop
 8000b34:	bd80      	pop	{r7, pc}
 8000b36:	bf00      	nop
 8000b38:	20000028 	.word	0x20000028

08000b3c <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b3c:	b480      	push	{r7}
 8000b3e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b40:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <SystemInit+0x20>)
 8000b42:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000b46:	4a05      	ldr	r2, [pc, #20]	; (8000b5c <SystemInit+0x20>)
 8000b48:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000b4c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b50:	bf00      	nop
 8000b52:	46bd      	mov	sp, r7
 8000b54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b58:	4770      	bx	lr
 8000b5a:	bf00      	nop
 8000b5c:	e000ed00 	.word	0xe000ed00

08000b60 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000b60:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000b98 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b64:	480d      	ldr	r0, [pc, #52]	; (8000b9c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000b66:	490e      	ldr	r1, [pc, #56]	; (8000ba0 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000b68:	4a0e      	ldr	r2, [pc, #56]	; (8000ba4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000b6a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b6c:	e002      	b.n	8000b74 <LoopCopyDataInit>

08000b6e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b6e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b70:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b72:	3304      	adds	r3, #4

08000b74 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b74:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b76:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b78:	d3f9      	bcc.n	8000b6e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b7a:	4a0b      	ldr	r2, [pc, #44]	; (8000ba8 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000b7c:	4c0b      	ldr	r4, [pc, #44]	; (8000bac <LoopFillZerobss+0x26>)
  movs r3, #0
 8000b7e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b80:	e001      	b.n	8000b86 <LoopFillZerobss>

08000b82 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b82:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b84:	3204      	adds	r2, #4

08000b86 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b86:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b88:	d3fb      	bcc.n	8000b82 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b8a:	f7ff ffd7 	bl	8000b3c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000b8e:	f003 f8c1 	bl	8003d14 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b92:	f7ff fce3 	bl	800055c <main>
  bx  lr    
 8000b96:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000b98:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000b9c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000ba0:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000ba4:	08003dac 	.word	0x08003dac
  ldr r2, =_sbss
 8000ba8:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000bac:	200004b8 	.word	0x200004b8

08000bb0 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000bb0:	e7fe      	b.n	8000bb0 <ADC_IRQHandler>

08000bb2 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000bb2:	b580      	push	{r7, lr}
 8000bb4:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bb6:	2003      	movs	r0, #3
 8000bb8:	f000 f94c 	bl	8000e54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bbc:	2000      	movs	r0, #0
 8000bbe:	f000 f805 	bl	8000bcc <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000bc2:	f7ff febb 	bl	800093c <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000bc6:	2300      	movs	r3, #0
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	bd80      	pop	{r7, pc}

08000bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bcc:	b580      	push	{r7, lr}
 8000bce:	b082      	sub	sp, #8
 8000bd0:	af00      	add	r7, sp, #0
 8000bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bd4:	4b12      	ldr	r3, [pc, #72]	; (8000c20 <HAL_InitTick+0x54>)
 8000bd6:	681a      	ldr	r2, [r3, #0]
 8000bd8:	4b12      	ldr	r3, [pc, #72]	; (8000c24 <HAL_InitTick+0x58>)
 8000bda:	781b      	ldrb	r3, [r3, #0]
 8000bdc:	4619      	mov	r1, r3
 8000bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8000be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8000bea:	4618      	mov	r0, r3
 8000bec:	f000 f967 	bl	8000ebe <HAL_SYSTICK_Config>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	2b00      	cmp	r3, #0
 8000bf4:	d001      	beq.n	8000bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000bf6:	2301      	movs	r3, #1
 8000bf8:	e00e      	b.n	8000c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000bfa:	687b      	ldr	r3, [r7, #4]
 8000bfc:	2b0f      	cmp	r3, #15
 8000bfe:	d80a      	bhi.n	8000c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c00:	2200      	movs	r2, #0
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	f04f 30ff 	mov.w	r0, #4294967295
 8000c08:	f000 f92f 	bl	8000e6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c0c:	4a06      	ldr	r2, [pc, #24]	; (8000c28 <HAL_InitTick+0x5c>)
 8000c0e:	687b      	ldr	r3, [r7, #4]
 8000c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c12:	2300      	movs	r3, #0
 8000c14:	e000      	b.n	8000c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
}
 8000c18:	4618      	mov	r0, r3
 8000c1a:	3708      	adds	r7, #8
 8000c1c:	46bd      	mov	sp, r7
 8000c1e:	bd80      	pop	{r7, pc}
 8000c20:	20000000 	.word	0x20000000
 8000c24:	20000008 	.word	0x20000008
 8000c28:	20000004 	.word	0x20000004

08000c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c2c:	b480      	push	{r7}
 8000c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c30:	4b06      	ldr	r3, [pc, #24]	; (8000c4c <HAL_IncTick+0x20>)
 8000c32:	781b      	ldrb	r3, [r3, #0]
 8000c34:	461a      	mov	r2, r3
 8000c36:	4b06      	ldr	r3, [pc, #24]	; (8000c50 <HAL_IncTick+0x24>)
 8000c38:	681b      	ldr	r3, [r3, #0]
 8000c3a:	4413      	add	r3, r2
 8000c3c:	4a04      	ldr	r2, [pc, #16]	; (8000c50 <HAL_IncTick+0x24>)
 8000c3e:	6013      	str	r3, [r2, #0]
}
 8000c40:	bf00      	nop
 8000c42:	46bd      	mov	sp, r7
 8000c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c48:	4770      	bx	lr
 8000c4a:	bf00      	nop
 8000c4c:	20000008 	.word	0x20000008
 8000c50:	200004b4 	.word	0x200004b4

08000c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c54:	b480      	push	{r7}
 8000c56:	af00      	add	r7, sp, #0
  return uwTick;
 8000c58:	4b03      	ldr	r3, [pc, #12]	; (8000c68 <HAL_GetTick+0x14>)
 8000c5a:	681b      	ldr	r3, [r3, #0]
}
 8000c5c:	4618      	mov	r0, r3
 8000c5e:	46bd      	mov	sp, r7
 8000c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c64:	4770      	bx	lr
 8000c66:	bf00      	nop
 8000c68:	200004b4 	.word	0x200004b4

08000c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c6c:	b580      	push	{r7, lr}
 8000c6e:	b084      	sub	sp, #16
 8000c70:	af00      	add	r7, sp, #0
 8000c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c74:	f7ff ffee 	bl	8000c54 <HAL_GetTick>
 8000c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c7a:	687b      	ldr	r3, [r7, #4]
 8000c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c7e:	68fb      	ldr	r3, [r7, #12]
 8000c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000c84:	d005      	beq.n	8000c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000c86:	4b0a      	ldr	r3, [pc, #40]	; (8000cb0 <HAL_Delay+0x44>)
 8000c88:	781b      	ldrb	r3, [r3, #0]
 8000c8a:	461a      	mov	r2, r3
 8000c8c:	68fb      	ldr	r3, [r7, #12]
 8000c8e:	4413      	add	r3, r2
 8000c90:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8000c92:	bf00      	nop
 8000c94:	f7ff ffde 	bl	8000c54 <HAL_GetTick>
 8000c98:	4602      	mov	r2, r0
 8000c9a:	68bb      	ldr	r3, [r7, #8]
 8000c9c:	1ad3      	subs	r3, r2, r3
 8000c9e:	68fa      	ldr	r2, [r7, #12]
 8000ca0:	429a      	cmp	r2, r3
 8000ca2:	d8f7      	bhi.n	8000c94 <HAL_Delay+0x28>
  {
  }
}
 8000ca4:	bf00      	nop
 8000ca6:	bf00      	nop
 8000ca8:	3710      	adds	r7, #16
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bd80      	pop	{r7, pc}
 8000cae:	bf00      	nop
 8000cb0:	20000008 	.word	0x20000008

08000cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cb4:	b480      	push	{r7}
 8000cb6:	b085      	sub	sp, #20
 8000cb8:	af00      	add	r7, sp, #0
 8000cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	f003 0307 	and.w	r3, r3, #7
 8000cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000cc4:	4b0b      	ldr	r3, [pc, #44]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000cc6:	68db      	ldr	r3, [r3, #12]
 8000cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cca:	68ba      	ldr	r2, [r7, #8]
 8000ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000cd0:	4013      	ands	r3, r2
 8000cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cd4:	68fb      	ldr	r3, [r7, #12]
 8000cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cd8:	68bb      	ldr	r3, [r7, #8]
 8000cda:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8000cdc:	4b06      	ldr	r3, [pc, #24]	; (8000cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8000cde:	4313      	orrs	r3, r2
 8000ce0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000ce2:	4a04      	ldr	r2, [pc, #16]	; (8000cf4 <__NVIC_SetPriorityGrouping+0x40>)
 8000ce4:	68bb      	ldr	r3, [r7, #8]
 8000ce6:	60d3      	str	r3, [r2, #12]
}
 8000ce8:	bf00      	nop
 8000cea:	3714      	adds	r7, #20
 8000cec:	46bd      	mov	sp, r7
 8000cee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cf2:	4770      	bx	lr
 8000cf4:	e000ed00 	.word	0xe000ed00
 8000cf8:	05fa0000 	.word	0x05fa0000

08000cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000cfc:	b480      	push	{r7}
 8000cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d00:	4b04      	ldr	r3, [pc, #16]	; (8000d14 <__NVIC_GetPriorityGrouping+0x18>)
 8000d02:	68db      	ldr	r3, [r3, #12]
 8000d04:	0a1b      	lsrs	r3, r3, #8
 8000d06:	f003 0307 	and.w	r3, r3, #7
}
 8000d0a:	4618      	mov	r0, r3
 8000d0c:	46bd      	mov	sp, r7
 8000d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d12:	4770      	bx	lr
 8000d14:	e000ed00 	.word	0xe000ed00

08000d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d18:	b480      	push	{r7}
 8000d1a:	b083      	sub	sp, #12
 8000d1c:	af00      	add	r7, sp, #0
 8000d1e:	4603      	mov	r3, r0
 8000d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d26:	2b00      	cmp	r3, #0
 8000d28:	db0b      	blt.n	8000d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d2a:	79fb      	ldrb	r3, [r7, #7]
 8000d2c:	f003 021f 	and.w	r2, r3, #31
 8000d30:	4907      	ldr	r1, [pc, #28]	; (8000d50 <__NVIC_EnableIRQ+0x38>)
 8000d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d36:	095b      	lsrs	r3, r3, #5
 8000d38:	2001      	movs	r0, #1
 8000d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000d42:	bf00      	nop
 8000d44:	370c      	adds	r7, #12
 8000d46:	46bd      	mov	sp, r7
 8000d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d4c:	4770      	bx	lr
 8000d4e:	bf00      	nop
 8000d50:	e000e100 	.word	0xe000e100

08000d54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d54:	b480      	push	{r7}
 8000d56:	b083      	sub	sp, #12
 8000d58:	af00      	add	r7, sp, #0
 8000d5a:	4603      	mov	r3, r0
 8000d5c:	6039      	str	r1, [r7, #0]
 8000d5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d64:	2b00      	cmp	r3, #0
 8000d66:	db0a      	blt.n	8000d7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	b2da      	uxtb	r2, r3
 8000d6c:	490c      	ldr	r1, [pc, #48]	; (8000da0 <__NVIC_SetPriority+0x4c>)
 8000d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d72:	0112      	lsls	r2, r2, #4
 8000d74:	b2d2      	uxtb	r2, r2
 8000d76:	440b      	add	r3, r1
 8000d78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d7c:	e00a      	b.n	8000d94 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d7e:	683b      	ldr	r3, [r7, #0]
 8000d80:	b2da      	uxtb	r2, r3
 8000d82:	4908      	ldr	r1, [pc, #32]	; (8000da4 <__NVIC_SetPriority+0x50>)
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f003 030f 	and.w	r3, r3, #15
 8000d8a:	3b04      	subs	r3, #4
 8000d8c:	0112      	lsls	r2, r2, #4
 8000d8e:	b2d2      	uxtb	r2, r2
 8000d90:	440b      	add	r3, r1
 8000d92:	761a      	strb	r2, [r3, #24]
}
 8000d94:	bf00      	nop
 8000d96:	370c      	adds	r7, #12
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr
 8000da0:	e000e100 	.word	0xe000e100
 8000da4:	e000ed00 	.word	0xe000ed00

08000da8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000da8:	b480      	push	{r7}
 8000daa:	b089      	sub	sp, #36	; 0x24
 8000dac:	af00      	add	r7, sp, #0
 8000dae:	60f8      	str	r0, [r7, #12]
 8000db0:	60b9      	str	r1, [r7, #8]
 8000db2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000db4:	68fb      	ldr	r3, [r7, #12]
 8000db6:	f003 0307 	and.w	r3, r3, #7
 8000dba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000dbc:	69fb      	ldr	r3, [r7, #28]
 8000dbe:	f1c3 0307 	rsb	r3, r3, #7
 8000dc2:	2b04      	cmp	r3, #4
 8000dc4:	bf28      	it	cs
 8000dc6:	2304      	movcs	r3, #4
 8000dc8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dca:	69fb      	ldr	r3, [r7, #28]
 8000dcc:	3304      	adds	r3, #4
 8000dce:	2b06      	cmp	r3, #6
 8000dd0:	d902      	bls.n	8000dd8 <NVIC_EncodePriority+0x30>
 8000dd2:	69fb      	ldr	r3, [r7, #28]
 8000dd4:	3b03      	subs	r3, #3
 8000dd6:	e000      	b.n	8000dda <NVIC_EncodePriority+0x32>
 8000dd8:	2300      	movs	r3, #0
 8000dda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000ddc:	f04f 32ff 	mov.w	r2, #4294967295
 8000de0:	69bb      	ldr	r3, [r7, #24]
 8000de2:	fa02 f303 	lsl.w	r3, r2, r3
 8000de6:	43da      	mvns	r2, r3
 8000de8:	68bb      	ldr	r3, [r7, #8]
 8000dea:	401a      	ands	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000df0:	f04f 31ff 	mov.w	r1, #4294967295
 8000df4:	697b      	ldr	r3, [r7, #20]
 8000df6:	fa01 f303 	lsl.w	r3, r1, r3
 8000dfa:	43d9      	mvns	r1, r3
 8000dfc:	687b      	ldr	r3, [r7, #4]
 8000dfe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e00:	4313      	orrs	r3, r2
         );
}
 8000e02:	4618      	mov	r0, r3
 8000e04:	3724      	adds	r7, #36	; 0x24
 8000e06:	46bd      	mov	sp, r7
 8000e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e0c:	4770      	bx	lr
	...

08000e10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e10:	b580      	push	{r7, lr}
 8000e12:	b082      	sub	sp, #8
 8000e14:	af00      	add	r7, sp, #0
 8000e16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e18:	687b      	ldr	r3, [r7, #4]
 8000e1a:	3b01      	subs	r3, #1
 8000e1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000e20:	d301      	bcc.n	8000e26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e22:	2301      	movs	r3, #1
 8000e24:	e00f      	b.n	8000e46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e26:	4a0a      	ldr	r2, [pc, #40]	; (8000e50 <SysTick_Config+0x40>)
 8000e28:	687b      	ldr	r3, [r7, #4]
 8000e2a:	3b01      	subs	r3, #1
 8000e2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e2e:	210f      	movs	r1, #15
 8000e30:	f04f 30ff 	mov.w	r0, #4294967295
 8000e34:	f7ff ff8e 	bl	8000d54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e38:	4b05      	ldr	r3, [pc, #20]	; (8000e50 <SysTick_Config+0x40>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e3e:	4b04      	ldr	r3, [pc, #16]	; (8000e50 <SysTick_Config+0x40>)
 8000e40:	2207      	movs	r2, #7
 8000e42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e44:	2300      	movs	r3, #0
}
 8000e46:	4618      	mov	r0, r3
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}
 8000e4e:	bf00      	nop
 8000e50:	e000e010 	.word	0xe000e010

08000e54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e5c:	6878      	ldr	r0, [r7, #4]
 8000e5e:	f7ff ff29 	bl	8000cb4 <__NVIC_SetPriorityGrouping>
}
 8000e62:	bf00      	nop
 8000e64:	3708      	adds	r7, #8
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}

08000e6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e6a:	b580      	push	{r7, lr}
 8000e6c:	b086      	sub	sp, #24
 8000e6e:	af00      	add	r7, sp, #0
 8000e70:	4603      	mov	r3, r0
 8000e72:	60b9      	str	r1, [r7, #8]
 8000e74:	607a      	str	r2, [r7, #4]
 8000e76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000e78:	2300      	movs	r3, #0
 8000e7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e7c:	f7ff ff3e 	bl	8000cfc <__NVIC_GetPriorityGrouping>
 8000e80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000e82:	687a      	ldr	r2, [r7, #4]
 8000e84:	68b9      	ldr	r1, [r7, #8]
 8000e86:	6978      	ldr	r0, [r7, #20]
 8000e88:	f7ff ff8e 	bl	8000da8 <NVIC_EncodePriority>
 8000e8c:	4602      	mov	r2, r0
 8000e8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000e92:	4611      	mov	r1, r2
 8000e94:	4618      	mov	r0, r3
 8000e96:	f7ff ff5d 	bl	8000d54 <__NVIC_SetPriority>
}
 8000e9a:	bf00      	nop
 8000e9c:	3718      	adds	r7, #24
 8000e9e:	46bd      	mov	sp, r7
 8000ea0:	bd80      	pop	{r7, pc}

08000ea2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ea2:	b580      	push	{r7, lr}
 8000ea4:	b082      	sub	sp, #8
 8000ea6:	af00      	add	r7, sp, #0
 8000ea8:	4603      	mov	r3, r0
 8000eaa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000eac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f7ff ff31 	bl	8000d18 <__NVIC_EnableIRQ>
}
 8000eb6:	bf00      	nop
 8000eb8:	3708      	adds	r7, #8
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bd80      	pop	{r7, pc}

08000ebe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ebe:	b580      	push	{r7, lr}
 8000ec0:	b082      	sub	sp, #8
 8000ec2:	af00      	add	r7, sp, #0
 8000ec4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ec6:	6878      	ldr	r0, [r7, #4]
 8000ec8:	f7ff ffa2 	bl	8000e10 <SysTick_Config>
 8000ecc:	4603      	mov	r3, r0
}
 8000ece:	4618      	mov	r0, r3
 8000ed0:	3708      	adds	r7, #8
 8000ed2:	46bd      	mov	sp, r7
 8000ed4:	bd80      	pop	{r7, pc}

08000ed6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ed6:	b580      	push	{r7, lr}
 8000ed8:	b084      	sub	sp, #16
 8000eda:	af00      	add	r7, sp, #0
 8000edc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000ee2:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000ee4:	f7ff feb6 	bl	8000c54 <HAL_GetTick>
 8000ee8:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000eea:	687b      	ldr	r3, [r7, #4]
 8000eec:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000ef0:	b2db      	uxtb	r3, r3
 8000ef2:	2b02      	cmp	r3, #2
 8000ef4:	d008      	beq.n	8000f08 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000ef6:	687b      	ldr	r3, [r7, #4]
 8000ef8:	2280      	movs	r2, #128	; 0x80
 8000efa:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000efc:	687b      	ldr	r3, [r7, #4]
 8000efe:	2200      	movs	r2, #0
 8000f00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8000f04:	2301      	movs	r3, #1
 8000f06:	e052      	b.n	8000fae <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f08:	687b      	ldr	r3, [r7, #4]
 8000f0a:	681b      	ldr	r3, [r3, #0]
 8000f0c:	681a      	ldr	r2, [r3, #0]
 8000f0e:	687b      	ldr	r3, [r7, #4]
 8000f10:	681b      	ldr	r3, [r3, #0]
 8000f12:	f022 0216 	bic.w	r2, r2, #22
 8000f16:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f18:	687b      	ldr	r3, [r7, #4]
 8000f1a:	681b      	ldr	r3, [r3, #0]
 8000f1c:	695a      	ldr	r2, [r3, #20]
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	681b      	ldr	r3, [r3, #0]
 8000f22:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8000f26:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f2c:	2b00      	cmp	r3, #0
 8000f2e:	d103      	bne.n	8000f38 <HAL_DMA_Abort+0x62>
 8000f30:	687b      	ldr	r3, [r7, #4]
 8000f32:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8000f34:	2b00      	cmp	r3, #0
 8000f36:	d007      	beq.n	8000f48 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	681a      	ldr	r2, [r3, #0]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0208 	bic.w	r2, r2, #8
 8000f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	681a      	ldr	r2, [r3, #0]
 8000f4e:	687b      	ldr	r3, [r7, #4]
 8000f50:	681b      	ldr	r3, [r3, #0]
 8000f52:	f022 0201 	bic.w	r2, r2, #1
 8000f56:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f58:	e013      	b.n	8000f82 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f5a:	f7ff fe7b 	bl	8000c54 <HAL_GetTick>
 8000f5e:	4602      	mov	r2, r0
 8000f60:	68bb      	ldr	r3, [r7, #8]
 8000f62:	1ad3      	subs	r3, r2, r3
 8000f64:	2b05      	cmp	r3, #5
 8000f66:	d90c      	bls.n	8000f82 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	2220      	movs	r2, #32
 8000f6c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	2200      	movs	r2, #0
 8000f72:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f76:	687b      	ldr	r3, [r7, #4]
 8000f78:	2203      	movs	r2, #3
 8000f7a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8000f7e:	2303      	movs	r3, #3
 8000f80:	e015      	b.n	8000fae <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	681b      	ldr	r3, [r3, #0]
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	f003 0301 	and.w	r3, r3, #1
 8000f8c:	2b00      	cmp	r3, #0
 8000f8e:	d1e4      	bne.n	8000f5a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8000f94:	223f      	movs	r2, #63	; 0x3f
 8000f96:	409a      	lsls	r2, r3
 8000f98:	68fb      	ldr	r3, [r7, #12]
 8000f9a:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f9c:	687b      	ldr	r3, [r7, #4]
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fa4:	687b      	ldr	r3, [r7, #4]
 8000fa6:	2201      	movs	r2, #1
 8000fa8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8000fac:	2300      	movs	r3, #0
}
 8000fae:	4618      	mov	r0, r3
 8000fb0:	3710      	adds	r7, #16
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	bd80      	pop	{r7, pc}

08000fb6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fb6:	b480      	push	{r7}
 8000fb8:	b083      	sub	sp, #12
 8000fba:	af00      	add	r7, sp, #0
 8000fbc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fbe:	687b      	ldr	r3, [r7, #4]
 8000fc0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8000fc4:	b2db      	uxtb	r3, r3
 8000fc6:	2b02      	cmp	r3, #2
 8000fc8:	d004      	beq.n	8000fd4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fca:	687b      	ldr	r3, [r7, #4]
 8000fcc:	2280      	movs	r2, #128	; 0x80
 8000fce:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8000fd0:	2301      	movs	r3, #1
 8000fd2:	e00c      	b.n	8000fee <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000fd4:	687b      	ldr	r3, [r7, #4]
 8000fd6:	2205      	movs	r2, #5
 8000fd8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000fdc:	687b      	ldr	r3, [r7, #4]
 8000fde:	681b      	ldr	r3, [r3, #0]
 8000fe0:	681a      	ldr	r2, [r3, #0]
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	f022 0201 	bic.w	r2, r2, #1
 8000fea:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8000fec:	2300      	movs	r3, #0
}
 8000fee:	4618      	mov	r0, r3
 8000ff0:	370c      	adds	r7, #12
 8000ff2:	46bd      	mov	sp, r7
 8000ff4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ff8:	4770      	bx	lr
	...

08000ffc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000ffc:	b480      	push	{r7}
 8000ffe:	b089      	sub	sp, #36	; 0x24
 8001000:	af00      	add	r7, sp, #0
 8001002:	6078      	str	r0, [r7, #4]
 8001004:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001006:	2300      	movs	r3, #0
 8001008:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800100a:	2300      	movs	r3, #0
 800100c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 800100e:	2300      	movs	r3, #0
 8001010:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001012:	2300      	movs	r3, #0
 8001014:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001016:	2300      	movs	r3, #0
 8001018:	61fb      	str	r3, [r7, #28]
 800101a:	e175      	b.n	8001308 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 800101c:	2201      	movs	r2, #1
 800101e:	69fb      	ldr	r3, [r7, #28]
 8001020:	fa02 f303 	lsl.w	r3, r2, r3
 8001024:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001026:	683b      	ldr	r3, [r7, #0]
 8001028:	681b      	ldr	r3, [r3, #0]
 800102a:	697a      	ldr	r2, [r7, #20]
 800102c:	4013      	ands	r3, r2
 800102e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001030:	693a      	ldr	r2, [r7, #16]
 8001032:	697b      	ldr	r3, [r7, #20]
 8001034:	429a      	cmp	r2, r3
 8001036:	f040 8164 	bne.w	8001302 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800103a:	683b      	ldr	r3, [r7, #0]
 800103c:	685b      	ldr	r3, [r3, #4]
 800103e:	2b01      	cmp	r3, #1
 8001040:	d00b      	beq.n	800105a <HAL_GPIO_Init+0x5e>
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	685b      	ldr	r3, [r3, #4]
 8001046:	2b02      	cmp	r3, #2
 8001048:	d007      	beq.n	800105a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800104a:	683b      	ldr	r3, [r7, #0]
 800104c:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800104e:	2b11      	cmp	r3, #17
 8001050:	d003      	beq.n	800105a <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	685b      	ldr	r3, [r3, #4]
 8001056:	2b12      	cmp	r3, #18
 8001058:	d130      	bne.n	80010bc <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800105a:	687b      	ldr	r3, [r7, #4]
 800105c:	689b      	ldr	r3, [r3, #8]
 800105e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001060:	69fb      	ldr	r3, [r7, #28]
 8001062:	005b      	lsls	r3, r3, #1
 8001064:	2203      	movs	r2, #3
 8001066:	fa02 f303 	lsl.w	r3, r2, r3
 800106a:	43db      	mvns	r3, r3
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	4013      	ands	r3, r2
 8001070:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001072:	683b      	ldr	r3, [r7, #0]
 8001074:	68da      	ldr	r2, [r3, #12]
 8001076:	69fb      	ldr	r3, [r7, #28]
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	69ba      	ldr	r2, [r7, #24]
 8001080:	4313      	orrs	r3, r2
 8001082:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	69ba      	ldr	r2, [r7, #24]
 8001088:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800108a:	687b      	ldr	r3, [r7, #4]
 800108c:	685b      	ldr	r3, [r3, #4]
 800108e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001090:	2201      	movs	r2, #1
 8001092:	69fb      	ldr	r3, [r7, #28]
 8001094:	fa02 f303 	lsl.w	r3, r2, r3
 8001098:	43db      	mvns	r3, r3
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	4013      	ands	r3, r2
 800109e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	685b      	ldr	r3, [r3, #4]
 80010a4:	091b      	lsrs	r3, r3, #4
 80010a6:	f003 0201 	and.w	r2, r3, #1
 80010aa:	69fb      	ldr	r3, [r7, #28]
 80010ac:	fa02 f303 	lsl.w	r3, r2, r3
 80010b0:	69ba      	ldr	r2, [r7, #24]
 80010b2:	4313      	orrs	r3, r2
 80010b4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010b6:	687b      	ldr	r3, [r7, #4]
 80010b8:	69ba      	ldr	r2, [r7, #24]
 80010ba:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	68db      	ldr	r3, [r3, #12]
 80010c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80010c2:	69fb      	ldr	r3, [r7, #28]
 80010c4:	005b      	lsls	r3, r3, #1
 80010c6:	2203      	movs	r2, #3
 80010c8:	fa02 f303 	lsl.w	r3, r2, r3
 80010cc:	43db      	mvns	r3, r3
 80010ce:	69ba      	ldr	r2, [r7, #24]
 80010d0:	4013      	ands	r3, r2
 80010d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 80010d4:	683b      	ldr	r3, [r7, #0]
 80010d6:	689a      	ldr	r2, [r3, #8]
 80010d8:	69fb      	ldr	r3, [r7, #28]
 80010da:	005b      	lsls	r3, r3, #1
 80010dc:	fa02 f303 	lsl.w	r3, r2, r3
 80010e0:	69ba      	ldr	r2, [r7, #24]
 80010e2:	4313      	orrs	r3, r2
 80010e4:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 80010e6:	687b      	ldr	r3, [r7, #4]
 80010e8:	69ba      	ldr	r2, [r7, #24]
 80010ea:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80010ec:	683b      	ldr	r3, [r7, #0]
 80010ee:	685b      	ldr	r3, [r3, #4]
 80010f0:	2b02      	cmp	r3, #2
 80010f2:	d003      	beq.n	80010fc <HAL_GPIO_Init+0x100>
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	685b      	ldr	r3, [r3, #4]
 80010f8:	2b12      	cmp	r3, #18
 80010fa:	d123      	bne.n	8001144 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80010fc:	69fb      	ldr	r3, [r7, #28]
 80010fe:	08da      	lsrs	r2, r3, #3
 8001100:	687b      	ldr	r3, [r7, #4]
 8001102:	3208      	adds	r2, #8
 8001104:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001108:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800110a:	69fb      	ldr	r3, [r7, #28]
 800110c:	f003 0307 	and.w	r3, r3, #7
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	43db      	mvns	r3, r3
 800111a:	69ba      	ldr	r2, [r7, #24]
 800111c:	4013      	ands	r3, r2
 800111e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001120:	683b      	ldr	r3, [r7, #0]
 8001122:	691a      	ldr	r2, [r3, #16]
 8001124:	69fb      	ldr	r3, [r7, #28]
 8001126:	f003 0307 	and.w	r3, r3, #7
 800112a:	009b      	lsls	r3, r3, #2
 800112c:	fa02 f303 	lsl.w	r3, r2, r3
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	4313      	orrs	r3, r2
 8001134:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001136:	69fb      	ldr	r3, [r7, #28]
 8001138:	08da      	lsrs	r2, r3, #3
 800113a:	687b      	ldr	r3, [r7, #4]
 800113c:	3208      	adds	r2, #8
 800113e:	69b9      	ldr	r1, [r7, #24]
 8001140:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	681b      	ldr	r3, [r3, #0]
 8001148:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800114a:	69fb      	ldr	r3, [r7, #28]
 800114c:	005b      	lsls	r3, r3, #1
 800114e:	2203      	movs	r2, #3
 8001150:	fa02 f303 	lsl.w	r3, r2, r3
 8001154:	43db      	mvns	r3, r3
 8001156:	69ba      	ldr	r2, [r7, #24]
 8001158:	4013      	ands	r3, r2
 800115a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 800115c:	683b      	ldr	r3, [r7, #0]
 800115e:	685b      	ldr	r3, [r3, #4]
 8001160:	f003 0203 	and.w	r2, r3, #3
 8001164:	69fb      	ldr	r3, [r7, #28]
 8001166:	005b      	lsls	r3, r3, #1
 8001168:	fa02 f303 	lsl.w	r3, r2, r3
 800116c:	69ba      	ldr	r2, [r7, #24]
 800116e:	4313      	orrs	r3, r2
 8001170:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001172:	687b      	ldr	r3, [r7, #4]
 8001174:	69ba      	ldr	r2, [r7, #24]
 8001176:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001180:	2b00      	cmp	r3, #0
 8001182:	f000 80be 	beq.w	8001302 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001186:	4b66      	ldr	r3, [pc, #408]	; (8001320 <HAL_GPIO_Init+0x324>)
 8001188:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118a:	4a65      	ldr	r2, [pc, #404]	; (8001320 <HAL_GPIO_Init+0x324>)
 800118c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001190:	6453      	str	r3, [r2, #68]	; 0x44
 8001192:	4b63      	ldr	r3, [pc, #396]	; (8001320 <HAL_GPIO_Init+0x324>)
 8001194:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001196:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800119a:	60fb      	str	r3, [r7, #12]
 800119c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800119e:	4a61      	ldr	r2, [pc, #388]	; (8001324 <HAL_GPIO_Init+0x328>)
 80011a0:	69fb      	ldr	r3, [r7, #28]
 80011a2:	089b      	lsrs	r3, r3, #2
 80011a4:	3302      	adds	r3, #2
 80011a6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011aa:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80011ac:	69fb      	ldr	r3, [r7, #28]
 80011ae:	f003 0303 	and.w	r3, r3, #3
 80011b2:	009b      	lsls	r3, r3, #2
 80011b4:	220f      	movs	r2, #15
 80011b6:	fa02 f303 	lsl.w	r3, r2, r3
 80011ba:	43db      	mvns	r3, r3
 80011bc:	69ba      	ldr	r2, [r7, #24]
 80011be:	4013      	ands	r3, r2
 80011c0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 80011c2:	687b      	ldr	r3, [r7, #4]
 80011c4:	4a58      	ldr	r2, [pc, #352]	; (8001328 <HAL_GPIO_Init+0x32c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d037      	beq.n	800123a <HAL_GPIO_Init+0x23e>
 80011ca:	687b      	ldr	r3, [r7, #4]
 80011cc:	4a57      	ldr	r2, [pc, #348]	; (800132c <HAL_GPIO_Init+0x330>)
 80011ce:	4293      	cmp	r3, r2
 80011d0:	d031      	beq.n	8001236 <HAL_GPIO_Init+0x23a>
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	4a56      	ldr	r2, [pc, #344]	; (8001330 <HAL_GPIO_Init+0x334>)
 80011d6:	4293      	cmp	r3, r2
 80011d8:	d02b      	beq.n	8001232 <HAL_GPIO_Init+0x236>
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	4a55      	ldr	r2, [pc, #340]	; (8001334 <HAL_GPIO_Init+0x338>)
 80011de:	4293      	cmp	r3, r2
 80011e0:	d025      	beq.n	800122e <HAL_GPIO_Init+0x232>
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a54      	ldr	r2, [pc, #336]	; (8001338 <HAL_GPIO_Init+0x33c>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d01f      	beq.n	800122a <HAL_GPIO_Init+0x22e>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a53      	ldr	r2, [pc, #332]	; (800133c <HAL_GPIO_Init+0x340>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d019      	beq.n	8001226 <HAL_GPIO_Init+0x22a>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a52      	ldr	r2, [pc, #328]	; (8001340 <HAL_GPIO_Init+0x344>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d013      	beq.n	8001222 <HAL_GPIO_Init+0x226>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a51      	ldr	r2, [pc, #324]	; (8001344 <HAL_GPIO_Init+0x348>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d00d      	beq.n	800121e <HAL_GPIO_Init+0x222>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a50      	ldr	r2, [pc, #320]	; (8001348 <HAL_GPIO_Init+0x34c>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d007      	beq.n	800121a <HAL_GPIO_Init+0x21e>
 800120a:	687b      	ldr	r3, [r7, #4]
 800120c:	4a4f      	ldr	r2, [pc, #316]	; (800134c <HAL_GPIO_Init+0x350>)
 800120e:	4293      	cmp	r3, r2
 8001210:	d101      	bne.n	8001216 <HAL_GPIO_Init+0x21a>
 8001212:	2309      	movs	r3, #9
 8001214:	e012      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001216:	230a      	movs	r3, #10
 8001218:	e010      	b.n	800123c <HAL_GPIO_Init+0x240>
 800121a:	2308      	movs	r3, #8
 800121c:	e00e      	b.n	800123c <HAL_GPIO_Init+0x240>
 800121e:	2307      	movs	r3, #7
 8001220:	e00c      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001222:	2306      	movs	r3, #6
 8001224:	e00a      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001226:	2305      	movs	r3, #5
 8001228:	e008      	b.n	800123c <HAL_GPIO_Init+0x240>
 800122a:	2304      	movs	r3, #4
 800122c:	e006      	b.n	800123c <HAL_GPIO_Init+0x240>
 800122e:	2303      	movs	r3, #3
 8001230:	e004      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001232:	2302      	movs	r3, #2
 8001234:	e002      	b.n	800123c <HAL_GPIO_Init+0x240>
 8001236:	2301      	movs	r3, #1
 8001238:	e000      	b.n	800123c <HAL_GPIO_Init+0x240>
 800123a:	2300      	movs	r3, #0
 800123c:	69fa      	ldr	r2, [r7, #28]
 800123e:	f002 0203 	and.w	r2, r2, #3
 8001242:	0092      	lsls	r2, r2, #2
 8001244:	4093      	lsls	r3, r2
 8001246:	69ba      	ldr	r2, [r7, #24]
 8001248:	4313      	orrs	r3, r2
 800124a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 800124c:	4935      	ldr	r1, [pc, #212]	; (8001324 <HAL_GPIO_Init+0x328>)
 800124e:	69fb      	ldr	r3, [r7, #28]
 8001250:	089b      	lsrs	r3, r3, #2
 8001252:	3302      	adds	r3, #2
 8001254:	69ba      	ldr	r2, [r7, #24]
 8001256:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800125a:	4b3d      	ldr	r3, [pc, #244]	; (8001350 <HAL_GPIO_Init+0x354>)
 800125c:	681b      	ldr	r3, [r3, #0]
 800125e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001260:	693b      	ldr	r3, [r7, #16]
 8001262:	43db      	mvns	r3, r3
 8001264:	69ba      	ldr	r2, [r7, #24]
 8001266:	4013      	ands	r3, r2
 8001268:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800126a:	683b      	ldr	r3, [r7, #0]
 800126c:	685b      	ldr	r3, [r3, #4]
 800126e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001272:	2b00      	cmp	r3, #0
 8001274:	d003      	beq.n	800127e <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001276:	69ba      	ldr	r2, [r7, #24]
 8001278:	693b      	ldr	r3, [r7, #16]
 800127a:	4313      	orrs	r3, r2
 800127c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800127e:	4a34      	ldr	r2, [pc, #208]	; (8001350 <HAL_GPIO_Init+0x354>)
 8001280:	69bb      	ldr	r3, [r7, #24]
 8001282:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001284:	4b32      	ldr	r3, [pc, #200]	; (8001350 <HAL_GPIO_Init+0x354>)
 8001286:	685b      	ldr	r3, [r3, #4]
 8001288:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800128a:	693b      	ldr	r3, [r7, #16]
 800128c:	43db      	mvns	r3, r3
 800128e:	69ba      	ldr	r2, [r7, #24]
 8001290:	4013      	ands	r3, r2
 8001292:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001294:	683b      	ldr	r3, [r7, #0]
 8001296:	685b      	ldr	r3, [r3, #4]
 8001298:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800129c:	2b00      	cmp	r3, #0
 800129e:	d003      	beq.n	80012a8 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80012a0:	69ba      	ldr	r2, [r7, #24]
 80012a2:	693b      	ldr	r3, [r7, #16]
 80012a4:	4313      	orrs	r3, r2
 80012a6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012a8:	4a29      	ldr	r2, [pc, #164]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012aa:	69bb      	ldr	r3, [r7, #24]
 80012ac:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80012ae:	4b28      	ldr	r3, [pc, #160]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012b0:	689b      	ldr	r3, [r3, #8]
 80012b2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012b4:	693b      	ldr	r3, [r7, #16]
 80012b6:	43db      	mvns	r3, r3
 80012b8:	69ba      	ldr	r2, [r7, #24]
 80012ba:	4013      	ands	r3, r2
 80012bc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012be:	683b      	ldr	r3, [r7, #0]
 80012c0:	685b      	ldr	r3, [r3, #4]
 80012c2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80012ca:	69ba      	ldr	r2, [r7, #24]
 80012cc:	693b      	ldr	r3, [r7, #16]
 80012ce:	4313      	orrs	r3, r2
 80012d0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80012d2:	4a1f      	ldr	r2, [pc, #124]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012d4:	69bb      	ldr	r3, [r7, #24]
 80012d6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80012d8:	4b1d      	ldr	r3, [pc, #116]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012da:	68db      	ldr	r3, [r3, #12]
 80012dc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012de:	693b      	ldr	r3, [r7, #16]
 80012e0:	43db      	mvns	r3, r3
 80012e2:	69ba      	ldr	r2, [r7, #24]
 80012e4:	4013      	ands	r3, r2
 80012e6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80012e8:	683b      	ldr	r3, [r7, #0]
 80012ea:	685b      	ldr	r3, [r3, #4]
 80012ec:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80012f0:	2b00      	cmp	r3, #0
 80012f2:	d003      	beq.n	80012fc <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80012f4:	69ba      	ldr	r2, [r7, #24]
 80012f6:	693b      	ldr	r3, [r7, #16]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80012fc:	4a14      	ldr	r2, [pc, #80]	; (8001350 <HAL_GPIO_Init+0x354>)
 80012fe:	69bb      	ldr	r3, [r7, #24]
 8001300:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001302:	69fb      	ldr	r3, [r7, #28]
 8001304:	3301      	adds	r3, #1
 8001306:	61fb      	str	r3, [r7, #28]
 8001308:	69fb      	ldr	r3, [r7, #28]
 800130a:	2b0f      	cmp	r3, #15
 800130c:	f67f ae86 	bls.w	800101c <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001310:	bf00      	nop
 8001312:	bf00      	nop
 8001314:	3724      	adds	r7, #36	; 0x24
 8001316:	46bd      	mov	sp, r7
 8001318:	f85d 7b04 	ldr.w	r7, [sp], #4
 800131c:	4770      	bx	lr
 800131e:	bf00      	nop
 8001320:	40023800 	.word	0x40023800
 8001324:	40013800 	.word	0x40013800
 8001328:	40020000 	.word	0x40020000
 800132c:	40020400 	.word	0x40020400
 8001330:	40020800 	.word	0x40020800
 8001334:	40020c00 	.word	0x40020c00
 8001338:	40021000 	.word	0x40021000
 800133c:	40021400 	.word	0x40021400
 8001340:	40021800 	.word	0x40021800
 8001344:	40021c00 	.word	0x40021c00
 8001348:	40022000 	.word	0x40022000
 800134c:	40022400 	.word	0x40022400
 8001350:	40013c00 	.word	0x40013c00

08001354 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001354:	b480      	push	{r7}
 8001356:	b083      	sub	sp, #12
 8001358:	af00      	add	r7, sp, #0
 800135a:	6078      	str	r0, [r7, #4]
 800135c:	460b      	mov	r3, r1
 800135e:	807b      	strh	r3, [r7, #2]
 8001360:	4613      	mov	r3, r2
 8001362:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001364:	787b      	ldrb	r3, [r7, #1]
 8001366:	2b00      	cmp	r3, #0
 8001368:	d003      	beq.n	8001372 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800136a:	887a      	ldrh	r2, [r7, #2]
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001370:	e003      	b.n	800137a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001372:	887b      	ldrh	r3, [r7, #2]
 8001374:	041a      	lsls	r2, r3, #16
 8001376:	687b      	ldr	r3, [r7, #4]
 8001378:	619a      	str	r2, [r3, #24]
}
 800137a:	bf00      	nop
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr

08001386 <HAL_GPIO_TogglePin>:
  * @param  GPIOx Where x can be (A..I) to select the GPIO peripheral.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8001386:	b480      	push	{r7}
 8001388:	b085      	sub	sp, #20
 800138a:	af00      	add	r7, sp, #0
 800138c:	6078      	str	r0, [r7, #4]
 800138e:	460b      	mov	r3, r1
 8001390:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8001392:	687b      	ldr	r3, [r7, #4]
 8001394:	695b      	ldr	r3, [r3, #20]
 8001396:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8001398:	887a      	ldrh	r2, [r7, #2]
 800139a:	68fb      	ldr	r3, [r7, #12]
 800139c:	4013      	ands	r3, r2
 800139e:	041a      	lsls	r2, r3, #16
 80013a0:	68fb      	ldr	r3, [r7, #12]
 80013a2:	43d9      	mvns	r1, r3
 80013a4:	887b      	ldrh	r3, [r7, #2]
 80013a6:	400b      	ands	r3, r1
 80013a8:	431a      	orrs	r2, r3
 80013aa:	687b      	ldr	r3, [r7, #4]
 80013ac:	619a      	str	r2, [r3, #24]
}
 80013ae:	bf00      	nop
 80013b0:	3714      	adds	r7, #20
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80013ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 80013bc:	b08f      	sub	sp, #60	; 0x3c
 80013be:	af0a      	add	r7, sp, #40	; 0x28
 80013c0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80013c2:	687b      	ldr	r3, [r7, #4]
 80013c4:	2b00      	cmp	r3, #0
 80013c6:	d101      	bne.n	80013cc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80013c8:	2301      	movs	r3, #1
 80013ca:	e116      	b.n	80015fa <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80013d8:	b2db      	uxtb	r3, r3
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d106      	bne.n	80013ec <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	2200      	movs	r2, #0
 80013e2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80013e6:	6878      	ldr	r0, [r7, #4]
 80013e8:	f7ff fb18 	bl	8000a1c <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80013ec:	687b      	ldr	r3, [r7, #4]
 80013ee:	2203      	movs	r2, #3
 80013f0:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 80013f4:	68bb      	ldr	r3, [r7, #8]
 80013f6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80013f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80013fc:	2b00      	cmp	r3, #0
 80013fe:	d102      	bne.n	8001406 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001400:	687b      	ldr	r3, [r7, #4]
 8001402:	2200      	movs	r2, #0
 8001404:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001406:	687b      	ldr	r3, [r7, #4]
 8001408:	681b      	ldr	r3, [r3, #0]
 800140a:	4618      	mov	r0, r3
 800140c:	f002 fa22 	bl	8003854 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	681b      	ldr	r3, [r3, #0]
 8001414:	603b      	str	r3, [r7, #0]
 8001416:	687e      	ldr	r6, [r7, #4]
 8001418:	466d      	mov	r5, sp
 800141a:	f106 0410 	add.w	r4, r6, #16
 800141e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001420:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001422:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001424:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001426:	e894 0003 	ldmia.w	r4, {r0, r1}
 800142a:	e885 0003 	stmia.w	r5, {r0, r1}
 800142e:	1d33      	adds	r3, r6, #4
 8001430:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001432:	6838      	ldr	r0, [r7, #0]
 8001434:	f002 f9b6 	bl	80037a4 <USB_CoreInit>
 8001438:	4603      	mov	r3, r0
 800143a:	2b00      	cmp	r3, #0
 800143c:	d005      	beq.n	800144a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 800143e:	687b      	ldr	r3, [r7, #4]
 8001440:	2202      	movs	r2, #2
 8001442:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001446:	2301      	movs	r3, #1
 8001448:	e0d7      	b.n	80015fa <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	2100      	movs	r1, #0
 8001450:	4618      	mov	r0, r3
 8001452:	f002 fa10 	bl	8003876 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001456:	2300      	movs	r3, #0
 8001458:	73fb      	strb	r3, [r7, #15]
 800145a:	e04a      	b.n	80014f2 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800145c:	7bfa      	ldrb	r2, [r7, #15]
 800145e:	6879      	ldr	r1, [r7, #4]
 8001460:	4613      	mov	r3, r2
 8001462:	00db      	lsls	r3, r3, #3
 8001464:	1a9b      	subs	r3, r3, r2
 8001466:	009b      	lsls	r3, r3, #2
 8001468:	440b      	add	r3, r1
 800146a:	333d      	adds	r3, #61	; 0x3d
 800146c:	2201      	movs	r2, #1
 800146e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001470:	7bfa      	ldrb	r2, [r7, #15]
 8001472:	6879      	ldr	r1, [r7, #4]
 8001474:	4613      	mov	r3, r2
 8001476:	00db      	lsls	r3, r3, #3
 8001478:	1a9b      	subs	r3, r3, r2
 800147a:	009b      	lsls	r3, r3, #2
 800147c:	440b      	add	r3, r1
 800147e:	333c      	adds	r3, #60	; 0x3c
 8001480:	7bfa      	ldrb	r2, [r7, #15]
 8001482:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001484:	7bfa      	ldrb	r2, [r7, #15]
 8001486:	7bfb      	ldrb	r3, [r7, #15]
 8001488:	b298      	uxth	r0, r3
 800148a:	6879      	ldr	r1, [r7, #4]
 800148c:	4613      	mov	r3, r2
 800148e:	00db      	lsls	r3, r3, #3
 8001490:	1a9b      	subs	r3, r3, r2
 8001492:	009b      	lsls	r3, r3, #2
 8001494:	440b      	add	r3, r1
 8001496:	3342      	adds	r3, #66	; 0x42
 8001498:	4602      	mov	r2, r0
 800149a:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800149c:	7bfa      	ldrb	r2, [r7, #15]
 800149e:	6879      	ldr	r1, [r7, #4]
 80014a0:	4613      	mov	r3, r2
 80014a2:	00db      	lsls	r3, r3, #3
 80014a4:	1a9b      	subs	r3, r3, r2
 80014a6:	009b      	lsls	r3, r3, #2
 80014a8:	440b      	add	r3, r1
 80014aa:	333f      	adds	r3, #63	; 0x3f
 80014ac:	2200      	movs	r2, #0
 80014ae:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 80014b0:	7bfa      	ldrb	r2, [r7, #15]
 80014b2:	6879      	ldr	r1, [r7, #4]
 80014b4:	4613      	mov	r3, r2
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	1a9b      	subs	r3, r3, r2
 80014ba:	009b      	lsls	r3, r3, #2
 80014bc:	440b      	add	r3, r1
 80014be:	3344      	adds	r3, #68	; 0x44
 80014c0:	2200      	movs	r2, #0
 80014c2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 80014c4:	7bfa      	ldrb	r2, [r7, #15]
 80014c6:	6879      	ldr	r1, [r7, #4]
 80014c8:	4613      	mov	r3, r2
 80014ca:	00db      	lsls	r3, r3, #3
 80014cc:	1a9b      	subs	r3, r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	440b      	add	r3, r1
 80014d2:	3348      	adds	r3, #72	; 0x48
 80014d4:	2200      	movs	r2, #0
 80014d6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 80014d8:	7bfa      	ldrb	r2, [r7, #15]
 80014da:	6879      	ldr	r1, [r7, #4]
 80014dc:	4613      	mov	r3, r2
 80014de:	00db      	lsls	r3, r3, #3
 80014e0:	1a9b      	subs	r3, r3, r2
 80014e2:	009b      	lsls	r3, r3, #2
 80014e4:	440b      	add	r3, r1
 80014e6:	3350      	adds	r3, #80	; 0x50
 80014e8:	2200      	movs	r2, #0
 80014ea:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014ec:	7bfb      	ldrb	r3, [r7, #15]
 80014ee:	3301      	adds	r3, #1
 80014f0:	73fb      	strb	r3, [r7, #15]
 80014f2:	7bfa      	ldrb	r2, [r7, #15]
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	685b      	ldr	r3, [r3, #4]
 80014f8:	429a      	cmp	r2, r3
 80014fa:	d3af      	bcc.n	800145c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80014fc:	2300      	movs	r3, #0
 80014fe:	73fb      	strb	r3, [r7, #15]
 8001500:	e044      	b.n	800158c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8001502:	7bfa      	ldrb	r2, [r7, #15]
 8001504:	6879      	ldr	r1, [r7, #4]
 8001506:	4613      	mov	r3, r2
 8001508:	00db      	lsls	r3, r3, #3
 800150a:	1a9b      	subs	r3, r3, r2
 800150c:	009b      	lsls	r3, r3, #2
 800150e:	440b      	add	r3, r1
 8001510:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8001514:	2200      	movs	r2, #0
 8001516:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8001518:	7bfa      	ldrb	r2, [r7, #15]
 800151a:	6879      	ldr	r1, [r7, #4]
 800151c:	4613      	mov	r3, r2
 800151e:	00db      	lsls	r3, r3, #3
 8001520:	1a9b      	subs	r3, r3, r2
 8001522:	009b      	lsls	r3, r3, #2
 8001524:	440b      	add	r3, r1
 8001526:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800152a:	7bfa      	ldrb	r2, [r7, #15]
 800152c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800152e:	7bfa      	ldrb	r2, [r7, #15]
 8001530:	6879      	ldr	r1, [r7, #4]
 8001532:	4613      	mov	r3, r2
 8001534:	00db      	lsls	r3, r3, #3
 8001536:	1a9b      	subs	r3, r3, r2
 8001538:	009b      	lsls	r3, r3, #2
 800153a:	440b      	add	r3, r1
 800153c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8001540:	2200      	movs	r2, #0
 8001542:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8001544:	7bfa      	ldrb	r2, [r7, #15]
 8001546:	6879      	ldr	r1, [r7, #4]
 8001548:	4613      	mov	r3, r2
 800154a:	00db      	lsls	r3, r3, #3
 800154c:	1a9b      	subs	r3, r3, r2
 800154e:	009b      	lsls	r3, r3, #2
 8001550:	440b      	add	r3, r1
 8001552:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8001556:	2200      	movs	r2, #0
 8001558:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800155a:	7bfa      	ldrb	r2, [r7, #15]
 800155c:	6879      	ldr	r1, [r7, #4]
 800155e:	4613      	mov	r3, r2
 8001560:	00db      	lsls	r3, r3, #3
 8001562:	1a9b      	subs	r3, r3, r2
 8001564:	009b      	lsls	r3, r3, #2
 8001566:	440b      	add	r3, r1
 8001568:	f503 7302 	add.w	r3, r3, #520	; 0x208
 800156c:	2200      	movs	r2, #0
 800156e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8001570:	7bfa      	ldrb	r2, [r7, #15]
 8001572:	6879      	ldr	r1, [r7, #4]
 8001574:	4613      	mov	r3, r2
 8001576:	00db      	lsls	r3, r3, #3
 8001578:	1a9b      	subs	r3, r3, r2
 800157a:	009b      	lsls	r3, r3, #2
 800157c:	440b      	add	r3, r1
 800157e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8001582:	2200      	movs	r2, #0
 8001584:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001586:	7bfb      	ldrb	r3, [r7, #15]
 8001588:	3301      	adds	r3, #1
 800158a:	73fb      	strb	r3, [r7, #15]
 800158c:	7bfa      	ldrb	r2, [r7, #15]
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	685b      	ldr	r3, [r3, #4]
 8001592:	429a      	cmp	r2, r3
 8001594:	d3b5      	bcc.n	8001502 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	681b      	ldr	r3, [r3, #0]
 800159a:	603b      	str	r3, [r7, #0]
 800159c:	687e      	ldr	r6, [r7, #4]
 800159e:	466d      	mov	r5, sp
 80015a0:	f106 0410 	add.w	r4, r6, #16
 80015a4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015a6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80015aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80015ac:	e894 0003 	ldmia.w	r4, {r0, r1}
 80015b0:	e885 0003 	stmia.w	r5, {r0, r1}
 80015b4:	1d33      	adds	r3, r6, #4
 80015b6:	cb0e      	ldmia	r3, {r1, r2, r3}
 80015b8:	6838      	ldr	r0, [r7, #0]
 80015ba:	f002 f987 	bl	80038cc <USB_DevInit>
 80015be:	4603      	mov	r3, r0
 80015c0:	2b00      	cmp	r3, #0
 80015c2:	d005      	beq.n	80015d0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	2202      	movs	r2, #2
 80015c8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 80015cc:	2301      	movs	r3, #1
 80015ce:	e014      	b.n	80015fa <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 80015d0:	687b      	ldr	r3, [r7, #4]
 80015d2:	2200      	movs	r2, #0
 80015d4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	2201      	movs	r2, #1
 80015dc:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80015e4:	2b01      	cmp	r3, #1
 80015e6:	d102      	bne.n	80015ee <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 80015e8:	6878      	ldr	r0, [r7, #4]
 80015ea:	f000 f80b 	bl	8001604 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 80015ee:	687b      	ldr	r3, [r7, #4]
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	4618      	mov	r0, r3
 80015f4:	f002 fb39 	bl	8003c6a <USB_DevDisconnect>

  return HAL_OK;
 80015f8:	2300      	movs	r3, #0
}
 80015fa:	4618      	mov	r0, r3
 80015fc:	3714      	adds	r7, #20
 80015fe:	46bd      	mov	sp, r7
 8001600:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08001604 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8001604:	b480      	push	{r7}
 8001606:	b085      	sub	sp, #20
 8001608:	af00      	add	r7, sp, #0
 800160a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800160c:	687b      	ldr	r3, [r7, #4]
 800160e:	681b      	ldr	r3, [r3, #0]
 8001610:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	2201      	movs	r2, #1
 8001616:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800161a:	687b      	ldr	r3, [r7, #4]
 800161c:	2200      	movs	r2, #0
 800161e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	699b      	ldr	r3, [r3, #24]
 8001626:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800162a:	68fb      	ldr	r3, [r7, #12]
 800162c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800162e:	68fb      	ldr	r3, [r7, #12]
 8001630:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001632:	4b05      	ldr	r3, [pc, #20]	; (8001648 <HAL_PCDEx_ActivateLPM+0x44>)
 8001634:	4313      	orrs	r3, r2
 8001636:	68fa      	ldr	r2, [r7, #12]
 8001638:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800163a:	2300      	movs	r3, #0
}
 800163c:	4618      	mov	r0, r3
 800163e:	3714      	adds	r7, #20
 8001640:	46bd      	mov	sp, r7
 8001642:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001646:	4770      	bx	lr
 8001648:	10000003 	.word	0x10000003

0800164c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800164c:	b480      	push	{r7}
 800164e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8001650:	4b05      	ldr	r3, [pc, #20]	; (8001668 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001652:	681b      	ldr	r3, [r3, #0]
 8001654:	4a04      	ldr	r2, [pc, #16]	; (8001668 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8001656:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800165a:	6013      	str	r3, [r2, #0]
}
 800165c:	bf00      	nop
 800165e:	46bd      	mov	sp, r7
 8001660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001664:	4770      	bx	lr
 8001666:	bf00      	nop
 8001668:	40007000 	.word	0x40007000

0800166c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8001674:	2300      	movs	r3, #0
 8001676:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001678:	687b      	ldr	r3, [r7, #4]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d101      	bne.n	8001682 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800167e:	2301      	movs	r3, #1
 8001680:	e291      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	2b00      	cmp	r3, #0
 800168c:	f000 8087 	beq.w	800179e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001690:	4b96      	ldr	r3, [pc, #600]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001692:	689b      	ldr	r3, [r3, #8]
 8001694:	f003 030c 	and.w	r3, r3, #12
 8001698:	2b04      	cmp	r3, #4
 800169a:	d00c      	beq.n	80016b6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800169c:	4b93      	ldr	r3, [pc, #588]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 800169e:	689b      	ldr	r3, [r3, #8]
 80016a0:	f003 030c 	and.w	r3, r3, #12
 80016a4:	2b08      	cmp	r3, #8
 80016a6:	d112      	bne.n	80016ce <HAL_RCC_OscConfig+0x62>
 80016a8:	4b90      	ldr	r3, [pc, #576]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80016aa:	685b      	ldr	r3, [r3, #4]
 80016ac:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80016b0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80016b4:	d10b      	bne.n	80016ce <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80016b6:	4b8d      	ldr	r3, [pc, #564]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80016be:	2b00      	cmp	r3, #0
 80016c0:	d06c      	beq.n	800179c <HAL_RCC_OscConfig+0x130>
 80016c2:	687b      	ldr	r3, [r7, #4]
 80016c4:	685b      	ldr	r3, [r3, #4]
 80016c6:	2b00      	cmp	r3, #0
 80016c8:	d168      	bne.n	800179c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80016ca:	2301      	movs	r3, #1
 80016cc:	e26b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80016ce:	687b      	ldr	r3, [r7, #4]
 80016d0:	685b      	ldr	r3, [r3, #4]
 80016d2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80016d6:	d106      	bne.n	80016e6 <HAL_RCC_OscConfig+0x7a>
 80016d8:	4b84      	ldr	r3, [pc, #528]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80016da:	681b      	ldr	r3, [r3, #0]
 80016dc:	4a83      	ldr	r2, [pc, #524]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80016de:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80016e2:	6013      	str	r3, [r2, #0]
 80016e4:	e02e      	b.n	8001744 <HAL_RCC_OscConfig+0xd8>
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	685b      	ldr	r3, [r3, #4]
 80016ea:	2b00      	cmp	r3, #0
 80016ec:	d10c      	bne.n	8001708 <HAL_RCC_OscConfig+0x9c>
 80016ee:	4b7f      	ldr	r3, [pc, #508]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	4a7e      	ldr	r2, [pc, #504]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80016f4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80016f8:	6013      	str	r3, [r2, #0]
 80016fa:	4b7c      	ldr	r3, [pc, #496]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80016fc:	681b      	ldr	r3, [r3, #0]
 80016fe:	4a7b      	ldr	r2, [pc, #492]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001700:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001704:	6013      	str	r3, [r2, #0]
 8001706:	e01d      	b.n	8001744 <HAL_RCC_OscConfig+0xd8>
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	685b      	ldr	r3, [r3, #4]
 800170c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001710:	d10c      	bne.n	800172c <HAL_RCC_OscConfig+0xc0>
 8001712:	4b76      	ldr	r3, [pc, #472]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	4a75      	ldr	r2, [pc, #468]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001718:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800171c:	6013      	str	r3, [r2, #0]
 800171e:	4b73      	ldr	r3, [pc, #460]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	4a72      	ldr	r2, [pc, #456]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001728:	6013      	str	r3, [r2, #0]
 800172a:	e00b      	b.n	8001744 <HAL_RCC_OscConfig+0xd8>
 800172c:	4b6f      	ldr	r3, [pc, #444]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	4a6e      	ldr	r2, [pc, #440]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001732:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001736:	6013      	str	r3, [r2, #0]
 8001738:	4b6c      	ldr	r3, [pc, #432]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a6b      	ldr	r2, [pc, #428]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 800173e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001742:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	685b      	ldr	r3, [r3, #4]
 8001748:	2b00      	cmp	r3, #0
 800174a:	d013      	beq.n	8001774 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800174c:	f7ff fa82 	bl	8000c54 <HAL_GetTick>
 8001750:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001752:	e008      	b.n	8001766 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001754:	f7ff fa7e 	bl	8000c54 <HAL_GetTick>
 8001758:	4602      	mov	r2, r0
 800175a:	693b      	ldr	r3, [r7, #16]
 800175c:	1ad3      	subs	r3, r2, r3
 800175e:	2b64      	cmp	r3, #100	; 0x64
 8001760:	d901      	bls.n	8001766 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8001762:	2303      	movs	r3, #3
 8001764:	e21f      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001766:	4b61      	ldr	r3, [pc, #388]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001768:	681b      	ldr	r3, [r3, #0]
 800176a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800176e:	2b00      	cmp	r3, #0
 8001770:	d0f0      	beq.n	8001754 <HAL_RCC_OscConfig+0xe8>
 8001772:	e014      	b.n	800179e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001774:	f7ff fa6e 	bl	8000c54 <HAL_GetTick>
 8001778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800177a:	e008      	b.n	800178e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800177c:	f7ff fa6a 	bl	8000c54 <HAL_GetTick>
 8001780:	4602      	mov	r2, r0
 8001782:	693b      	ldr	r3, [r7, #16]
 8001784:	1ad3      	subs	r3, r2, r3
 8001786:	2b64      	cmp	r3, #100	; 0x64
 8001788:	d901      	bls.n	800178e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800178a:	2303      	movs	r3, #3
 800178c:	e20b      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800178e:	4b57      	ldr	r3, [pc, #348]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001790:	681b      	ldr	r3, [r3, #0]
 8001792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001796:	2b00      	cmp	r3, #0
 8001798:	d1f0      	bne.n	800177c <HAL_RCC_OscConfig+0x110>
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800179c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	681b      	ldr	r3, [r3, #0]
 80017a2:	f003 0302 	and.w	r3, r3, #2
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d069      	beq.n	800187e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80017aa:	4b50      	ldr	r3, [pc, #320]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80017ac:	689b      	ldr	r3, [r3, #8]
 80017ae:	f003 030c 	and.w	r3, r3, #12
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d00b      	beq.n	80017ce <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80017b6:	4b4d      	ldr	r3, [pc, #308]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80017b8:	689b      	ldr	r3, [r3, #8]
 80017ba:	f003 030c 	and.w	r3, r3, #12
 80017be:	2b08      	cmp	r3, #8
 80017c0:	d11c      	bne.n	80017fc <HAL_RCC_OscConfig+0x190>
 80017c2:	4b4a      	ldr	r3, [pc, #296]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80017c4:	685b      	ldr	r3, [r3, #4]
 80017c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80017ca:	2b00      	cmp	r3, #0
 80017cc:	d116      	bne.n	80017fc <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017ce:	4b47      	ldr	r3, [pc, #284]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80017d0:	681b      	ldr	r3, [r3, #0]
 80017d2:	f003 0302 	and.w	r3, r3, #2
 80017d6:	2b00      	cmp	r3, #0
 80017d8:	d005      	beq.n	80017e6 <HAL_RCC_OscConfig+0x17a>
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	68db      	ldr	r3, [r3, #12]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d001      	beq.n	80017e6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 80017e2:	2301      	movs	r3, #1
 80017e4:	e1df      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80017e6:	4b41      	ldr	r3, [pc, #260]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	691b      	ldr	r3, [r3, #16]
 80017f2:	00db      	lsls	r3, r3, #3
 80017f4:	493d      	ldr	r1, [pc, #244]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80017f6:	4313      	orrs	r3, r2
 80017f8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80017fa:	e040      	b.n	800187e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	68db      	ldr	r3, [r3, #12]
 8001800:	2b00      	cmp	r3, #0
 8001802:	d023      	beq.n	800184c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001804:	4b39      	ldr	r3, [pc, #228]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	4a38      	ldr	r2, [pc, #224]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 800180a:	f043 0301 	orr.w	r3, r3, #1
 800180e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001810:	f7ff fa20 	bl	8000c54 <HAL_GetTick>
 8001814:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001816:	e008      	b.n	800182a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001818:	f7ff fa1c 	bl	8000c54 <HAL_GetTick>
 800181c:	4602      	mov	r2, r0
 800181e:	693b      	ldr	r3, [r7, #16]
 8001820:	1ad3      	subs	r3, r2, r3
 8001822:	2b02      	cmp	r3, #2
 8001824:	d901      	bls.n	800182a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8001826:	2303      	movs	r3, #3
 8001828:	e1bd      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800182a:	4b30      	ldr	r3, [pc, #192]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 800182c:	681b      	ldr	r3, [r3, #0]
 800182e:	f003 0302 	and.w	r3, r3, #2
 8001832:	2b00      	cmp	r3, #0
 8001834:	d0f0      	beq.n	8001818 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001836:	4b2d      	ldr	r3, [pc, #180]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800183e:	687b      	ldr	r3, [r7, #4]
 8001840:	691b      	ldr	r3, [r3, #16]
 8001842:	00db      	lsls	r3, r3, #3
 8001844:	4929      	ldr	r1, [pc, #164]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001846:	4313      	orrs	r3, r2
 8001848:	600b      	str	r3, [r1, #0]
 800184a:	e018      	b.n	800187e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 800184e:	681b      	ldr	r3, [r3, #0]
 8001850:	4a26      	ldr	r2, [pc, #152]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001852:	f023 0301 	bic.w	r3, r3, #1
 8001856:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001858:	f7ff f9fc 	bl	8000c54 <HAL_GetTick>
 800185c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800185e:	e008      	b.n	8001872 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001860:	f7ff f9f8 	bl	8000c54 <HAL_GetTick>
 8001864:	4602      	mov	r2, r0
 8001866:	693b      	ldr	r3, [r7, #16]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	2b02      	cmp	r3, #2
 800186c:	d901      	bls.n	8001872 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800186e:	2303      	movs	r3, #3
 8001870:	e199      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001872:	4b1e      	ldr	r3, [pc, #120]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0302 	and.w	r3, r3, #2
 800187a:	2b00      	cmp	r3, #0
 800187c:	d1f0      	bne.n	8001860 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	681b      	ldr	r3, [r3, #0]
 8001882:	f003 0308 	and.w	r3, r3, #8
 8001886:	2b00      	cmp	r3, #0
 8001888:	d038      	beq.n	80018fc <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	695b      	ldr	r3, [r3, #20]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d019      	beq.n	80018c6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001892:	4b16      	ldr	r3, [pc, #88]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001894:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8001896:	4a15      	ldr	r2, [pc, #84]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 8001898:	f043 0301 	orr.w	r3, r3, #1
 800189c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800189e:	f7ff f9d9 	bl	8000c54 <HAL_GetTick>
 80018a2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018a4:	e008      	b.n	80018b8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018a6:	f7ff f9d5 	bl	8000c54 <HAL_GetTick>
 80018aa:	4602      	mov	r2, r0
 80018ac:	693b      	ldr	r3, [r7, #16]
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	2b02      	cmp	r3, #2
 80018b2:	d901      	bls.n	80018b8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80018b4:	2303      	movs	r3, #3
 80018b6:	e176      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80018b8:	4b0c      	ldr	r3, [pc, #48]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80018ba:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018bc:	f003 0302 	and.w	r3, r3, #2
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d0f0      	beq.n	80018a6 <HAL_RCC_OscConfig+0x23a>
 80018c4:	e01a      	b.n	80018fc <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80018c6:	4b09      	ldr	r3, [pc, #36]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80018c8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018ca:	4a08      	ldr	r2, [pc, #32]	; (80018ec <HAL_RCC_OscConfig+0x280>)
 80018cc:	f023 0301 	bic.w	r3, r3, #1
 80018d0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80018d2:	f7ff f9bf 	bl	8000c54 <HAL_GetTick>
 80018d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018d8:	e00a      	b.n	80018f0 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80018da:	f7ff f9bb 	bl	8000c54 <HAL_GetTick>
 80018de:	4602      	mov	r2, r0
 80018e0:	693b      	ldr	r3, [r7, #16]
 80018e2:	1ad3      	subs	r3, r2, r3
 80018e4:	2b02      	cmp	r3, #2
 80018e6:	d903      	bls.n	80018f0 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 80018e8:	2303      	movs	r3, #3
 80018ea:	e15c      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
 80018ec:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80018f0:	4b91      	ldr	r3, [pc, #580]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80018f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80018f4:	f003 0302 	and.w	r3, r3, #2
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d1ee      	bne.n	80018da <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	681b      	ldr	r3, [r3, #0]
 8001900:	f003 0304 	and.w	r3, r3, #4
 8001904:	2b00      	cmp	r3, #0
 8001906:	f000 80a4 	beq.w	8001a52 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800190a:	4b8b      	ldr	r3, [pc, #556]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 800190c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800190e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001912:	2b00      	cmp	r3, #0
 8001914:	d10d      	bne.n	8001932 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8001916:	4b88      	ldr	r3, [pc, #544]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001918:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800191a:	4a87      	ldr	r2, [pc, #540]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 800191c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001920:	6413      	str	r3, [r2, #64]	; 0x40
 8001922:	4b85      	ldr	r3, [pc, #532]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001926:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800192a:	60bb      	str	r3, [r7, #8]
 800192c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800192e:	2301      	movs	r3, #1
 8001930:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001932:	4b82      	ldr	r3, [pc, #520]	; (8001b3c <HAL_RCC_OscConfig+0x4d0>)
 8001934:	681b      	ldr	r3, [r3, #0]
 8001936:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800193a:	2b00      	cmp	r3, #0
 800193c:	d118      	bne.n	8001970 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800193e:	4b7f      	ldr	r3, [pc, #508]	; (8001b3c <HAL_RCC_OscConfig+0x4d0>)
 8001940:	681b      	ldr	r3, [r3, #0]
 8001942:	4a7e      	ldr	r2, [pc, #504]	; (8001b3c <HAL_RCC_OscConfig+0x4d0>)
 8001944:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001948:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800194a:	f7ff f983 	bl	8000c54 <HAL_GetTick>
 800194e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001950:	e008      	b.n	8001964 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001952:	f7ff f97f 	bl	8000c54 <HAL_GetTick>
 8001956:	4602      	mov	r2, r0
 8001958:	693b      	ldr	r3, [r7, #16]
 800195a:	1ad3      	subs	r3, r2, r3
 800195c:	2b64      	cmp	r3, #100	; 0x64
 800195e:	d901      	bls.n	8001964 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8001960:	2303      	movs	r3, #3
 8001962:	e120      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8001964:	4b75      	ldr	r3, [pc, #468]	; (8001b3c <HAL_RCC_OscConfig+0x4d0>)
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800196c:	2b00      	cmp	r3, #0
 800196e:	d0f0      	beq.n	8001952 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001970:	687b      	ldr	r3, [r7, #4]
 8001972:	689b      	ldr	r3, [r3, #8]
 8001974:	2b01      	cmp	r3, #1
 8001976:	d106      	bne.n	8001986 <HAL_RCC_OscConfig+0x31a>
 8001978:	4b6f      	ldr	r3, [pc, #444]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 800197a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800197c:	4a6e      	ldr	r2, [pc, #440]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 800197e:	f043 0301 	orr.w	r3, r3, #1
 8001982:	6713      	str	r3, [r2, #112]	; 0x70
 8001984:	e02d      	b.n	80019e2 <HAL_RCC_OscConfig+0x376>
 8001986:	687b      	ldr	r3, [r7, #4]
 8001988:	689b      	ldr	r3, [r3, #8]
 800198a:	2b00      	cmp	r3, #0
 800198c:	d10c      	bne.n	80019a8 <HAL_RCC_OscConfig+0x33c>
 800198e:	4b6a      	ldr	r3, [pc, #424]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001990:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001992:	4a69      	ldr	r2, [pc, #420]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001994:	f023 0301 	bic.w	r3, r3, #1
 8001998:	6713      	str	r3, [r2, #112]	; 0x70
 800199a:	4b67      	ldr	r3, [pc, #412]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 800199c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800199e:	4a66      	ldr	r2, [pc, #408]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019a0:	f023 0304 	bic.w	r3, r3, #4
 80019a4:	6713      	str	r3, [r2, #112]	; 0x70
 80019a6:	e01c      	b.n	80019e2 <HAL_RCC_OscConfig+0x376>
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	689b      	ldr	r3, [r3, #8]
 80019ac:	2b05      	cmp	r3, #5
 80019ae:	d10c      	bne.n	80019ca <HAL_RCC_OscConfig+0x35e>
 80019b0:	4b61      	ldr	r3, [pc, #388]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019b4:	4a60      	ldr	r2, [pc, #384]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019b6:	f043 0304 	orr.w	r3, r3, #4
 80019ba:	6713      	str	r3, [r2, #112]	; 0x70
 80019bc:	4b5e      	ldr	r3, [pc, #376]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019c0:	4a5d      	ldr	r2, [pc, #372]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019c2:	f043 0301 	orr.w	r3, r3, #1
 80019c6:	6713      	str	r3, [r2, #112]	; 0x70
 80019c8:	e00b      	b.n	80019e2 <HAL_RCC_OscConfig+0x376>
 80019ca:	4b5b      	ldr	r3, [pc, #364]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019cc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019ce:	4a5a      	ldr	r2, [pc, #360]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019d0:	f023 0301 	bic.w	r3, r3, #1
 80019d4:	6713      	str	r3, [r2, #112]	; 0x70
 80019d6:	4b58      	ldr	r3, [pc, #352]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019d8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80019da:	4a57      	ldr	r2, [pc, #348]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 80019dc:	f023 0304 	bic.w	r3, r3, #4
 80019e0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	689b      	ldr	r3, [r3, #8]
 80019e6:	2b00      	cmp	r3, #0
 80019e8:	d015      	beq.n	8001a16 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80019ea:	f7ff f933 	bl	8000c54 <HAL_GetTick>
 80019ee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80019f0:	e00a      	b.n	8001a08 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80019f2:	f7ff f92f 	bl	8000c54 <HAL_GetTick>
 80019f6:	4602      	mov	r2, r0
 80019f8:	693b      	ldr	r3, [r7, #16]
 80019fa:	1ad3      	subs	r3, r2, r3
 80019fc:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a00:	4293      	cmp	r3, r2
 8001a02:	d901      	bls.n	8001a08 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8001a04:	2303      	movs	r3, #3
 8001a06:	e0ce      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001a08:	4b4b      	ldr	r3, [pc, #300]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a0c:	f003 0302 	and.w	r3, r3, #2
 8001a10:	2b00      	cmp	r3, #0
 8001a12:	d0ee      	beq.n	80019f2 <HAL_RCC_OscConfig+0x386>
 8001a14:	e014      	b.n	8001a40 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001a16:	f7ff f91d 	bl	8000c54 <HAL_GetTick>
 8001a1a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a1c:	e00a      	b.n	8001a34 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8001a1e:	f7ff f919 	bl	8000c54 <HAL_GetTick>
 8001a22:	4602      	mov	r2, r0
 8001a24:	693b      	ldr	r3, [r7, #16]
 8001a26:	1ad3      	subs	r3, r2, r3
 8001a28:	f241 3288 	movw	r2, #5000	; 0x1388
 8001a2c:	4293      	cmp	r3, r2
 8001a2e:	d901      	bls.n	8001a34 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8001a30:	2303      	movs	r3, #3
 8001a32:	e0b8      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001a34:	4b40      	ldr	r3, [pc, #256]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a36:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001a38:	f003 0302 	and.w	r3, r3, #2
 8001a3c:	2b00      	cmp	r3, #0
 8001a3e:	d1ee      	bne.n	8001a1e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8001a40:	7dfb      	ldrb	r3, [r7, #23]
 8001a42:	2b01      	cmp	r3, #1
 8001a44:	d105      	bne.n	8001a52 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001a46:	4b3c      	ldr	r3, [pc, #240]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a4a:	4a3b      	ldr	r2, [pc, #236]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a4c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8001a50:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	699b      	ldr	r3, [r3, #24]
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	f000 80a4 	beq.w	8001ba4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001a5c:	4b36      	ldr	r3, [pc, #216]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a5e:	689b      	ldr	r3, [r3, #8]
 8001a60:	f003 030c 	and.w	r3, r3, #12
 8001a64:	2b08      	cmp	r3, #8
 8001a66:	d06b      	beq.n	8001b40 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001a68:	687b      	ldr	r3, [r7, #4]
 8001a6a:	699b      	ldr	r3, [r3, #24]
 8001a6c:	2b02      	cmp	r3, #2
 8001a6e:	d149      	bne.n	8001b04 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001a70:	4b31      	ldr	r3, [pc, #196]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a72:	681b      	ldr	r3, [r3, #0]
 8001a74:	4a30      	ldr	r2, [pc, #192]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a76:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001a7a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001a7c:	f7ff f8ea 	bl	8000c54 <HAL_GetTick>
 8001a80:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a82:	e008      	b.n	8001a96 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001a84:	f7ff f8e6 	bl	8000c54 <HAL_GetTick>
 8001a88:	4602      	mov	r2, r0
 8001a8a:	693b      	ldr	r3, [r7, #16]
 8001a8c:	1ad3      	subs	r3, r2, r3
 8001a8e:	2b02      	cmp	r3, #2
 8001a90:	d901      	bls.n	8001a96 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8001a92:	2303      	movs	r3, #3
 8001a94:	e087      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001a96:	4b28      	ldr	r3, [pc, #160]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d1f0      	bne.n	8001a84 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	69da      	ldr	r2, [r3, #28]
 8001aa6:	687b      	ldr	r3, [r7, #4]
 8001aa8:	6a1b      	ldr	r3, [r3, #32]
 8001aaa:	431a      	orrs	r2, r3
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ab0:	019b      	lsls	r3, r3, #6
 8001ab2:	431a      	orrs	r2, r3
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ab8:	085b      	lsrs	r3, r3, #1
 8001aba:	3b01      	subs	r3, #1
 8001abc:	041b      	lsls	r3, r3, #16
 8001abe:	431a      	orrs	r2, r3
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001ac4:	061b      	lsls	r3, r3, #24
 8001ac6:	4313      	orrs	r3, r2
 8001ac8:	4a1b      	ldr	r2, [pc, #108]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001aca:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8001ace:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001ad0:	4b19      	ldr	r3, [pc, #100]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001ad2:	681b      	ldr	r3, [r3, #0]
 8001ad4:	4a18      	ldr	r2, [pc, #96]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001ad6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001ada:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001adc:	f7ff f8ba 	bl	8000c54 <HAL_GetTick>
 8001ae0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001ae2:	e008      	b.n	8001af6 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001ae4:	f7ff f8b6 	bl	8000c54 <HAL_GetTick>
 8001ae8:	4602      	mov	r2, r0
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	1ad3      	subs	r3, r2, r3
 8001aee:	2b02      	cmp	r3, #2
 8001af0:	d901      	bls.n	8001af6 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8001af2:	2303      	movs	r3, #3
 8001af4:	e057      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001af6:	4b10      	ldr	r3, [pc, #64]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	d0f0      	beq.n	8001ae4 <HAL_RCC_OscConfig+0x478>
 8001b02:	e04f      	b.n	8001ba4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001b04:	4b0c      	ldr	r3, [pc, #48]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	4a0b      	ldr	r2, [pc, #44]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001b0a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8001b0e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001b10:	f7ff f8a0 	bl	8000c54 <HAL_GetTick>
 8001b14:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b16:	e008      	b.n	8001b2a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001b18:	f7ff f89c 	bl	8000c54 <HAL_GetTick>
 8001b1c:	4602      	mov	r2, r0
 8001b1e:	693b      	ldr	r3, [r7, #16]
 8001b20:	1ad3      	subs	r3, r2, r3
 8001b22:	2b02      	cmp	r3, #2
 8001b24:	d901      	bls.n	8001b2a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8001b26:	2303      	movs	r3, #3
 8001b28:	e03d      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001b2a:	4b03      	ldr	r3, [pc, #12]	; (8001b38 <HAL_RCC_OscConfig+0x4cc>)
 8001b2c:	681b      	ldr	r3, [r3, #0]
 8001b2e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d1f0      	bne.n	8001b18 <HAL_RCC_OscConfig+0x4ac>
 8001b36:	e035      	b.n	8001ba4 <HAL_RCC_OscConfig+0x538>
 8001b38:	40023800 	.word	0x40023800
 8001b3c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8001b40:	4b1b      	ldr	r3, [pc, #108]	; (8001bb0 <HAL_RCC_OscConfig+0x544>)
 8001b42:	685b      	ldr	r3, [r3, #4]
 8001b44:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	699b      	ldr	r3, [r3, #24]
 8001b4a:	2b01      	cmp	r3, #1
 8001b4c:	d028      	beq.n	8001ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b4e:	68fb      	ldr	r3, [r7, #12]
 8001b50:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001b58:	429a      	cmp	r2, r3
 8001b5a:	d121      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001b66:	429a      	cmp	r2, r3
 8001b68:	d11a      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b6a:	68fa      	ldr	r2, [r7, #12]
 8001b6c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001b70:	4013      	ands	r3, r2
 8001b72:	687a      	ldr	r2, [r7, #4]
 8001b74:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8001b76:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8001b78:	4293      	cmp	r3, r2
 8001b7a:	d111      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b7c:	68fb      	ldr	r3, [r7, #12]
 8001b7e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001b86:	085b      	lsrs	r3, r3, #1
 8001b88:	3b01      	subs	r3, #1
 8001b8a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8001b8c:	429a      	cmp	r2, r3
 8001b8e:	d107      	bne.n	8001ba0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001b90:	68fb      	ldr	r3, [r7, #12]
 8001b92:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8001b96:	687b      	ldr	r3, [r7, #4]
 8001b98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001b9a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8001b9c:	429a      	cmp	r2, r3
 8001b9e:	d001      	beq.n	8001ba4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8001ba0:	2301      	movs	r3, #1
 8001ba2:	e000      	b.n	8001ba6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8001ba4:	2300      	movs	r3, #0
}
 8001ba6:	4618      	mov	r0, r3
 8001ba8:	3718      	adds	r7, #24
 8001baa:	46bd      	mov	sp, r7
 8001bac:	bd80      	pop	{r7, pc}
 8001bae:	bf00      	nop
 8001bb0:	40023800 	.word	0x40023800

08001bb4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001bb4:	b580      	push	{r7, lr}
 8001bb6:	b084      	sub	sp, #16
 8001bb8:	af00      	add	r7, sp, #0
 8001bba:	6078      	str	r0, [r7, #4]
 8001bbc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001bc2:	687b      	ldr	r3, [r7, #4]
 8001bc4:	2b00      	cmp	r3, #0
 8001bc6:	d101      	bne.n	8001bcc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8001bc8:	2301      	movs	r3, #1
 8001bca:	e0d0      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001bcc:	4b6a      	ldr	r3, [pc, #424]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f003 030f 	and.w	r3, r3, #15
 8001bd4:	683a      	ldr	r2, [r7, #0]
 8001bd6:	429a      	cmp	r2, r3
 8001bd8:	d910      	bls.n	8001bfc <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001bda:	4b67      	ldr	r3, [pc, #412]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001bdc:	681b      	ldr	r3, [r3, #0]
 8001bde:	f023 020f 	bic.w	r2, r3, #15
 8001be2:	4965      	ldr	r1, [pc, #404]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001be4:	683b      	ldr	r3, [r7, #0]
 8001be6:	4313      	orrs	r3, r2
 8001be8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001bea:	4b63      	ldr	r3, [pc, #396]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001bec:	681b      	ldr	r3, [r3, #0]
 8001bee:	f003 030f 	and.w	r3, r3, #15
 8001bf2:	683a      	ldr	r2, [r7, #0]
 8001bf4:	429a      	cmp	r2, r3
 8001bf6:	d001      	beq.n	8001bfc <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	e0b8      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001bfc:	687b      	ldr	r3, [r7, #4]
 8001bfe:	681b      	ldr	r3, [r3, #0]
 8001c00:	f003 0302 	and.w	r3, r3, #2
 8001c04:	2b00      	cmp	r3, #0
 8001c06:	d020      	beq.n	8001c4a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	681b      	ldr	r3, [r3, #0]
 8001c0c:	f003 0304 	and.w	r3, r3, #4
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d005      	beq.n	8001c20 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001c14:	4b59      	ldr	r3, [pc, #356]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c16:	689b      	ldr	r3, [r3, #8]
 8001c18:	4a58      	ldr	r2, [pc, #352]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8001c1e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	f003 0308 	and.w	r3, r3, #8
 8001c28:	2b00      	cmp	r3, #0
 8001c2a:	d005      	beq.n	8001c38 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001c2c:	4b53      	ldr	r3, [pc, #332]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c2e:	689b      	ldr	r3, [r3, #8]
 8001c30:	4a52      	ldr	r2, [pc, #328]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001c36:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001c38:	4b50      	ldr	r3, [pc, #320]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c3a:	689b      	ldr	r3, [r3, #8]
 8001c3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	689b      	ldr	r3, [r3, #8]
 8001c44:	494d      	ldr	r1, [pc, #308]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c46:	4313      	orrs	r3, r2
 8001c48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001c4a:	687b      	ldr	r3, [r7, #4]
 8001c4c:	681b      	ldr	r3, [r3, #0]
 8001c4e:	f003 0301 	and.w	r3, r3, #1
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d040      	beq.n	8001cd8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	685b      	ldr	r3, [r3, #4]
 8001c5a:	2b01      	cmp	r3, #1
 8001c5c:	d107      	bne.n	8001c6e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001c5e:	4b47      	ldr	r3, [pc, #284]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d115      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e07f      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	685b      	ldr	r3, [r3, #4]
 8001c72:	2b02      	cmp	r3, #2
 8001c74:	d107      	bne.n	8001c86 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001c76:	4b41      	ldr	r3, [pc, #260]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c7e:	2b00      	cmp	r3, #0
 8001c80:	d109      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c82:	2301      	movs	r3, #1
 8001c84:	e073      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001c86:	4b3d      	ldr	r3, [pc, #244]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c88:	681b      	ldr	r3, [r3, #0]
 8001c8a:	f003 0302 	and.w	r3, r3, #2
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d101      	bne.n	8001c96 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8001c92:	2301      	movs	r3, #1
 8001c94:	e06b      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001c96:	4b39      	ldr	r3, [pc, #228]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001c98:	689b      	ldr	r3, [r3, #8]
 8001c9a:	f023 0203 	bic.w	r2, r3, #3
 8001c9e:	687b      	ldr	r3, [r7, #4]
 8001ca0:	685b      	ldr	r3, [r3, #4]
 8001ca2:	4936      	ldr	r1, [pc, #216]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001ca4:	4313      	orrs	r3, r2
 8001ca6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8001ca8:	f7fe ffd4 	bl	8000c54 <HAL_GetTick>
 8001cac:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cae:	e00a      	b.n	8001cc6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001cb0:	f7fe ffd0 	bl	8000c54 <HAL_GetTick>
 8001cb4:	4602      	mov	r2, r0
 8001cb6:	68fb      	ldr	r3, [r7, #12]
 8001cb8:	1ad3      	subs	r3, r2, r3
 8001cba:	f241 3288 	movw	r2, #5000	; 0x1388
 8001cbe:	4293      	cmp	r3, r2
 8001cc0:	d901      	bls.n	8001cc6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	e053      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001cc6:	4b2d      	ldr	r3, [pc, #180]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001cc8:	689b      	ldr	r3, [r3, #8]
 8001cca:	f003 020c 	and.w	r2, r3, #12
 8001cce:	687b      	ldr	r3, [r7, #4]
 8001cd0:	685b      	ldr	r3, [r3, #4]
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	429a      	cmp	r2, r3
 8001cd6:	d1eb      	bne.n	8001cb0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001cd8:	4b27      	ldr	r3, [pc, #156]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f003 030f 	and.w	r3, r3, #15
 8001ce0:	683a      	ldr	r2, [r7, #0]
 8001ce2:	429a      	cmp	r2, r3
 8001ce4:	d210      	bcs.n	8001d08 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001ce6:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	f023 020f 	bic.w	r2, r3, #15
 8001cee:	4922      	ldr	r1, [pc, #136]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf0:	683b      	ldr	r3, [r7, #0]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001cf6:	4b20      	ldr	r3, [pc, #128]	; (8001d78 <HAL_RCC_ClockConfig+0x1c4>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	f003 030f 	and.w	r3, r3, #15
 8001cfe:	683a      	ldr	r2, [r7, #0]
 8001d00:	429a      	cmp	r2, r3
 8001d02:	d001      	beq.n	8001d08 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8001d04:	2301      	movs	r3, #1
 8001d06:	e032      	b.n	8001d6e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	f003 0304 	and.w	r3, r3, #4
 8001d10:	2b00      	cmp	r3, #0
 8001d12:	d008      	beq.n	8001d26 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001d14:	4b19      	ldr	r3, [pc, #100]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d16:	689b      	ldr	r3, [r3, #8]
 8001d18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	68db      	ldr	r3, [r3, #12]
 8001d20:	4916      	ldr	r1, [pc, #88]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d22:	4313      	orrs	r3, r2
 8001d24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	f003 0308 	and.w	r3, r3, #8
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d009      	beq.n	8001d46 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001d32:	4b12      	ldr	r3, [pc, #72]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d34:	689b      	ldr	r3, [r3, #8]
 8001d36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	691b      	ldr	r3, [r3, #16]
 8001d3e:	00db      	lsls	r3, r3, #3
 8001d40:	490e      	ldr	r1, [pc, #56]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d42:	4313      	orrs	r3, r2
 8001d44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001d46:	f000 f821 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8001d4a:	4602      	mov	r2, r0
 8001d4c:	4b0b      	ldr	r3, [pc, #44]	; (8001d7c <HAL_RCC_ClockConfig+0x1c8>)
 8001d4e:	689b      	ldr	r3, [r3, #8]
 8001d50:	091b      	lsrs	r3, r3, #4
 8001d52:	f003 030f 	and.w	r3, r3, #15
 8001d56:	490a      	ldr	r1, [pc, #40]	; (8001d80 <HAL_RCC_ClockConfig+0x1cc>)
 8001d58:	5ccb      	ldrb	r3, [r1, r3]
 8001d5a:	fa22 f303 	lsr.w	r3, r2, r3
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RCC_ClockConfig+0x1d0>)
 8001d60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001d62:	4b09      	ldr	r3, [pc, #36]	; (8001d88 <HAL_RCC_ClockConfig+0x1d4>)
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	4618      	mov	r0, r3
 8001d68:	f7fe ff30 	bl	8000bcc <HAL_InitTick>

  return HAL_OK;
 8001d6c:	2300      	movs	r3, #0
}
 8001d6e:	4618      	mov	r0, r3
 8001d70:	3710      	adds	r7, #16
 8001d72:	46bd      	mov	sp, r7
 8001d74:	bd80      	pop	{r7, pc}
 8001d76:	bf00      	nop
 8001d78:	40023c00 	.word	0x40023c00
 8001d7c:	40023800 	.word	0x40023800
 8001d80:	08003d84 	.word	0x08003d84
 8001d84:	20000000 	.word	0x20000000
 8001d88:	20000004 	.word	0x20000004

08001d8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001d8c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001d90:	b084      	sub	sp, #16
 8001d92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8001d94:	2300      	movs	r3, #0
 8001d96:	607b      	str	r3, [r7, #4]
 8001d98:	2300      	movs	r3, #0
 8001d9a:	60fb      	str	r3, [r7, #12]
 8001d9c:	2300      	movs	r3, #0
 8001d9e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 8001da0:	2300      	movs	r3, #0
 8001da2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001da4:	4b67      	ldr	r3, [pc, #412]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001da6:	689b      	ldr	r3, [r3, #8]
 8001da8:	f003 030c 	and.w	r3, r3, #12
 8001dac:	2b08      	cmp	r3, #8
 8001dae:	d00d      	beq.n	8001dcc <HAL_RCC_GetSysClockFreq+0x40>
 8001db0:	2b08      	cmp	r3, #8
 8001db2:	f200 80bd 	bhi.w	8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d002      	beq.n	8001dc0 <HAL_RCC_GetSysClockFreq+0x34>
 8001dba:	2b04      	cmp	r3, #4
 8001dbc:	d003      	beq.n	8001dc6 <HAL_RCC_GetSysClockFreq+0x3a>
 8001dbe:	e0b7      	b.n	8001f30 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001dc0:	4b61      	ldr	r3, [pc, #388]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001dc2:	60bb      	str	r3, [r7, #8]
      break;
 8001dc4:	e0b7      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001dc6:	4b61      	ldr	r3, [pc, #388]	; (8001f4c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8001dc8:	60bb      	str	r3, [r7, #8]
      break;
 8001dca:	e0b4      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001dcc:	4b5d      	ldr	r3, [pc, #372]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8001dd4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8001dd6:	4b5b      	ldr	r3, [pc, #364]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001dd8:	685b      	ldr	r3, [r3, #4]
 8001dda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d04d      	beq.n	8001e7e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001de2:	4b58      	ldr	r3, [pc, #352]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	099b      	lsrs	r3, r3, #6
 8001de8:	461a      	mov	r2, r3
 8001dea:	f04f 0300 	mov.w	r3, #0
 8001dee:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001df2:	f04f 0100 	mov.w	r1, #0
 8001df6:	ea02 0800 	and.w	r8, r2, r0
 8001dfa:	ea03 0901 	and.w	r9, r3, r1
 8001dfe:	4640      	mov	r0, r8
 8001e00:	4649      	mov	r1, r9
 8001e02:	f04f 0200 	mov.w	r2, #0
 8001e06:	f04f 0300 	mov.w	r3, #0
 8001e0a:	014b      	lsls	r3, r1, #5
 8001e0c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001e10:	0142      	lsls	r2, r0, #5
 8001e12:	4610      	mov	r0, r2
 8001e14:	4619      	mov	r1, r3
 8001e16:	ebb0 0008 	subs.w	r0, r0, r8
 8001e1a:	eb61 0109 	sbc.w	r1, r1, r9
 8001e1e:	f04f 0200 	mov.w	r2, #0
 8001e22:	f04f 0300 	mov.w	r3, #0
 8001e26:	018b      	lsls	r3, r1, #6
 8001e28:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001e2c:	0182      	lsls	r2, r0, #6
 8001e2e:	1a12      	subs	r2, r2, r0
 8001e30:	eb63 0301 	sbc.w	r3, r3, r1
 8001e34:	f04f 0000 	mov.w	r0, #0
 8001e38:	f04f 0100 	mov.w	r1, #0
 8001e3c:	00d9      	lsls	r1, r3, #3
 8001e3e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001e42:	00d0      	lsls	r0, r2, #3
 8001e44:	4602      	mov	r2, r0
 8001e46:	460b      	mov	r3, r1
 8001e48:	eb12 0208 	adds.w	r2, r2, r8
 8001e4c:	eb43 0309 	adc.w	r3, r3, r9
 8001e50:	f04f 0000 	mov.w	r0, #0
 8001e54:	f04f 0100 	mov.w	r1, #0
 8001e58:	0259      	lsls	r1, r3, #9
 8001e5a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8001e5e:	0250      	lsls	r0, r2, #9
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	4610      	mov	r0, r2
 8001e66:	4619      	mov	r1, r3
 8001e68:	687b      	ldr	r3, [r7, #4]
 8001e6a:	461a      	mov	r2, r3
 8001e6c:	f04f 0300 	mov.w	r3, #0
 8001e70:	f7fe f9ca 	bl	8000208 <__aeabi_uldivmod>
 8001e74:	4602      	mov	r2, r0
 8001e76:	460b      	mov	r3, r1
 8001e78:	4613      	mov	r3, r2
 8001e7a:	60fb      	str	r3, [r7, #12]
 8001e7c:	e04a      	b.n	8001f14 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001e7e:	4b31      	ldr	r3, [pc, #196]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001e80:	685b      	ldr	r3, [r3, #4]
 8001e82:	099b      	lsrs	r3, r3, #6
 8001e84:	461a      	mov	r2, r3
 8001e86:	f04f 0300 	mov.w	r3, #0
 8001e8a:	f240 10ff 	movw	r0, #511	; 0x1ff
 8001e8e:	f04f 0100 	mov.w	r1, #0
 8001e92:	ea02 0400 	and.w	r4, r2, r0
 8001e96:	ea03 0501 	and.w	r5, r3, r1
 8001e9a:	4620      	mov	r0, r4
 8001e9c:	4629      	mov	r1, r5
 8001e9e:	f04f 0200 	mov.w	r2, #0
 8001ea2:	f04f 0300 	mov.w	r3, #0
 8001ea6:	014b      	lsls	r3, r1, #5
 8001ea8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8001eac:	0142      	lsls	r2, r0, #5
 8001eae:	4610      	mov	r0, r2
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	1b00      	subs	r0, r0, r4
 8001eb4:	eb61 0105 	sbc.w	r1, r1, r5
 8001eb8:	f04f 0200 	mov.w	r2, #0
 8001ebc:	f04f 0300 	mov.w	r3, #0
 8001ec0:	018b      	lsls	r3, r1, #6
 8001ec2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8001ec6:	0182      	lsls	r2, r0, #6
 8001ec8:	1a12      	subs	r2, r2, r0
 8001eca:	eb63 0301 	sbc.w	r3, r3, r1
 8001ece:	f04f 0000 	mov.w	r0, #0
 8001ed2:	f04f 0100 	mov.w	r1, #0
 8001ed6:	00d9      	lsls	r1, r3, #3
 8001ed8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8001edc:	00d0      	lsls	r0, r2, #3
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	1912      	adds	r2, r2, r4
 8001ee4:	eb45 0303 	adc.w	r3, r5, r3
 8001ee8:	f04f 0000 	mov.w	r0, #0
 8001eec:	f04f 0100 	mov.w	r1, #0
 8001ef0:	0299      	lsls	r1, r3, #10
 8001ef2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8001ef6:	0290      	lsls	r0, r2, #10
 8001ef8:	4602      	mov	r2, r0
 8001efa:	460b      	mov	r3, r1
 8001efc:	4610      	mov	r0, r2
 8001efe:	4619      	mov	r1, r3
 8001f00:	687b      	ldr	r3, [r7, #4]
 8001f02:	461a      	mov	r2, r3
 8001f04:	f04f 0300 	mov.w	r3, #0
 8001f08:	f7fe f97e 	bl	8000208 <__aeabi_uldivmod>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4613      	mov	r3, r2
 8001f12:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8001f14:	4b0b      	ldr	r3, [pc, #44]	; (8001f44 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8001f16:	685b      	ldr	r3, [r3, #4]
 8001f18:	0c1b      	lsrs	r3, r3, #16
 8001f1a:	f003 0303 	and.w	r3, r3, #3
 8001f1e:	3301      	adds	r3, #1
 8001f20:	005b      	lsls	r3, r3, #1
 8001f22:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8001f24:	68fa      	ldr	r2, [r7, #12]
 8001f26:	683b      	ldr	r3, [r7, #0]
 8001f28:	fbb2 f3f3 	udiv	r3, r2, r3
 8001f2c:	60bb      	str	r3, [r7, #8]
      break;
 8001f2e:	e002      	b.n	8001f36 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001f30:	4b05      	ldr	r3, [pc, #20]	; (8001f48 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8001f32:	60bb      	str	r3, [r7, #8]
      break;
 8001f34:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001f36:	68bb      	ldr	r3, [r7, #8]
}
 8001f38:	4618      	mov	r0, r3
 8001f3a:	3710      	adds	r7, #16
 8001f3c:	46bd      	mov	sp, r7
 8001f3e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f42:	bf00      	nop
 8001f44:	40023800 	.word	0x40023800
 8001f48:	00f42400 	.word	0x00f42400
 8001f4c:	007a1200 	.word	0x007a1200

08001f50 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001f50:	b480      	push	{r7}
 8001f52:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001f54:	4b03      	ldr	r3, [pc, #12]	; (8001f64 <HAL_RCC_GetHCLKFreq+0x14>)
 8001f56:	681b      	ldr	r3, [r3, #0]
}
 8001f58:	4618      	mov	r0, r3
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr
 8001f62:	bf00      	nop
 8001f64:	20000000 	.word	0x20000000

08001f68 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001f6c:	f7ff fff0 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f70:	4602      	mov	r2, r0
 8001f72:	4b05      	ldr	r3, [pc, #20]	; (8001f88 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001f74:	689b      	ldr	r3, [r3, #8]
 8001f76:	0a9b      	lsrs	r3, r3, #10
 8001f78:	f003 0307 	and.w	r3, r3, #7
 8001f7c:	4903      	ldr	r1, [pc, #12]	; (8001f8c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001f7e:	5ccb      	ldrb	r3, [r1, r3]
 8001f80:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001f84:	4618      	mov	r0, r3
 8001f86:	bd80      	pop	{r7, pc}
 8001f88:	40023800 	.word	0x40023800
 8001f8c:	08003d94 	.word	0x08003d94

08001f90 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001f94:	f7ff ffdc 	bl	8001f50 <HAL_RCC_GetHCLKFreq>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	4b05      	ldr	r3, [pc, #20]	; (8001fb0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001f9c:	689b      	ldr	r3, [r3, #8]
 8001f9e:	0b5b      	lsrs	r3, r3, #13
 8001fa0:	f003 0307 	and.w	r3, r3, #7
 8001fa4:	4903      	ldr	r1, [pc, #12]	; (8001fb4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001fa6:	5ccb      	ldrb	r3, [r1, r3]
 8001fa8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001fac:	4618      	mov	r0, r3
 8001fae:	bd80      	pop	{r7, pc}
 8001fb0:	40023800 	.word	0x40023800
 8001fb4:	08003d94 	.word	0x08003d94

08001fb8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	b088      	sub	sp, #32
 8001fbc:	af00      	add	r7, sp, #0
 8001fbe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8001fc8:	2300      	movs	r3, #0
 8001fca:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8001fcc:	2300      	movs	r3, #0
 8001fce:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8001fd0:	2300      	movs	r3, #0
 8001fd2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	f003 0301 	and.w	r3, r3, #1
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d012      	beq.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8001fe0:	4b69      	ldr	r3, [pc, #420]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe2:	689b      	ldr	r3, [r3, #8]
 8001fe4:	4a68      	ldr	r2, [pc, #416]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fe6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8001fea:	6093      	str	r3, [r2, #8]
 8001fec:	4b66      	ldr	r3, [pc, #408]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001fee:	689a      	ldr	r2, [r3, #8]
 8001ff0:	687b      	ldr	r3, [r7, #4]
 8001ff2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ff4:	4964      	ldr	r1, [pc, #400]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d101      	bne.n	8002006 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002002:	2301      	movs	r3, #1
 8002004:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800200e:	2b00      	cmp	r3, #0
 8002010:	d017      	beq.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002012:	4b5d      	ldr	r3, [pc, #372]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002014:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002018:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800201c:	687b      	ldr	r3, [r7, #4]
 800201e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002020:	4959      	ldr	r1, [pc, #356]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002022:	4313      	orrs	r3, r2
 8002024:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800202c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002030:	d101      	bne.n	8002036 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002032:	2301      	movs	r3, #1
 8002034:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800203a:	2b00      	cmp	r3, #0
 800203c:	d101      	bne.n	8002042 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800203e:	2301      	movs	r3, #1
 8002040:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800204a:	2b00      	cmp	r3, #0
 800204c:	d017      	beq.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800204e:	4b4e      	ldr	r3, [pc, #312]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002050:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002054:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002058:	687b      	ldr	r3, [r7, #4]
 800205a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800205c:	494a      	ldr	r1, [pc, #296]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800205e:	4313      	orrs	r3, r2
 8002060:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002068:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800206c:	d101      	bne.n	8002072 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800206e:	2301      	movs	r3, #1
 8002070:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002076:	2b00      	cmp	r3, #0
 8002078:	d101      	bne.n	800207e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800207a:	2301      	movs	r3, #1
 800207c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800207e:	687b      	ldr	r3, [r7, #4]
 8002080:	681b      	ldr	r3, [r3, #0]
 8002082:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002086:	2b00      	cmp	r3, #0
 8002088:	d001      	beq.n	800208e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800208a:	2301      	movs	r3, #1
 800208c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	681b      	ldr	r3, [r3, #0]
 8002092:	f003 0320 	and.w	r3, r3, #32
 8002096:	2b00      	cmp	r3, #0
 8002098:	f000 808b 	beq.w	80021b2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 800209c:	4b3a      	ldr	r3, [pc, #232]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800209e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020a0:	4a39      	ldr	r2, [pc, #228]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80020a6:	6413      	str	r3, [r2, #64]	; 0x40
 80020a8:	4b37      	ldr	r3, [pc, #220]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80020ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80020b0:	60bb      	str	r3, [r7, #8]
 80020b2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80020b4:	4b35      	ldr	r3, [pc, #212]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a34      	ldr	r2, [pc, #208]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80020be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80020c0:	f7fe fdc8 	bl	8000c54 <HAL_GetTick>
 80020c4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020c6:	e008      	b.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80020c8:	f7fe fdc4 	bl	8000c54 <HAL_GetTick>
 80020cc:	4602      	mov	r2, r0
 80020ce:	697b      	ldr	r3, [r7, #20]
 80020d0:	1ad3      	subs	r3, r2, r3
 80020d2:	2b64      	cmp	r3, #100	; 0x64
 80020d4:	d901      	bls.n	80020da <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80020d6:	2303      	movs	r3, #3
 80020d8:	e357      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80020da:	4b2c      	ldr	r3, [pc, #176]	; (800218c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80020dc:	681b      	ldr	r3, [r3, #0]
 80020de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80020e2:	2b00      	cmp	r3, #0
 80020e4:	d0f0      	beq.n	80020c8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80020e6:	4b28      	ldr	r3, [pc, #160]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80020e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80020ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020ee:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d035      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 80020f6:	687b      	ldr	r3, [r7, #4]
 80020f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80020fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80020fe:	693a      	ldr	r2, [r7, #16]
 8002100:	429a      	cmp	r2, r3
 8002102:	d02e      	beq.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002104:	4b20      	ldr	r3, [pc, #128]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002106:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002108:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800210c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800210e:	4b1e      	ldr	r3, [pc, #120]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002110:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002112:	4a1d      	ldr	r2, [pc, #116]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002118:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800211a:	4b1b      	ldr	r3, [pc, #108]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800211c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800211e:	4a1a      	ldr	r2, [pc, #104]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002120:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002124:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002126:	4a18      	ldr	r2, [pc, #96]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002128:	693b      	ldr	r3, [r7, #16]
 800212a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800212c:	4b16      	ldr	r3, [pc, #88]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800212e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002130:	f003 0301 	and.w	r3, r3, #1
 8002134:	2b01      	cmp	r3, #1
 8002136:	d114      	bne.n	8002162 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002138:	f7fe fd8c 	bl	8000c54 <HAL_GetTick>
 800213c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800213e:	e00a      	b.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002140:	f7fe fd88 	bl	8000c54 <HAL_GetTick>
 8002144:	4602      	mov	r2, r0
 8002146:	697b      	ldr	r3, [r7, #20]
 8002148:	1ad3      	subs	r3, r2, r3
 800214a:	f241 3288 	movw	r2, #5000	; 0x1388
 800214e:	4293      	cmp	r3, r2
 8002150:	d901      	bls.n	8002156 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002152:	2303      	movs	r3, #3
 8002154:	e319      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002156:	4b0c      	ldr	r3, [pc, #48]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002158:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800215a:	f003 0302 	and.w	r3, r3, #2
 800215e:	2b00      	cmp	r3, #0
 8002160:	d0ee      	beq.n	8002140 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800216a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800216e:	d111      	bne.n	8002194 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002170:	4b05      	ldr	r3, [pc, #20]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002172:	689b      	ldr	r3, [r3, #8]
 8002174:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002178:	687b      	ldr	r3, [r7, #4]
 800217a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800217c:	4b04      	ldr	r3, [pc, #16]	; (8002190 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800217e:	400b      	ands	r3, r1
 8002180:	4901      	ldr	r1, [pc, #4]	; (8002188 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002182:	4313      	orrs	r3, r2
 8002184:	608b      	str	r3, [r1, #8]
 8002186:	e00b      	b.n	80021a0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002188:	40023800 	.word	0x40023800
 800218c:	40007000 	.word	0x40007000
 8002190:	0ffffcff 	.word	0x0ffffcff
 8002194:	4bb1      	ldr	r3, [pc, #708]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002196:	689b      	ldr	r3, [r3, #8]
 8002198:	4ab0      	ldr	r2, [pc, #704]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800219a:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 800219e:	6093      	str	r3, [r2, #8]
 80021a0:	4bae      	ldr	r3, [pc, #696]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021a2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80021a8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80021ac:	49ab      	ldr	r1, [pc, #684]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ae:	4313      	orrs	r3, r2
 80021b0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80021b2:	687b      	ldr	r3, [r7, #4]
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0310 	and.w	r3, r3, #16
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d010      	beq.n	80021e0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80021be:	4ba7      	ldr	r3, [pc, #668]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021c0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80021c4:	4aa5      	ldr	r2, [pc, #660]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80021ca:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80021ce:	4ba3      	ldr	r3, [pc, #652]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021d0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80021d8:	49a0      	ldr	r1, [pc, #640]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021da:	4313      	orrs	r3, r2
 80021dc:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	681b      	ldr	r3, [r3, #0]
 80021e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d00a      	beq.n	8002202 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80021ec:	4b9b      	ldr	r3, [pc, #620]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021ee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80021f2:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80021fa:	4998      	ldr	r1, [pc, #608]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80021fc:	4313      	orrs	r3, r2
 80021fe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800220a:	2b00      	cmp	r3, #0
 800220c:	d00a      	beq.n	8002224 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800220e:	4b93      	ldr	r3, [pc, #588]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002210:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002214:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002218:	687b      	ldr	r3, [r7, #4]
 800221a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800221c:	498f      	ldr	r1, [pc, #572]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800221e:	4313      	orrs	r3, r2
 8002220:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002224:	687b      	ldr	r3, [r7, #4]
 8002226:	681b      	ldr	r3, [r3, #0]
 8002228:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800222c:	2b00      	cmp	r3, #0
 800222e:	d00a      	beq.n	8002246 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002230:	4b8a      	ldr	r3, [pc, #552]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002232:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002236:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800223e:	4987      	ldr	r1, [pc, #540]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002240:	4313      	orrs	r3, r2
 8002242:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002246:	687b      	ldr	r3, [r7, #4]
 8002248:	681b      	ldr	r3, [r3, #0]
 800224a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800224e:	2b00      	cmp	r3, #0
 8002250:	d00a      	beq.n	8002268 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002252:	4b82      	ldr	r3, [pc, #520]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002254:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002258:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800225c:	687b      	ldr	r3, [r7, #4]
 800225e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002260:	497e      	ldr	r1, [pc, #504]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002262:	4313      	orrs	r3, r2
 8002264:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002268:	687b      	ldr	r3, [r7, #4]
 800226a:	681b      	ldr	r3, [r3, #0]
 800226c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002270:	2b00      	cmp	r3, #0
 8002272:	d00a      	beq.n	800228a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002274:	4b79      	ldr	r3, [pc, #484]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002276:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800227a:	f023 0203 	bic.w	r2, r3, #3
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002282:	4976      	ldr	r1, [pc, #472]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002284:	4313      	orrs	r3, r2
 8002286:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	681b      	ldr	r3, [r3, #0]
 800228e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002292:	2b00      	cmp	r3, #0
 8002294:	d00a      	beq.n	80022ac <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002296:	4b71      	ldr	r3, [pc, #452]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002298:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800229c:	f023 020c 	bic.w	r2, r3, #12
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a4:	496d      	ldr	r1, [pc, #436]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022a6:	4313      	orrs	r3, r2
 80022a8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b4:	2b00      	cmp	r3, #0
 80022b6:	d00a      	beq.n	80022ce <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80022b8:	4b68      	ldr	r3, [pc, #416]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022be:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80022c6:	4965      	ldr	r1, [pc, #404]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022c8:	4313      	orrs	r3, r2
 80022ca:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	681b      	ldr	r3, [r3, #0]
 80022d2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022d6:	2b00      	cmp	r3, #0
 80022d8:	d00a      	beq.n	80022f0 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80022da:	4b60      	ldr	r3, [pc, #384]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80022e0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80022e8:	495c      	ldr	r1, [pc, #368]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022ea:	4313      	orrs	r3, r2
 80022ec:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80022f0:	687b      	ldr	r3, [r7, #4]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	d00a      	beq.n	8002312 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80022fc:	4b57      	ldr	r3, [pc, #348]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80022fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002302:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002306:	687b      	ldr	r3, [r7, #4]
 8002308:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800230a:	4954      	ldr	r1, [pc, #336]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800230c:	4313      	orrs	r3, r2
 800230e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002312:	687b      	ldr	r3, [r7, #4]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800231a:	2b00      	cmp	r3, #0
 800231c:	d00a      	beq.n	8002334 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800231e:	4b4f      	ldr	r3, [pc, #316]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002320:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002324:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002328:	687b      	ldr	r3, [r7, #4]
 800232a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800232c:	494b      	ldr	r1, [pc, #300]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800232e:	4313      	orrs	r3, r2
 8002330:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d00a      	beq.n	8002356 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002340:	4b46      	ldr	r3, [pc, #280]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002342:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002346:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800234a:	687b      	ldr	r3, [r7, #4]
 800234c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800234e:	4943      	ldr	r1, [pc, #268]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002350:	4313      	orrs	r3, r2
 8002352:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800235e:	2b00      	cmp	r3, #0
 8002360:	d00a      	beq.n	8002378 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002362:	4b3e      	ldr	r3, [pc, #248]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002364:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002368:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800236c:	687b      	ldr	r3, [r7, #4]
 800236e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002370:	493a      	ldr	r1, [pc, #232]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002372:	4313      	orrs	r3, r2
 8002374:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002380:	2b00      	cmp	r3, #0
 8002382:	d00a      	beq.n	800239a <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002384:	4b35      	ldr	r3, [pc, #212]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002386:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800238a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002392:	4932      	ldr	r1, [pc, #200]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002394:	4313      	orrs	r3, r2
 8002396:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	681b      	ldr	r3, [r3, #0]
 800239e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80023a2:	2b00      	cmp	r3, #0
 80023a4:	d011      	beq.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80023a6:	4b2d      	ldr	r3, [pc, #180]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ac:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023b4:	4929      	ldr	r1, [pc, #164]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023b6:	4313      	orrs	r3, r2
 80023b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80023c0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80023c4:	d101      	bne.n	80023ca <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80023c6:	2301      	movs	r3, #1
 80023c8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	f003 0308 	and.w	r3, r3, #8
 80023d2:	2b00      	cmp	r3, #0
 80023d4:	d001      	beq.n	80023da <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80023d6:	2301      	movs	r3, #1
 80023d8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80023e2:	2b00      	cmp	r3, #0
 80023e4:	d00a      	beq.n	80023fc <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80023e6:	4b1d      	ldr	r3, [pc, #116]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80023ec:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023f4:	4919      	ldr	r1, [pc, #100]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80023f6:	4313      	orrs	r3, r2
 80023f8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 80023fc:	687b      	ldr	r3, [r7, #4]
 80023fe:	681b      	ldr	r3, [r3, #0]
 8002400:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002404:	2b00      	cmp	r3, #0
 8002406:	d00b      	beq.n	8002420 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800240a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800240e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002418:	4910      	ldr	r1, [pc, #64]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800241a:	4313      	orrs	r3, r2
 800241c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b01      	cmp	r3, #1
 8002424:	d006      	beq.n	8002434 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800242e:	2b00      	cmp	r3, #0
 8002430:	f000 80d9 	beq.w	80025e6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002436:	681b      	ldr	r3, [r3, #0]
 8002438:	4a08      	ldr	r2, [pc, #32]	; (800245c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800243a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800243e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002440:	f7fe fc08 	bl	8000c54 <HAL_GetTick>
 8002444:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002446:	e00b      	b.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002448:	f7fe fc04 	bl	8000c54 <HAL_GetTick>
 800244c:	4602      	mov	r2, r0
 800244e:	697b      	ldr	r3, [r7, #20]
 8002450:	1ad3      	subs	r3, r2, r3
 8002452:	2b64      	cmp	r3, #100	; 0x64
 8002454:	d904      	bls.n	8002460 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002456:	2303      	movs	r3, #3
 8002458:	e197      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 800245a:	bf00      	nop
 800245c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002460:	4b6c      	ldr	r3, [pc, #432]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002468:	2b00      	cmp	r3, #0
 800246a:	d1ed      	bne.n	8002448 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	f003 0301 	and.w	r3, r3, #1
 8002474:	2b00      	cmp	r3, #0
 8002476:	d021      	beq.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002478:	687b      	ldr	r3, [r7, #4]
 800247a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800247c:	2b00      	cmp	r3, #0
 800247e:	d11d      	bne.n	80024bc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002480:	4b64      	ldr	r3, [pc, #400]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002482:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002486:	0c1b      	lsrs	r3, r3, #16
 8002488:	f003 0303 	and.w	r3, r3, #3
 800248c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 800248e:	4b61      	ldr	r3, [pc, #388]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002490:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002494:	0e1b      	lsrs	r3, r3, #24
 8002496:	f003 030f 	and.w	r3, r3, #15
 800249a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 800249c:	687b      	ldr	r3, [r7, #4]
 800249e:	685b      	ldr	r3, [r3, #4]
 80024a0:	019a      	lsls	r2, r3, #6
 80024a2:	693b      	ldr	r3, [r7, #16]
 80024a4:	041b      	lsls	r3, r3, #16
 80024a6:	431a      	orrs	r2, r3
 80024a8:	68fb      	ldr	r3, [r7, #12]
 80024aa:	061b      	lsls	r3, r3, #24
 80024ac:	431a      	orrs	r2, r3
 80024ae:	687b      	ldr	r3, [r7, #4]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	071b      	lsls	r3, r3, #28
 80024b4:	4957      	ldr	r1, [pc, #348]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024b6:	4313      	orrs	r3, r2
 80024b8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024bc:	687b      	ldr	r3, [r7, #4]
 80024be:	681b      	ldr	r3, [r3, #0]
 80024c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80024c4:	2b00      	cmp	r3, #0
 80024c6:	d004      	beq.n	80024d2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 80024c8:	687b      	ldr	r3, [r7, #4]
 80024ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80024cc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80024d0:	d00a      	beq.n	80024e8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024d2:	687b      	ldr	r3, [r7, #4]
 80024d4:	681b      	ldr	r3, [r3, #0]
 80024d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d02e      	beq.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80024e2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80024e6:	d129      	bne.n	800253c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80024e8:	4b4a      	ldr	r3, [pc, #296]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024ea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024ee:	0c1b      	lsrs	r3, r3, #16
 80024f0:	f003 0303 	and.w	r3, r3, #3
 80024f4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80024f6:	4b47      	ldr	r3, [pc, #284]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80024f8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80024fc:	0f1b      	lsrs	r3, r3, #28
 80024fe:	f003 0307 	and.w	r3, r3, #7
 8002502:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	685b      	ldr	r3, [r3, #4]
 8002508:	019a      	lsls	r2, r3, #6
 800250a:	693b      	ldr	r3, [r7, #16]
 800250c:	041b      	lsls	r3, r3, #16
 800250e:	431a      	orrs	r2, r3
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	68db      	ldr	r3, [r3, #12]
 8002514:	061b      	lsls	r3, r3, #24
 8002516:	431a      	orrs	r2, r3
 8002518:	68fb      	ldr	r3, [r7, #12]
 800251a:	071b      	lsls	r3, r3, #28
 800251c:	493d      	ldr	r1, [pc, #244]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800251e:	4313      	orrs	r3, r2
 8002520:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8002524:	4b3b      	ldr	r3, [pc, #236]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002526:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800252a:	f023 021f 	bic.w	r2, r3, #31
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002532:	3b01      	subs	r3, #1
 8002534:	4937      	ldr	r1, [pc, #220]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002536:	4313      	orrs	r3, r2
 8002538:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800253c:	687b      	ldr	r3, [r7, #4]
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002544:	2b00      	cmp	r3, #0
 8002546:	d01d      	beq.n	8002584 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002548:	4b32      	ldr	r3, [pc, #200]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800254a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800254e:	0e1b      	lsrs	r3, r3, #24
 8002550:	f003 030f 	and.w	r3, r3, #15
 8002554:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8002556:	4b2f      	ldr	r3, [pc, #188]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002558:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800255c:	0f1b      	lsrs	r3, r3, #28
 800255e:	f003 0307 	and.w	r3, r3, #7
 8002562:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	685b      	ldr	r3, [r3, #4]
 8002568:	019a      	lsls	r2, r3, #6
 800256a:	687b      	ldr	r3, [r7, #4]
 800256c:	691b      	ldr	r3, [r3, #16]
 800256e:	041b      	lsls	r3, r3, #16
 8002570:	431a      	orrs	r2, r3
 8002572:	693b      	ldr	r3, [r7, #16]
 8002574:	061b      	lsls	r3, r3, #24
 8002576:	431a      	orrs	r2, r3
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	071b      	lsls	r3, r3, #28
 800257c:	4925      	ldr	r1, [pc, #148]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800257e:	4313      	orrs	r3, r2
 8002580:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800258c:	2b00      	cmp	r3, #0
 800258e:	d011      	beq.n	80025b4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	019a      	lsls	r2, r3, #6
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	691b      	ldr	r3, [r3, #16]
 800259a:	041b      	lsls	r3, r3, #16
 800259c:	431a      	orrs	r2, r3
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	68db      	ldr	r3, [r3, #12]
 80025a2:	061b      	lsls	r3, r3, #24
 80025a4:	431a      	orrs	r2, r3
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	689b      	ldr	r3, [r3, #8]
 80025aa:	071b      	lsls	r3, r3, #28
 80025ac:	4919      	ldr	r1, [pc, #100]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 80025b4:	4b17      	ldr	r3, [pc, #92]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	4a16      	ldr	r2, [pc, #88]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025ba:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80025be:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025c0:	f7fe fb48 	bl	8000c54 <HAL_GetTick>
 80025c4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025c6:	e008      	b.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 80025c8:	f7fe fb44 	bl	8000c54 <HAL_GetTick>
 80025cc:	4602      	mov	r2, r0
 80025ce:	697b      	ldr	r3, [r7, #20]
 80025d0:	1ad3      	subs	r3, r2, r3
 80025d2:	2b64      	cmp	r3, #100	; 0x64
 80025d4:	d901      	bls.n	80025da <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80025d6:	2303      	movs	r3, #3
 80025d8:	e0d7      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 80025da:	4b0e      	ldr	r3, [pc, #56]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025dc:	681b      	ldr	r3, [r3, #0]
 80025de:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	d0f0      	beq.n	80025c8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 80025e6:	69bb      	ldr	r3, [r7, #24]
 80025e8:	2b01      	cmp	r3, #1
 80025ea:	f040 80cd 	bne.w	8002788 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 80025ee:	4b09      	ldr	r3, [pc, #36]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	4a08      	ldr	r2, [pc, #32]	; (8002614 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80025f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025f8:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80025fa:	f7fe fb2b 	bl	8000c54 <HAL_GetTick>
 80025fe:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002600:	e00a      	b.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002602:	f7fe fb27 	bl	8000c54 <HAL_GetTick>
 8002606:	4602      	mov	r2, r0
 8002608:	697b      	ldr	r3, [r7, #20]
 800260a:	1ad3      	subs	r3, r2, r3
 800260c:	2b64      	cmp	r3, #100	; 0x64
 800260e:	d903      	bls.n	8002618 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002610:	2303      	movs	r3, #3
 8002612:	e0ba      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002614:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8002618:	4b5e      	ldr	r3, [pc, #376]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800261a:	681b      	ldr	r3, [r3, #0]
 800261c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002620:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002624:	d0ed      	beq.n	8002602 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800262e:	2b00      	cmp	r3, #0
 8002630:	d003      	beq.n	800263a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002636:	2b00      	cmp	r3, #0
 8002638:	d009      	beq.n	800264e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8002642:	2b00      	cmp	r3, #0
 8002644:	d02e      	beq.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800264a:	2b00      	cmp	r3, #0
 800264c:	d12a      	bne.n	80026a4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800264e:	4b51      	ldr	r3, [pc, #324]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002654:	0c1b      	lsrs	r3, r3, #16
 8002656:	f003 0303 	and.w	r3, r3, #3
 800265a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 800265c:	4b4d      	ldr	r3, [pc, #308]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800265e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002662:	0f1b      	lsrs	r3, r3, #28
 8002664:	f003 0307 	and.w	r3, r3, #7
 8002668:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 800266a:	687b      	ldr	r3, [r7, #4]
 800266c:	695b      	ldr	r3, [r3, #20]
 800266e:	019a      	lsls	r2, r3, #6
 8002670:	693b      	ldr	r3, [r7, #16]
 8002672:	041b      	lsls	r3, r3, #16
 8002674:	431a      	orrs	r2, r3
 8002676:	687b      	ldr	r3, [r7, #4]
 8002678:	699b      	ldr	r3, [r3, #24]
 800267a:	061b      	lsls	r3, r3, #24
 800267c:	431a      	orrs	r2, r3
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	071b      	lsls	r3, r3, #28
 8002682:	4944      	ldr	r1, [pc, #272]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002684:	4313      	orrs	r3, r2
 8002686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 800268a:	4b42      	ldr	r3, [pc, #264]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800268c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002690:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002698:	3b01      	subs	r3, #1
 800269a:	021b      	lsls	r3, r3, #8
 800269c:	493d      	ldr	r1, [pc, #244]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800269e:	4313      	orrs	r3, r2
 80026a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80026ac:	2b00      	cmp	r3, #0
 80026ae:	d022      	beq.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80026b4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80026b8:	d11d      	bne.n	80026f6 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 80026ba:	4b36      	ldr	r3, [pc, #216]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026bc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026c0:	0e1b      	lsrs	r3, r3, #24
 80026c2:	f003 030f 	and.w	r3, r3, #15
 80026c6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80026c8:	4b32      	ldr	r3, [pc, #200]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80026ce:	0f1b      	lsrs	r3, r3, #28
 80026d0:	f003 0307 	and.w	r3, r3, #7
 80026d4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	695b      	ldr	r3, [r3, #20]
 80026da:	019a      	lsls	r2, r3, #6
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a1b      	ldr	r3, [r3, #32]
 80026e0:	041b      	lsls	r3, r3, #16
 80026e2:	431a      	orrs	r2, r3
 80026e4:	693b      	ldr	r3, [r7, #16]
 80026e6:	061b      	lsls	r3, r3, #24
 80026e8:	431a      	orrs	r2, r3
 80026ea:	68fb      	ldr	r3, [r7, #12]
 80026ec:	071b      	lsls	r3, r3, #28
 80026ee:	4929      	ldr	r1, [pc, #164]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 80026f6:	687b      	ldr	r3, [r7, #4]
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	f003 0308 	and.w	r3, r3, #8
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d028      	beq.n	8002754 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8002702:	4b24      	ldr	r3, [pc, #144]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002704:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002708:	0e1b      	lsrs	r3, r3, #24
 800270a:	f003 030f 	and.w	r3, r3, #15
 800270e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8002710:	4b20      	ldr	r3, [pc, #128]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002712:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002716:	0c1b      	lsrs	r3, r3, #16
 8002718:	f003 0303 	and.w	r3, r3, #3
 800271c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800271e:	687b      	ldr	r3, [r7, #4]
 8002720:	695b      	ldr	r3, [r3, #20]
 8002722:	019a      	lsls	r2, r3, #6
 8002724:	68fb      	ldr	r3, [r7, #12]
 8002726:	041b      	lsls	r3, r3, #16
 8002728:	431a      	orrs	r2, r3
 800272a:	693b      	ldr	r3, [r7, #16]
 800272c:	061b      	lsls	r3, r3, #24
 800272e:	431a      	orrs	r2, r3
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	69db      	ldr	r3, [r3, #28]
 8002734:	071b      	lsls	r3, r3, #28
 8002736:	4917      	ldr	r1, [pc, #92]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002738:	4313      	orrs	r3, r2
 800273a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800273e:	4b15      	ldr	r3, [pc, #84]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002740:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002744:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002748:	687b      	ldr	r3, [r7, #4]
 800274a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800274c:	4911      	ldr	r1, [pc, #68]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800274e:	4313      	orrs	r3, r2
 8002750:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8002754:	4b0f      	ldr	r3, [pc, #60]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8002756:	681b      	ldr	r3, [r3, #0]
 8002758:	4a0e      	ldr	r2, [pc, #56]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800275a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800275e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002760:	f7fe fa78 	bl	8000c54 <HAL_GetTick>
 8002764:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8002766:	e008      	b.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8002768:	f7fe fa74 	bl	8000c54 <HAL_GetTick>
 800276c:	4602      	mov	r2, r0
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	1ad3      	subs	r3, r2, r3
 8002772:	2b64      	cmp	r3, #100	; 0x64
 8002774:	d901      	bls.n	800277a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002776:	2303      	movs	r3, #3
 8002778:	e007      	b.n	800278a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 800277a:	4b06      	ldr	r3, [pc, #24]	; (8002794 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800277c:	681b      	ldr	r3, [r3, #0]
 800277e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8002782:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8002786:	d1ef      	bne.n	8002768 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8002788:	2300      	movs	r3, #0
}
 800278a:	4618      	mov	r0, r3
 800278c:	3720      	adds	r7, #32
 800278e:	46bd      	mov	sp, r7
 8002790:	bd80      	pop	{r7, pc}
 8002792:	bf00      	nop
 8002794:	40023800 	.word	0x40023800

08002798 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b082      	sub	sp, #8
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d101      	bne.n	80027aa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80027a6:	2301      	movs	r3, #1
 80027a8:	e040      	b.n	800282c <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d106      	bne.n	80027c0 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2200      	movs	r2, #0
 80027b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80027ba:	6878      	ldr	r0, [r7, #4]
 80027bc:	f7fe f8e2 	bl	8000984 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2224      	movs	r2, #36	; 0x24
 80027c4:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 80027c6:	687b      	ldr	r3, [r7, #4]
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	681a      	ldr	r2, [r3, #0]
 80027cc:	687b      	ldr	r3, [r7, #4]
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	f022 0201 	bic.w	r2, r2, #1
 80027d4:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80027d6:	6878      	ldr	r0, [r7, #4]
 80027d8:	f000 fa76 	bl	8002cc8 <UART_SetConfig>
 80027dc:	4603      	mov	r3, r0
 80027de:	2b01      	cmp	r3, #1
 80027e0:	d101      	bne.n	80027e6 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e022      	b.n	800282c <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80027ea:	2b00      	cmp	r3, #0
 80027ec:	d002      	beq.n	80027f4 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80027ee:	6878      	ldr	r0, [r7, #4]
 80027f0:	f000 fccc 	bl	800318c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80027f4:	687b      	ldr	r3, [r7, #4]
 80027f6:	681b      	ldr	r3, [r3, #0]
 80027f8:	685a      	ldr	r2, [r3, #4]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8002802:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	689a      	ldr	r2, [r3, #8]
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8002812:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681a      	ldr	r2, [r3, #0]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	f042 0201 	orr.w	r2, r2, #1
 8002822:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8002824:	6878      	ldr	r0, [r7, #4]
 8002826:	f000 fd53 	bl	80032d0 <UART_CheckIdleState>
 800282a:	4603      	mov	r3, r0
}
 800282c:	4618      	mov	r0, r3
 800282e:	3708      	adds	r7, #8
 8002830:	46bd      	mov	sp, r7
 8002832:	bd80      	pop	{r7, pc}

08002834 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8002834:	b580      	push	{r7, lr}
 8002836:	b084      	sub	sp, #16
 8002838:	af00      	add	r7, sp, #0
 800283a:	60f8      	str	r0, [r7, #12]
 800283c:	60b9      	str	r1, [r7, #8]
 800283e:	4613      	mov	r3, r2
 8002840:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002846:	2b20      	cmp	r3, #32
 8002848:	d12c      	bne.n	80028a4 <HAL_UART_Receive_IT+0x70>
  {
    if ((pData == NULL) || (Size == 0U))
 800284a:	68bb      	ldr	r3, [r7, #8]
 800284c:	2b00      	cmp	r3, #0
 800284e:	d002      	beq.n	8002856 <HAL_UART_Receive_IT+0x22>
 8002850:	88fb      	ldrh	r3, [r7, #6]
 8002852:	2b00      	cmp	r3, #0
 8002854:	d101      	bne.n	800285a <HAL_UART_Receive_IT+0x26>
    {
      return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
 8002858:	e025      	b.n	80028a6 <HAL_UART_Receive_IT+0x72>
    }

    __HAL_LOCK(huart);
 800285a:	68fb      	ldr	r3, [r7, #12]
 800285c:	f893 3074 	ldrb.w	r3, [r3, #116]	; 0x74
 8002860:	2b01      	cmp	r3, #1
 8002862:	d101      	bne.n	8002868 <HAL_UART_Receive_IT+0x34>
 8002864:	2302      	movs	r3, #2
 8002866:	e01e      	b.n	80028a6 <HAL_UART_Receive_IT+0x72>
 8002868:	68fb      	ldr	r3, [r7, #12]
 800286a:	2201      	movs	r2, #1
 800286c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002870:	68fb      	ldr	r3, [r7, #12]
 8002872:	2200      	movs	r2, #0
 8002874:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 8002876:	68fb      	ldr	r3, [r7, #12]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	685b      	ldr	r3, [r3, #4]
 800287c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002880:	2b00      	cmp	r3, #0
 8002882:	d007      	beq.n	8002894 <HAL_UART_Receive_IT+0x60>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8002884:	68fb      	ldr	r3, [r7, #12]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	681a      	ldr	r2, [r3, #0]
 800288a:	68fb      	ldr	r3, [r7, #12]
 800288c:	681b      	ldr	r3, [r3, #0]
 800288e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8002892:	601a      	str	r2, [r3, #0]
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 8002894:	88fb      	ldrh	r3, [r7, #6]
 8002896:	461a      	mov	r2, r3
 8002898:	68b9      	ldr	r1, [r7, #8]
 800289a:	68f8      	ldr	r0, [r7, #12]
 800289c:	f000 fdc8 	bl	8003430 <UART_Start_Receive_IT>
 80028a0:	4603      	mov	r3, r0
 80028a2:	e000      	b.n	80028a6 <HAL_UART_Receive_IT+0x72>
  }
  else
  {
    return HAL_BUSY;
 80028a4:	2302      	movs	r3, #2
  }
}
 80028a6:	4618      	mov	r0, r3
 80028a8:	3710      	adds	r7, #16
 80028aa:	46bd      	mov	sp, r7
 80028ac:	bd80      	pop	{r7, pc}
	...

080028b0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80028b0:	b580      	push	{r7, lr}
 80028b2:	b088      	sub	sp, #32
 80028b4:	af00      	add	r7, sp, #0
 80028b6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69db      	ldr	r3, [r3, #28]
 80028be:	61fb      	str	r3, [r7, #28]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	681b      	ldr	r3, [r3, #0]
 80028c4:	681b      	ldr	r3, [r3, #0]
 80028c6:	61bb      	str	r3, [r7, #24]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	689b      	ldr	r3, [r3, #8]
 80028ce:	617b      	str	r3, [r7, #20]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 80028d0:	69fa      	ldr	r2, [r7, #28]
 80028d2:	f640 030f 	movw	r3, #2063	; 0x80f
 80028d6:	4013      	ands	r3, r2
 80028d8:	613b      	str	r3, [r7, #16]
  if (errorflags == 0U)
 80028da:	693b      	ldr	r3, [r7, #16]
 80028dc:	2b00      	cmp	r3, #0
 80028de:	d113      	bne.n	8002908 <HAL_UART_IRQHandler+0x58>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 80028e0:	69fb      	ldr	r3, [r7, #28]
 80028e2:	f003 0320 	and.w	r3, r3, #32
 80028e6:	2b00      	cmp	r3, #0
 80028e8:	d00e      	beq.n	8002908 <HAL_UART_IRQHandler+0x58>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 80028ea:	69bb      	ldr	r3, [r7, #24]
 80028ec:	f003 0320 	and.w	r3, r3, #32
 80028f0:	2b00      	cmp	r3, #0
 80028f2:	d009      	beq.n	8002908 <HAL_UART_IRQHandler+0x58>
    {
      if (huart->RxISR != NULL)
 80028f4:	687b      	ldr	r3, [r7, #4]
 80028f6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	f000 81b9 	beq.w	8002c70 <HAL_UART_IRQHandler+0x3c0>
      {
        huart->RxISR(huart);
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002902:	6878      	ldr	r0, [r7, #4]
 8002904:	4798      	blx	r3
      }
      return;
 8002906:	e1b3      	b.n	8002c70 <HAL_UART_IRQHandler+0x3c0>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8002908:	693b      	ldr	r3, [r7, #16]
 800290a:	2b00      	cmp	r3, #0
 800290c:	f000 80e3 	beq.w	8002ad6 <HAL_UART_IRQHandler+0x226>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8002910:	697b      	ldr	r3, [r7, #20]
 8002912:	f003 0301 	and.w	r3, r3, #1
 8002916:	2b00      	cmp	r3, #0
 8002918:	d105      	bne.n	8002926 <HAL_UART_IRQHandler+0x76>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800291a:	69ba      	ldr	r2, [r7, #24]
 800291c:	4ba5      	ldr	r3, [pc, #660]	; (8002bb4 <HAL_UART_IRQHandler+0x304>)
 800291e:	4013      	ands	r3, r2
 8002920:	2b00      	cmp	r3, #0
 8002922:	f000 80d8 	beq.w	8002ad6 <HAL_UART_IRQHandler+0x226>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8002926:	69fb      	ldr	r3, [r7, #28]
 8002928:	f003 0301 	and.w	r3, r3, #1
 800292c:	2b00      	cmp	r3, #0
 800292e:	d010      	beq.n	8002952 <HAL_UART_IRQHandler+0xa2>
 8002930:	69bb      	ldr	r3, [r7, #24]
 8002932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002936:	2b00      	cmp	r3, #0
 8002938:	d00b      	beq.n	8002952 <HAL_UART_IRQHandler+0xa2>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	681b      	ldr	r3, [r3, #0]
 800293e:	2201      	movs	r2, #1
 8002940:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002948:	f043 0201 	orr.w	r2, r3, #1
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8002952:	69fb      	ldr	r3, [r7, #28]
 8002954:	f003 0302 	and.w	r3, r3, #2
 8002958:	2b00      	cmp	r3, #0
 800295a:	d010      	beq.n	800297e <HAL_UART_IRQHandler+0xce>
 800295c:	697b      	ldr	r3, [r7, #20]
 800295e:	f003 0301 	and.w	r3, r3, #1
 8002962:	2b00      	cmp	r3, #0
 8002964:	d00b      	beq.n	800297e <HAL_UART_IRQHandler+0xce>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	2202      	movs	r2, #2
 800296c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002974:	f043 0204 	orr.w	r2, r3, #4
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800297e:	69fb      	ldr	r3, [r7, #28]
 8002980:	f003 0304 	and.w	r3, r3, #4
 8002984:	2b00      	cmp	r3, #0
 8002986:	d010      	beq.n	80029aa <HAL_UART_IRQHandler+0xfa>
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	f003 0301 	and.w	r3, r3, #1
 800298e:	2b00      	cmp	r3, #0
 8002990:	d00b      	beq.n	80029aa <HAL_UART_IRQHandler+0xfa>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	2204      	movs	r2, #4
 8002998:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800299a:	687b      	ldr	r3, [r7, #4]
 800299c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029a0:	f043 0202 	orr.w	r2, r3, #2
 80029a4:	687b      	ldr	r3, [r7, #4]
 80029a6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 80029aa:	69fb      	ldr	r3, [r7, #28]
 80029ac:	f003 0308 	and.w	r3, r3, #8
 80029b0:	2b00      	cmp	r3, #0
 80029b2:	d015      	beq.n	80029e0 <HAL_UART_IRQHandler+0x130>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029b4:	69bb      	ldr	r3, [r7, #24]
 80029b6:	f003 0320 	and.w	r3, r3, #32
 80029ba:	2b00      	cmp	r3, #0
 80029bc:	d104      	bne.n	80029c8 <HAL_UART_IRQHandler+0x118>
            ((cr3its & USART_CR3_EIE) != 0U)))
 80029be:	697b      	ldr	r3, [r7, #20]
 80029c0:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d00b      	beq.n	80029e0 <HAL_UART_IRQHandler+0x130>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	2208      	movs	r2, #8
 80029ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 80029d6:	f043 0208 	orr.w	r2, r3, #8
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 80029e0:	69fb      	ldr	r3, [r7, #28]
 80029e2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d011      	beq.n	8002a0e <HAL_UART_IRQHandler+0x15e>
 80029ea:	69bb      	ldr	r3, [r7, #24]
 80029ec:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 80029f0:	2b00      	cmp	r3, #0
 80029f2:	d00c      	beq.n	8002a0e <HAL_UART_IRQHandler+0x15e>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80029f4:	687b      	ldr	r3, [r7, #4]
 80029f6:	681b      	ldr	r3, [r3, #0]
 80029f8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80029fc:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a04:	f043 0220 	orr.w	r2, r3, #32
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8002a0e:	687b      	ldr	r3, [r7, #4]
 8002a10:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a14:	2b00      	cmp	r3, #0
 8002a16:	f000 812d 	beq.w	8002c74 <HAL_UART_IRQHandler+0x3c4>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8002a1a:	69fb      	ldr	r3, [r7, #28]
 8002a1c:	f003 0320 	and.w	r3, r3, #32
 8002a20:	2b00      	cmp	r3, #0
 8002a22:	d00c      	beq.n	8002a3e <HAL_UART_IRQHandler+0x18e>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8002a24:	69bb      	ldr	r3, [r7, #24]
 8002a26:	f003 0320 	and.w	r3, r3, #32
 8002a2a:	2b00      	cmp	r3, #0
 8002a2c:	d007      	beq.n	8002a3e <HAL_UART_IRQHandler+0x18e>
      {
        if (huart->RxISR != NULL)
 8002a2e:	687b      	ldr	r3, [r7, #4]
 8002a30:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	d003      	beq.n	8002a3e <HAL_UART_IRQHandler+0x18e>
        {
          huart->RxISR(huart);
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002a3a:	6878      	ldr	r0, [r7, #4]
 8002a3c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8002a3e:	687b      	ldr	r3, [r7, #4]
 8002a40:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002a44:	60fb      	str	r3, [r7, #12]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a46:	687b      	ldr	r3, [r7, #4]
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	689b      	ldr	r3, [r3, #8]
 8002a4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a50:	2b40      	cmp	r3, #64	; 0x40
 8002a52:	d004      	beq.n	8002a5e <HAL_UART_IRQHandler+0x1ae>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8002a54:	68fb      	ldr	r3, [r7, #12]
 8002a56:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8002a5a:	2b00      	cmp	r3, #0
 8002a5c:	d031      	beq.n	8002ac2 <HAL_UART_IRQHandler+0x212>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002a5e:	6878      	ldr	r0, [r7, #4]
 8002a60:	f000 fd6e 	bl	8003540 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	689b      	ldr	r3, [r3, #8]
 8002a6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002a6e:	2b40      	cmp	r3, #64	; 0x40
 8002a70:	d123      	bne.n	8002aba <HAL_UART_IRQHandler+0x20a>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002a72:	687b      	ldr	r3, [r7, #4]
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	689a      	ldr	r2, [r3, #8]
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	681b      	ldr	r3, [r3, #0]
 8002a7c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002a80:	609a      	str	r2, [r3, #8]

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8002a82:	687b      	ldr	r3, [r7, #4]
 8002a84:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	d013      	beq.n	8002ab2 <HAL_UART_IRQHandler+0x202>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8002a8a:	687b      	ldr	r3, [r7, #4]
 8002a8c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a8e:	4a4a      	ldr	r2, [pc, #296]	; (8002bb8 <HAL_UART_IRQHandler+0x308>)
 8002a90:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002a92:	687b      	ldr	r3, [r7, #4]
 8002a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002a96:	4618      	mov	r0, r3
 8002a98:	f7fe fa8d 	bl	8000fb6 <HAL_DMA_Abort_IT>
 8002a9c:	4603      	mov	r3, r0
 8002a9e:	2b00      	cmp	r3, #0
 8002aa0:	d017      	beq.n	8002ad2 <HAL_UART_IRQHandler+0x222>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002aa2:	687b      	ldr	r3, [r7, #4]
 8002aa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002aa6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002aa8:	687a      	ldr	r2, [r7, #4]
 8002aaa:	6f12      	ldr	r2, [r2, #112]	; 0x70
 8002aac:	4610      	mov	r0, r2
 8002aae:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab0:	e00f      	b.n	8002ad2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002ab2:	6878      	ldr	r0, [r7, #4]
 8002ab4:	f000 f8f2 	bl	8002c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ab8:	e00b      	b.n	8002ad2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8002aba:	6878      	ldr	r0, [r7, #4]
 8002abc:	f000 f8ee 	bl	8002c9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ac0:	e007      	b.n	8002ad2 <HAL_UART_IRQHandler+0x222>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8002ac2:	6878      	ldr	r0, [r7, #4]
 8002ac4:	f000 f8ea 	bl	8002c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	2200      	movs	r2, #0
 8002acc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      }
    }
    return;
 8002ad0:	e0d0      	b.n	8002c74 <HAL_UART_IRQHandler+0x3c4>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002ad2:	bf00      	nop
    return;
 8002ad4:	e0ce      	b.n	8002c74 <HAL_UART_IRQHandler+0x3c4>

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002ad6:	687b      	ldr	r3, [r7, #4]
 8002ad8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ada:	2b01      	cmp	r3, #1
 8002adc:	f040 80a7 	bne.w	8002c2e <HAL_UART_IRQHandler+0x37e>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8002ae0:	69fb      	ldr	r3, [r7, #28]
 8002ae2:	f003 0310 	and.w	r3, r3, #16
 8002ae6:	2b00      	cmp	r3, #0
 8002ae8:	f000 80a1 	beq.w	8002c2e <HAL_UART_IRQHandler+0x37e>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8002aec:	69bb      	ldr	r3, [r7, #24]
 8002aee:	f003 0310 	and.w	r3, r3, #16
 8002af2:	2b00      	cmp	r3, #0
 8002af4:	f000 809b 	beq.w	8002c2e <HAL_UART_IRQHandler+0x37e>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	2210      	movs	r2, #16
 8002afe:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b0a:	2b40      	cmp	r3, #64	; 0x40
 8002b0c:	d156      	bne.n	8002bbc <HAL_UART_IRQHandler+0x30c>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002b0e:	687b      	ldr	r3, [r7, #4]
 8002b10:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	685b      	ldr	r3, [r3, #4]
 8002b16:	813b      	strh	r3, [r7, #8]
      if ((nb_remaining_rx_data > 0U)
 8002b18:	893b      	ldrh	r3, [r7, #8]
 8002b1a:	2b00      	cmp	r3, #0
 8002b1c:	f000 80ac 	beq.w	8002c78 <HAL_UART_IRQHandler+0x3c8>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8002b26:	893a      	ldrh	r2, [r7, #8]
 8002b28:	429a      	cmp	r2, r3
 8002b2a:	f080 80a5 	bcs.w	8002c78 <HAL_UART_IRQHandler+0x3c8>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	893a      	ldrh	r2, [r7, #8]
 8002b32:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b3a:	69db      	ldr	r3, [r3, #28]
 8002b3c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002b40:	d02a      	beq.n	8002b98 <HAL_UART_IRQHandler+0x2e8>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8002b42:	687b      	ldr	r3, [r7, #4]
 8002b44:	681b      	ldr	r3, [r3, #0]
 8002b46:	681a      	ldr	r2, [r3, #0]
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002b50:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	689a      	ldr	r2, [r3, #8]
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f022 0201 	bic.w	r2, r2, #1
 8002b60:	609a      	str	r2, [r3, #8]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002b62:	687b      	ldr	r3, [r7, #4]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	689a      	ldr	r2, [r3, #8]
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8002b70:	609a      	str	r2, [r3, #8]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	2220      	movs	r2, #32
 8002b76:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	2200      	movs	r2, #0
 8002b7c:	661a      	str	r2, [r3, #96]	; 0x60

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	681a      	ldr	r2, [r3, #0]
 8002b84:	687b      	ldr	r3, [r7, #4]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f022 0210 	bic.w	r2, r2, #16
 8002b8c:	601a      	str	r2, [r3, #0]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002b92:	4618      	mov	r0, r3
 8002b94:	f7fe f99f 	bl	8000ed6 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002ba4:	b29b      	uxth	r3, r3
 8002ba6:	1ad3      	subs	r3, r2, r3
 8002ba8:	b29b      	uxth	r3, r3
 8002baa:	4619      	mov	r1, r3
 8002bac:	6878      	ldr	r0, [r7, #4]
 8002bae:	f000 f87f 	bl	8002cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002bb2:	e061      	b.n	8002c78 <HAL_UART_IRQHandler+0x3c8>
 8002bb4:	04000120 	.word	0x04000120
 8002bb8:	0800359f 	.word	0x0800359f
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8002bbc:	687b      	ldr	r3, [r7, #4]
 8002bbe:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bc8:	b29b      	uxth	r3, r3
 8002bca:	1ad3      	subs	r3, r2, r3
 8002bcc:	817b      	strh	r3, [r7, #10]
      if ((huart->RxXferCount > 0U)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8002bd4:	b29b      	uxth	r3, r3
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d050      	beq.n	8002c7c <HAL_UART_IRQHandler+0x3cc>
          && (nb_rx_data > 0U))
 8002bda:	897b      	ldrh	r3, [r7, #10]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d04d      	beq.n	8002c7c <HAL_UART_IRQHandler+0x3cc>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8002bee:	601a      	str	r2, [r3, #0]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	681b      	ldr	r3, [r3, #0]
 8002bf4:	689a      	ldr	r2, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	f022 0201 	bic.w	r2, r2, #1
 8002bfe:	609a      	str	r2, [r3, #8]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	2220      	movs	r2, #32
 8002c04:	67da      	str	r2, [r3, #124]	; 0x7c
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	2200      	movs	r2, #0
 8002c0a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	2200      	movs	r2, #0
 8002c10:	665a      	str	r2, [r3, #100]	; 0x64

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	681a      	ldr	r2, [r3, #0]
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	681b      	ldr	r3, [r3, #0]
 8002c1c:	f022 0210 	bic.w	r2, r2, #16
 8002c20:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8002c22:	897b      	ldrh	r3, [r7, #10]
 8002c24:	4619      	mov	r1, r3
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f000 f842 	bl	8002cb0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8002c2c:	e026      	b.n	8002c7c <HAL_UART_IRQHandler+0x3cc>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8002c2e:	69fb      	ldr	r3, [r7, #28]
 8002c30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d00d      	beq.n	8002c54 <HAL_UART_IRQHandler+0x3a4>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8002c38:	69bb      	ldr	r3, [r7, #24]
 8002c3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002c3e:	2b00      	cmp	r3, #0
 8002c40:	d008      	beq.n	8002c54 <HAL_UART_IRQHandler+0x3a4>
  {
    if (huart->TxISR != NULL)
 8002c42:	687b      	ldr	r3, [r7, #4]
 8002c44:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c46:	2b00      	cmp	r3, #0
 8002c48:	d01a      	beq.n	8002c80 <HAL_UART_IRQHandler+0x3d0>
    {
      huart->TxISR(huart);
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	4798      	blx	r3
    }
    return;
 8002c52:	e015      	b.n	8002c80 <HAL_UART_IRQHandler+0x3d0>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8002c54:	69fb      	ldr	r3, [r7, #28]
 8002c56:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c5a:	2b00      	cmp	r3, #0
 8002c5c:	d011      	beq.n	8002c82 <HAL_UART_IRQHandler+0x3d2>
 8002c5e:	69bb      	ldr	r3, [r7, #24]
 8002c60:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d00c      	beq.n	8002c82 <HAL_UART_IRQHandler+0x3d2>
  {
    UART_EndTransmit_IT(huart);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fcae 	bl	80035ca <UART_EndTransmit_IT>
    return;
 8002c6e:	e008      	b.n	8002c82 <HAL_UART_IRQHandler+0x3d2>
      return;
 8002c70:	bf00      	nop
 8002c72:	e006      	b.n	8002c82 <HAL_UART_IRQHandler+0x3d2>
    return;
 8002c74:	bf00      	nop
 8002c76:	e004      	b.n	8002c82 <HAL_UART_IRQHandler+0x3d2>
      return;
 8002c78:	bf00      	nop
 8002c7a:	e002      	b.n	8002c82 <HAL_UART_IRQHandler+0x3d2>
      return;
 8002c7c:	bf00      	nop
 8002c7e:	e000      	b.n	8002c82 <HAL_UART_IRQHandler+0x3d2>
    return;
 8002c80:	bf00      	nop
  }

}
 8002c82:	3720      	adds	r7, #32
 8002c84:	46bd      	mov	sp, r7
 8002c86:	bd80      	pop	{r7, pc}

08002c88 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8002c88:	b480      	push	{r7}
 8002c8a:	b083      	sub	sp, #12
 8002c8c:	af00      	add	r7, sp, #0
 8002c8e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8002c90:	bf00      	nop
 8002c92:	370c      	adds	r7, #12
 8002c94:	46bd      	mov	sp, r7
 8002c96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c9a:	4770      	bx	lr

08002c9c <HAL_UART_ErrorCallback>:
  * @brief  UART error callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8002c9c:	b480      	push	{r7}
 8002c9e:	b083      	sub	sp, #12
 8002ca0:	af00      	add	r7, sp, #0
 8002ca2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_ErrorCallback can be implemented in the user file.
   */
}
 8002ca4:	bf00      	nop
 8002ca6:	370c      	adds	r7, #12
 8002ca8:	46bd      	mov	sp, r7
 8002caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cae:	4770      	bx	lr

08002cb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8002cb0:	b480      	push	{r7}
 8002cb2:	b083      	sub	sp, #12
 8002cb4:	af00      	add	r7, sp, #0
 8002cb6:	6078      	str	r0, [r7, #4]
 8002cb8:	460b      	mov	r3, r1
 8002cba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8002cbc:	bf00      	nop
 8002cbe:	370c      	adds	r7, #12
 8002cc0:	46bd      	mov	sp, r7
 8002cc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc6:	4770      	bx	lr

08002cc8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002cc8:	b580      	push	{r7, lr}
 8002cca:	b088      	sub	sp, #32
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8002cd0:	2300      	movs	r3, #0
 8002cd2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8002cd4:	687b      	ldr	r3, [r7, #4]
 8002cd6:	689a      	ldr	r2, [r3, #8]
 8002cd8:	687b      	ldr	r3, [r7, #4]
 8002cda:	691b      	ldr	r3, [r3, #16]
 8002cdc:	431a      	orrs	r2, r3
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	695b      	ldr	r3, [r3, #20]
 8002ce2:	431a      	orrs	r2, r3
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	69db      	ldr	r3, [r3, #28]
 8002ce8:	4313      	orrs	r3, r2
 8002cea:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	681a      	ldr	r2, [r3, #0]
 8002cf2:	4ba7      	ldr	r3, [pc, #668]	; (8002f90 <UART_SetConfig+0x2c8>)
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	687a      	ldr	r2, [r7, #4]
 8002cf8:	6812      	ldr	r2, [r2, #0]
 8002cfa:	6979      	ldr	r1, [r7, #20]
 8002cfc:	430b      	orrs	r3, r1
 8002cfe:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	685b      	ldr	r3, [r3, #4]
 8002d06:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002d0a:	687b      	ldr	r3, [r7, #4]
 8002d0c:	68da      	ldr	r2, [r3, #12]
 8002d0e:	687b      	ldr	r3, [r7, #4]
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	430a      	orrs	r2, r1
 8002d14:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	699b      	ldr	r3, [r3, #24]
 8002d1a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	6a1b      	ldr	r3, [r3, #32]
 8002d20:	697a      	ldr	r2, [r7, #20]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	689b      	ldr	r3, [r3, #8]
 8002d2c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	697a      	ldr	r2, [r7, #20]
 8002d36:	430a      	orrs	r2, r1
 8002d38:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	681b      	ldr	r3, [r3, #0]
 8002d3e:	4a95      	ldr	r2, [pc, #596]	; (8002f94 <UART_SetConfig+0x2cc>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d120      	bne.n	8002d86 <UART_SetConfig+0xbe>
 8002d44:	4b94      	ldr	r3, [pc, #592]	; (8002f98 <UART_SetConfig+0x2d0>)
 8002d46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d4a:	f003 0303 	and.w	r3, r3, #3
 8002d4e:	2b03      	cmp	r3, #3
 8002d50:	d816      	bhi.n	8002d80 <UART_SetConfig+0xb8>
 8002d52:	a201      	add	r2, pc, #4	; (adr r2, 8002d58 <UART_SetConfig+0x90>)
 8002d54:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d58:	08002d69 	.word	0x08002d69
 8002d5c:	08002d75 	.word	0x08002d75
 8002d60:	08002d6f 	.word	0x08002d6f
 8002d64:	08002d7b 	.word	0x08002d7b
 8002d68:	2301      	movs	r3, #1
 8002d6a:	77fb      	strb	r3, [r7, #31]
 8002d6c:	e14f      	b.n	800300e <UART_SetConfig+0x346>
 8002d6e:	2302      	movs	r3, #2
 8002d70:	77fb      	strb	r3, [r7, #31]
 8002d72:	e14c      	b.n	800300e <UART_SetConfig+0x346>
 8002d74:	2304      	movs	r3, #4
 8002d76:	77fb      	strb	r3, [r7, #31]
 8002d78:	e149      	b.n	800300e <UART_SetConfig+0x346>
 8002d7a:	2308      	movs	r3, #8
 8002d7c:	77fb      	strb	r3, [r7, #31]
 8002d7e:	e146      	b.n	800300e <UART_SetConfig+0x346>
 8002d80:	2310      	movs	r3, #16
 8002d82:	77fb      	strb	r3, [r7, #31]
 8002d84:	e143      	b.n	800300e <UART_SetConfig+0x346>
 8002d86:	687b      	ldr	r3, [r7, #4]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	4a84      	ldr	r2, [pc, #528]	; (8002f9c <UART_SetConfig+0x2d4>)
 8002d8c:	4293      	cmp	r3, r2
 8002d8e:	d132      	bne.n	8002df6 <UART_SetConfig+0x12e>
 8002d90:	4b81      	ldr	r3, [pc, #516]	; (8002f98 <UART_SetConfig+0x2d0>)
 8002d92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d96:	f003 030c 	and.w	r3, r3, #12
 8002d9a:	2b0c      	cmp	r3, #12
 8002d9c:	d828      	bhi.n	8002df0 <UART_SetConfig+0x128>
 8002d9e:	a201      	add	r2, pc, #4	; (adr r2, 8002da4 <UART_SetConfig+0xdc>)
 8002da0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002da4:	08002dd9 	.word	0x08002dd9
 8002da8:	08002df1 	.word	0x08002df1
 8002dac:	08002df1 	.word	0x08002df1
 8002db0:	08002df1 	.word	0x08002df1
 8002db4:	08002de5 	.word	0x08002de5
 8002db8:	08002df1 	.word	0x08002df1
 8002dbc:	08002df1 	.word	0x08002df1
 8002dc0:	08002df1 	.word	0x08002df1
 8002dc4:	08002ddf 	.word	0x08002ddf
 8002dc8:	08002df1 	.word	0x08002df1
 8002dcc:	08002df1 	.word	0x08002df1
 8002dd0:	08002df1 	.word	0x08002df1
 8002dd4:	08002deb 	.word	0x08002deb
 8002dd8:	2300      	movs	r3, #0
 8002dda:	77fb      	strb	r3, [r7, #31]
 8002ddc:	e117      	b.n	800300e <UART_SetConfig+0x346>
 8002dde:	2302      	movs	r3, #2
 8002de0:	77fb      	strb	r3, [r7, #31]
 8002de2:	e114      	b.n	800300e <UART_SetConfig+0x346>
 8002de4:	2304      	movs	r3, #4
 8002de6:	77fb      	strb	r3, [r7, #31]
 8002de8:	e111      	b.n	800300e <UART_SetConfig+0x346>
 8002dea:	2308      	movs	r3, #8
 8002dec:	77fb      	strb	r3, [r7, #31]
 8002dee:	e10e      	b.n	800300e <UART_SetConfig+0x346>
 8002df0:	2310      	movs	r3, #16
 8002df2:	77fb      	strb	r3, [r7, #31]
 8002df4:	e10b      	b.n	800300e <UART_SetConfig+0x346>
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	4a69      	ldr	r2, [pc, #420]	; (8002fa0 <UART_SetConfig+0x2d8>)
 8002dfc:	4293      	cmp	r3, r2
 8002dfe:	d120      	bne.n	8002e42 <UART_SetConfig+0x17a>
 8002e00:	4b65      	ldr	r3, [pc, #404]	; (8002f98 <UART_SetConfig+0x2d0>)
 8002e02:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e06:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8002e0a:	2b30      	cmp	r3, #48	; 0x30
 8002e0c:	d013      	beq.n	8002e36 <UART_SetConfig+0x16e>
 8002e0e:	2b30      	cmp	r3, #48	; 0x30
 8002e10:	d814      	bhi.n	8002e3c <UART_SetConfig+0x174>
 8002e12:	2b20      	cmp	r3, #32
 8002e14:	d009      	beq.n	8002e2a <UART_SetConfig+0x162>
 8002e16:	2b20      	cmp	r3, #32
 8002e18:	d810      	bhi.n	8002e3c <UART_SetConfig+0x174>
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <UART_SetConfig+0x15c>
 8002e1e:	2b10      	cmp	r3, #16
 8002e20:	d006      	beq.n	8002e30 <UART_SetConfig+0x168>
 8002e22:	e00b      	b.n	8002e3c <UART_SetConfig+0x174>
 8002e24:	2300      	movs	r3, #0
 8002e26:	77fb      	strb	r3, [r7, #31]
 8002e28:	e0f1      	b.n	800300e <UART_SetConfig+0x346>
 8002e2a:	2302      	movs	r3, #2
 8002e2c:	77fb      	strb	r3, [r7, #31]
 8002e2e:	e0ee      	b.n	800300e <UART_SetConfig+0x346>
 8002e30:	2304      	movs	r3, #4
 8002e32:	77fb      	strb	r3, [r7, #31]
 8002e34:	e0eb      	b.n	800300e <UART_SetConfig+0x346>
 8002e36:	2308      	movs	r3, #8
 8002e38:	77fb      	strb	r3, [r7, #31]
 8002e3a:	e0e8      	b.n	800300e <UART_SetConfig+0x346>
 8002e3c:	2310      	movs	r3, #16
 8002e3e:	77fb      	strb	r3, [r7, #31]
 8002e40:	e0e5      	b.n	800300e <UART_SetConfig+0x346>
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	681b      	ldr	r3, [r3, #0]
 8002e46:	4a57      	ldr	r2, [pc, #348]	; (8002fa4 <UART_SetConfig+0x2dc>)
 8002e48:	4293      	cmp	r3, r2
 8002e4a:	d120      	bne.n	8002e8e <UART_SetConfig+0x1c6>
 8002e4c:	4b52      	ldr	r3, [pc, #328]	; (8002f98 <UART_SetConfig+0x2d0>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8002e56:	2bc0      	cmp	r3, #192	; 0xc0
 8002e58:	d013      	beq.n	8002e82 <UART_SetConfig+0x1ba>
 8002e5a:	2bc0      	cmp	r3, #192	; 0xc0
 8002e5c:	d814      	bhi.n	8002e88 <UART_SetConfig+0x1c0>
 8002e5e:	2b80      	cmp	r3, #128	; 0x80
 8002e60:	d009      	beq.n	8002e76 <UART_SetConfig+0x1ae>
 8002e62:	2b80      	cmp	r3, #128	; 0x80
 8002e64:	d810      	bhi.n	8002e88 <UART_SetConfig+0x1c0>
 8002e66:	2b00      	cmp	r3, #0
 8002e68:	d002      	beq.n	8002e70 <UART_SetConfig+0x1a8>
 8002e6a:	2b40      	cmp	r3, #64	; 0x40
 8002e6c:	d006      	beq.n	8002e7c <UART_SetConfig+0x1b4>
 8002e6e:	e00b      	b.n	8002e88 <UART_SetConfig+0x1c0>
 8002e70:	2300      	movs	r3, #0
 8002e72:	77fb      	strb	r3, [r7, #31]
 8002e74:	e0cb      	b.n	800300e <UART_SetConfig+0x346>
 8002e76:	2302      	movs	r3, #2
 8002e78:	77fb      	strb	r3, [r7, #31]
 8002e7a:	e0c8      	b.n	800300e <UART_SetConfig+0x346>
 8002e7c:	2304      	movs	r3, #4
 8002e7e:	77fb      	strb	r3, [r7, #31]
 8002e80:	e0c5      	b.n	800300e <UART_SetConfig+0x346>
 8002e82:	2308      	movs	r3, #8
 8002e84:	77fb      	strb	r3, [r7, #31]
 8002e86:	e0c2      	b.n	800300e <UART_SetConfig+0x346>
 8002e88:	2310      	movs	r3, #16
 8002e8a:	77fb      	strb	r3, [r7, #31]
 8002e8c:	e0bf      	b.n	800300e <UART_SetConfig+0x346>
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	4a45      	ldr	r2, [pc, #276]	; (8002fa8 <UART_SetConfig+0x2e0>)
 8002e94:	4293      	cmp	r3, r2
 8002e96:	d125      	bne.n	8002ee4 <UART_SetConfig+0x21c>
 8002e98:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <UART_SetConfig+0x2d0>)
 8002e9a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e9e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002ea2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002ea6:	d017      	beq.n	8002ed8 <UART_SetConfig+0x210>
 8002ea8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002eac:	d817      	bhi.n	8002ede <UART_SetConfig+0x216>
 8002eae:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb2:	d00b      	beq.n	8002ecc <UART_SetConfig+0x204>
 8002eb4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002eb8:	d811      	bhi.n	8002ede <UART_SetConfig+0x216>
 8002eba:	2b00      	cmp	r3, #0
 8002ebc:	d003      	beq.n	8002ec6 <UART_SetConfig+0x1fe>
 8002ebe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002ec2:	d006      	beq.n	8002ed2 <UART_SetConfig+0x20a>
 8002ec4:	e00b      	b.n	8002ede <UART_SetConfig+0x216>
 8002ec6:	2300      	movs	r3, #0
 8002ec8:	77fb      	strb	r3, [r7, #31]
 8002eca:	e0a0      	b.n	800300e <UART_SetConfig+0x346>
 8002ecc:	2302      	movs	r3, #2
 8002ece:	77fb      	strb	r3, [r7, #31]
 8002ed0:	e09d      	b.n	800300e <UART_SetConfig+0x346>
 8002ed2:	2304      	movs	r3, #4
 8002ed4:	77fb      	strb	r3, [r7, #31]
 8002ed6:	e09a      	b.n	800300e <UART_SetConfig+0x346>
 8002ed8:	2308      	movs	r3, #8
 8002eda:	77fb      	strb	r3, [r7, #31]
 8002edc:	e097      	b.n	800300e <UART_SetConfig+0x346>
 8002ede:	2310      	movs	r3, #16
 8002ee0:	77fb      	strb	r3, [r7, #31]
 8002ee2:	e094      	b.n	800300e <UART_SetConfig+0x346>
 8002ee4:	687b      	ldr	r3, [r7, #4]
 8002ee6:	681b      	ldr	r3, [r3, #0]
 8002ee8:	4a30      	ldr	r2, [pc, #192]	; (8002fac <UART_SetConfig+0x2e4>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d125      	bne.n	8002f3a <UART_SetConfig+0x272>
 8002eee:	4b2a      	ldr	r3, [pc, #168]	; (8002f98 <UART_SetConfig+0x2d0>)
 8002ef0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002ef4:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8002ef8:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002efc:	d017      	beq.n	8002f2e <UART_SetConfig+0x266>
 8002efe:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8002f02:	d817      	bhi.n	8002f34 <UART_SetConfig+0x26c>
 8002f04:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f08:	d00b      	beq.n	8002f22 <UART_SetConfig+0x25a>
 8002f0a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8002f0e:	d811      	bhi.n	8002f34 <UART_SetConfig+0x26c>
 8002f10:	2b00      	cmp	r3, #0
 8002f12:	d003      	beq.n	8002f1c <UART_SetConfig+0x254>
 8002f14:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f18:	d006      	beq.n	8002f28 <UART_SetConfig+0x260>
 8002f1a:	e00b      	b.n	8002f34 <UART_SetConfig+0x26c>
 8002f1c:	2301      	movs	r3, #1
 8002f1e:	77fb      	strb	r3, [r7, #31]
 8002f20:	e075      	b.n	800300e <UART_SetConfig+0x346>
 8002f22:	2302      	movs	r3, #2
 8002f24:	77fb      	strb	r3, [r7, #31]
 8002f26:	e072      	b.n	800300e <UART_SetConfig+0x346>
 8002f28:	2304      	movs	r3, #4
 8002f2a:	77fb      	strb	r3, [r7, #31]
 8002f2c:	e06f      	b.n	800300e <UART_SetConfig+0x346>
 8002f2e:	2308      	movs	r3, #8
 8002f30:	77fb      	strb	r3, [r7, #31]
 8002f32:	e06c      	b.n	800300e <UART_SetConfig+0x346>
 8002f34:	2310      	movs	r3, #16
 8002f36:	77fb      	strb	r3, [r7, #31]
 8002f38:	e069      	b.n	800300e <UART_SetConfig+0x346>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	681b      	ldr	r3, [r3, #0]
 8002f3e:	4a1c      	ldr	r2, [pc, #112]	; (8002fb0 <UART_SetConfig+0x2e8>)
 8002f40:	4293      	cmp	r3, r2
 8002f42:	d137      	bne.n	8002fb4 <UART_SetConfig+0x2ec>
 8002f44:	4b14      	ldr	r3, [pc, #80]	; (8002f98 <UART_SetConfig+0x2d0>)
 8002f46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f4a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8002f4e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f52:	d017      	beq.n	8002f84 <UART_SetConfig+0x2bc>
 8002f54:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8002f58:	d817      	bhi.n	8002f8a <UART_SetConfig+0x2c2>
 8002f5a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f5e:	d00b      	beq.n	8002f78 <UART_SetConfig+0x2b0>
 8002f60:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002f64:	d811      	bhi.n	8002f8a <UART_SetConfig+0x2c2>
 8002f66:	2b00      	cmp	r3, #0
 8002f68:	d003      	beq.n	8002f72 <UART_SetConfig+0x2aa>
 8002f6a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8002f6e:	d006      	beq.n	8002f7e <UART_SetConfig+0x2b6>
 8002f70:	e00b      	b.n	8002f8a <UART_SetConfig+0x2c2>
 8002f72:	2300      	movs	r3, #0
 8002f74:	77fb      	strb	r3, [r7, #31]
 8002f76:	e04a      	b.n	800300e <UART_SetConfig+0x346>
 8002f78:	2302      	movs	r3, #2
 8002f7a:	77fb      	strb	r3, [r7, #31]
 8002f7c:	e047      	b.n	800300e <UART_SetConfig+0x346>
 8002f7e:	2304      	movs	r3, #4
 8002f80:	77fb      	strb	r3, [r7, #31]
 8002f82:	e044      	b.n	800300e <UART_SetConfig+0x346>
 8002f84:	2308      	movs	r3, #8
 8002f86:	77fb      	strb	r3, [r7, #31]
 8002f88:	e041      	b.n	800300e <UART_SetConfig+0x346>
 8002f8a:	2310      	movs	r3, #16
 8002f8c:	77fb      	strb	r3, [r7, #31]
 8002f8e:	e03e      	b.n	800300e <UART_SetConfig+0x346>
 8002f90:	efff69f3 	.word	0xefff69f3
 8002f94:	40011000 	.word	0x40011000
 8002f98:	40023800 	.word	0x40023800
 8002f9c:	40004400 	.word	0x40004400
 8002fa0:	40004800 	.word	0x40004800
 8002fa4:	40004c00 	.word	0x40004c00
 8002fa8:	40005000 	.word	0x40005000
 8002fac:	40011400 	.word	0x40011400
 8002fb0:	40007800 	.word	0x40007800
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	681b      	ldr	r3, [r3, #0]
 8002fb8:	4a71      	ldr	r2, [pc, #452]	; (8003180 <UART_SetConfig+0x4b8>)
 8002fba:	4293      	cmp	r3, r2
 8002fbc:	d125      	bne.n	800300a <UART_SetConfig+0x342>
 8002fbe:	4b71      	ldr	r3, [pc, #452]	; (8003184 <UART_SetConfig+0x4bc>)
 8002fc0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002fc4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8002fc8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fcc:	d017      	beq.n	8002ffe <UART_SetConfig+0x336>
 8002fce:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8002fd2:	d817      	bhi.n	8003004 <UART_SetConfig+0x33c>
 8002fd4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fd8:	d00b      	beq.n	8002ff2 <UART_SetConfig+0x32a>
 8002fda:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002fde:	d811      	bhi.n	8003004 <UART_SetConfig+0x33c>
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <UART_SetConfig+0x324>
 8002fe4:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002fe8:	d006      	beq.n	8002ff8 <UART_SetConfig+0x330>
 8002fea:	e00b      	b.n	8003004 <UART_SetConfig+0x33c>
 8002fec:	2300      	movs	r3, #0
 8002fee:	77fb      	strb	r3, [r7, #31]
 8002ff0:	e00d      	b.n	800300e <UART_SetConfig+0x346>
 8002ff2:	2302      	movs	r3, #2
 8002ff4:	77fb      	strb	r3, [r7, #31]
 8002ff6:	e00a      	b.n	800300e <UART_SetConfig+0x346>
 8002ff8:	2304      	movs	r3, #4
 8002ffa:	77fb      	strb	r3, [r7, #31]
 8002ffc:	e007      	b.n	800300e <UART_SetConfig+0x346>
 8002ffe:	2308      	movs	r3, #8
 8003000:	77fb      	strb	r3, [r7, #31]
 8003002:	e004      	b.n	800300e <UART_SetConfig+0x346>
 8003004:	2310      	movs	r3, #16
 8003006:	77fb      	strb	r3, [r7, #31]
 8003008:	e001      	b.n	800300e <UART_SetConfig+0x346>
 800300a:	2310      	movs	r3, #16
 800300c:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	69db      	ldr	r3, [r3, #28]
 8003012:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003016:	d15b      	bne.n	80030d0 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8003018:	7ffb      	ldrb	r3, [r7, #31]
 800301a:	2b08      	cmp	r3, #8
 800301c:	d827      	bhi.n	800306e <UART_SetConfig+0x3a6>
 800301e:	a201      	add	r2, pc, #4	; (adr r2, 8003024 <UART_SetConfig+0x35c>)
 8003020:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003024:	08003049 	.word	0x08003049
 8003028:	08003051 	.word	0x08003051
 800302c:	08003059 	.word	0x08003059
 8003030:	0800306f 	.word	0x0800306f
 8003034:	0800305f 	.word	0x0800305f
 8003038:	0800306f 	.word	0x0800306f
 800303c:	0800306f 	.word	0x0800306f
 8003040:	0800306f 	.word	0x0800306f
 8003044:	08003067 	.word	0x08003067
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003048:	f7fe ff8e 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 800304c:	61b8      	str	r0, [r7, #24]
        break;
 800304e:	e013      	b.n	8003078 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003050:	f7fe ff9e 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 8003054:	61b8      	str	r0, [r7, #24]
        break;
 8003056:	e00f      	b.n	8003078 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003058:	4b4b      	ldr	r3, [pc, #300]	; (8003188 <UART_SetConfig+0x4c0>)
 800305a:	61bb      	str	r3, [r7, #24]
        break;
 800305c:	e00c      	b.n	8003078 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800305e:	f7fe fe95 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 8003062:	61b8      	str	r0, [r7, #24]
        break;
 8003064:	e008      	b.n	8003078 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8003066:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800306a:	61bb      	str	r3, [r7, #24]
        break;
 800306c:	e004      	b.n	8003078 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 800306e:	2300      	movs	r3, #0
 8003070:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	77bb      	strb	r3, [r7, #30]
        break;
 8003076:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8003078:	69bb      	ldr	r3, [r7, #24]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d074      	beq.n	8003168 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800307e:	69bb      	ldr	r3, [r7, #24]
 8003080:	005a      	lsls	r2, r3, #1
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	685b      	ldr	r3, [r3, #4]
 8003086:	085b      	lsrs	r3, r3, #1
 8003088:	441a      	add	r2, r3
 800308a:	687b      	ldr	r3, [r7, #4]
 800308c:	685b      	ldr	r3, [r3, #4]
 800308e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003092:	b29b      	uxth	r3, r3
 8003094:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8003096:	693b      	ldr	r3, [r7, #16]
 8003098:	2b0f      	cmp	r3, #15
 800309a:	d916      	bls.n	80030ca <UART_SetConfig+0x402>
 800309c:	693b      	ldr	r3, [r7, #16]
 800309e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030a2:	d212      	bcs.n	80030ca <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80030a4:	693b      	ldr	r3, [r7, #16]
 80030a6:	b29b      	uxth	r3, r3
 80030a8:	f023 030f 	bic.w	r3, r3, #15
 80030ac:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80030ae:	693b      	ldr	r3, [r7, #16]
 80030b0:	085b      	lsrs	r3, r3, #1
 80030b2:	b29b      	uxth	r3, r3
 80030b4:	f003 0307 	and.w	r3, r3, #7
 80030b8:	b29a      	uxth	r2, r3
 80030ba:	89fb      	ldrh	r3, [r7, #14]
 80030bc:	4313      	orrs	r3, r2
 80030be:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	681b      	ldr	r3, [r3, #0]
 80030c4:	89fa      	ldrh	r2, [r7, #14]
 80030c6:	60da      	str	r2, [r3, #12]
 80030c8:	e04e      	b.n	8003168 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	77bb      	strb	r3, [r7, #30]
 80030ce:	e04b      	b.n	8003168 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80030d0:	7ffb      	ldrb	r3, [r7, #31]
 80030d2:	2b08      	cmp	r3, #8
 80030d4:	d827      	bhi.n	8003126 <UART_SetConfig+0x45e>
 80030d6:	a201      	add	r2, pc, #4	; (adr r2, 80030dc <UART_SetConfig+0x414>)
 80030d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80030dc:	08003101 	.word	0x08003101
 80030e0:	08003109 	.word	0x08003109
 80030e4:	08003111 	.word	0x08003111
 80030e8:	08003127 	.word	0x08003127
 80030ec:	08003117 	.word	0x08003117
 80030f0:	08003127 	.word	0x08003127
 80030f4:	08003127 	.word	0x08003127
 80030f8:	08003127 	.word	0x08003127
 80030fc:	0800311f 	.word	0x0800311f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8003100:	f7fe ff32 	bl	8001f68 <HAL_RCC_GetPCLK1Freq>
 8003104:	61b8      	str	r0, [r7, #24]
        break;
 8003106:	e013      	b.n	8003130 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8003108:	f7fe ff42 	bl	8001f90 <HAL_RCC_GetPCLK2Freq>
 800310c:	61b8      	str	r0, [r7, #24]
        break;
 800310e:	e00f      	b.n	8003130 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8003110:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <UART_SetConfig+0x4c0>)
 8003112:	61bb      	str	r3, [r7, #24]
        break;
 8003114:	e00c      	b.n	8003130 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8003116:	f7fe fe39 	bl	8001d8c <HAL_RCC_GetSysClockFreq>
 800311a:	61b8      	str	r0, [r7, #24]
        break;
 800311c:	e008      	b.n	8003130 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800311e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003122:	61bb      	str	r3, [r7, #24]
        break;
 8003124:	e004      	b.n	8003130 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 8003126:	2300      	movs	r3, #0
 8003128:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800312a:	2301      	movs	r3, #1
 800312c:	77bb      	strb	r3, [r7, #30]
        break;
 800312e:	bf00      	nop
    }

    if (pclk != 0U)
 8003130:	69bb      	ldr	r3, [r7, #24]
 8003132:	2b00      	cmp	r3, #0
 8003134:	d018      	beq.n	8003168 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 8003136:	687b      	ldr	r3, [r7, #4]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	085a      	lsrs	r2, r3, #1
 800313c:	69bb      	ldr	r3, [r7, #24]
 800313e:	441a      	add	r2, r3
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	685b      	ldr	r3, [r3, #4]
 8003144:	fbb2 f3f3 	udiv	r3, r2, r3
 8003148:	b29b      	uxth	r3, r3
 800314a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800314c:	693b      	ldr	r3, [r7, #16]
 800314e:	2b0f      	cmp	r3, #15
 8003150:	d908      	bls.n	8003164 <UART_SetConfig+0x49c>
 8003152:	693b      	ldr	r3, [r7, #16]
 8003154:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003158:	d204      	bcs.n	8003164 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800315a:	687b      	ldr	r3, [r7, #4]
 800315c:	681b      	ldr	r3, [r3, #0]
 800315e:	693a      	ldr	r2, [r7, #16]
 8003160:	60da      	str	r2, [r3, #12]
 8003162:	e001      	b.n	8003168 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 8003164:	2301      	movs	r3, #1
 8003166:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8003168:	687b      	ldr	r3, [r7, #4]
 800316a:	2200      	movs	r2, #0
 800316c:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 800316e:	687b      	ldr	r3, [r7, #4]
 8003170:	2200      	movs	r2, #0
 8003172:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8003174:	7fbb      	ldrb	r3, [r7, #30]
}
 8003176:	4618      	mov	r0, r3
 8003178:	3720      	adds	r7, #32
 800317a:	46bd      	mov	sp, r7
 800317c:	bd80      	pop	{r7, pc}
 800317e:	bf00      	nop
 8003180:	40007c00 	.word	0x40007c00
 8003184:	40023800 	.word	0x40023800
 8003188:	00f42400 	.word	0x00f42400

0800318c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800318c:	b480      	push	{r7}
 800318e:	b083      	sub	sp, #12
 8003190:	af00      	add	r7, sp, #0
 8003192:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003198:	f003 0301 	and.w	r3, r3, #1
 800319c:	2b00      	cmp	r3, #0
 800319e:	d00a      	beq.n	80031b6 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	685b      	ldr	r3, [r3, #4]
 80031a6:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80031aa:	687b      	ldr	r3, [r7, #4]
 80031ac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80031ae:	687b      	ldr	r3, [r7, #4]
 80031b0:	681b      	ldr	r3, [r3, #0]
 80031b2:	430a      	orrs	r2, r1
 80031b4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031ba:	f003 0302 	and.w	r3, r3, #2
 80031be:	2b00      	cmp	r3, #0
 80031c0:	d00a      	beq.n	80031d8 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	681b      	ldr	r3, [r3, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	430a      	orrs	r2, r1
 80031d6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031dc:	f003 0304 	and.w	r3, r3, #4
 80031e0:	2b00      	cmp	r3, #0
 80031e2:	d00a      	beq.n	80031fa <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	685b      	ldr	r3, [r3, #4]
 80031ea:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	430a      	orrs	r2, r1
 80031f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031fe:	f003 0308 	and.w	r3, r3, #8
 8003202:	2b00      	cmp	r3, #0
 8003204:	d00a      	beq.n	800321c <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	681b      	ldr	r3, [r3, #0]
 800320a:	685b      	ldr	r3, [r3, #4]
 800320c:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	430a      	orrs	r2, r1
 800321a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800321c:	687b      	ldr	r3, [r7, #4]
 800321e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003220:	f003 0310 	and.w	r3, r3, #16
 8003224:	2b00      	cmp	r3, #0
 8003226:	d00a      	beq.n	800323e <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	681b      	ldr	r3, [r3, #0]
 800322c:	689b      	ldr	r3, [r3, #8]
 800322e:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8003232:	687b      	ldr	r3, [r7, #4]
 8003234:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	430a      	orrs	r2, r1
 800323c:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800323e:	687b      	ldr	r3, [r7, #4]
 8003240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003242:	f003 0320 	and.w	r3, r3, #32
 8003246:	2b00      	cmp	r3, #0
 8003248:	d00a      	beq.n	8003260 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800324a:	687b      	ldr	r3, [r7, #4]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	689b      	ldr	r3, [r3, #8]
 8003250:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8003254:	687b      	ldr	r3, [r7, #4]
 8003256:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	430a      	orrs	r2, r1
 800325e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8003260:	687b      	ldr	r3, [r7, #4]
 8003262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003264:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003268:	2b00      	cmp	r3, #0
 800326a:	d01a      	beq.n	80032a2 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	430a      	orrs	r2, r1
 8003280:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003286:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800328a:	d10a      	bne.n	80032a2 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800328c:	687b      	ldr	r3, [r7, #4]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	685b      	ldr	r3, [r3, #4]
 8003292:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	430a      	orrs	r2, r1
 80032a0:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80032a2:	687b      	ldr	r3, [r7, #4]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80032a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d00a      	beq.n	80032c4 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	681b      	ldr	r3, [r3, #0]
 80032b2:	685b      	ldr	r3, [r3, #4]
 80032b4:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80032b8:	687b      	ldr	r3, [r7, #4]
 80032ba:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 80032bc:	687b      	ldr	r3, [r7, #4]
 80032be:	681b      	ldr	r3, [r3, #0]
 80032c0:	430a      	orrs	r2, r1
 80032c2:	605a      	str	r2, [r3, #4]
  }
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032ce:	4770      	bx	lr

080032d0 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af02      	add	r7, sp, #8
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2200      	movs	r2, #0
 80032dc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80032e0:	f7fd fcb8 	bl	8000c54 <HAL_GetTick>
 80032e4:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80032e6:	687b      	ldr	r3, [r7, #4]
 80032e8:	681b      	ldr	r3, [r3, #0]
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 0308 	and.w	r3, r3, #8
 80032f0:	2b08      	cmp	r3, #8
 80032f2:	d10e      	bne.n	8003312 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80032f4:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80032f8:	9300      	str	r3, [sp, #0]
 80032fa:	68fb      	ldr	r3, [r7, #12]
 80032fc:	2200      	movs	r2, #0
 80032fe:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8003302:	6878      	ldr	r0, [r7, #4]
 8003304:	f000 f817 	bl	8003336 <UART_WaitOnFlagUntilTimeout>
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	d001      	beq.n	8003312 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 800330e:	2303      	movs	r3, #3
 8003310:	e00d      	b.n	800332e <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	2220      	movs	r2, #32
 8003316:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	2220      	movs	r2, #32
 800331c:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800331e:	687b      	ldr	r3, [r7, #4]
 8003320:	2200      	movs	r2, #0
 8003322:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2200      	movs	r2, #0
 8003328:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 800332c:	2300      	movs	r3, #0
}
 800332e:	4618      	mov	r0, r3
 8003330:	3710      	adds	r7, #16
 8003332:	46bd      	mov	sp, r7
 8003334:	bd80      	pop	{r7, pc}

08003336 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8003336:	b580      	push	{r7, lr}
 8003338:	b084      	sub	sp, #16
 800333a:	af00      	add	r7, sp, #0
 800333c:	60f8      	str	r0, [r7, #12]
 800333e:	60b9      	str	r1, [r7, #8]
 8003340:	603b      	str	r3, [r7, #0]
 8003342:	4613      	mov	r3, r2
 8003344:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003346:	e05e      	b.n	8003406 <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003348:	69bb      	ldr	r3, [r7, #24]
 800334a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800334e:	d05a      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003350:	f7fd fc80 	bl	8000c54 <HAL_GetTick>
 8003354:	4602      	mov	r2, r0
 8003356:	683b      	ldr	r3, [r7, #0]
 8003358:	1ad3      	subs	r3, r2, r3
 800335a:	69ba      	ldr	r2, [r7, #24]
 800335c:	429a      	cmp	r2, r3
 800335e:	d302      	bcc.n	8003366 <UART_WaitOnFlagUntilTimeout+0x30>
 8003360:	69bb      	ldr	r3, [r7, #24]
 8003362:	2b00      	cmp	r3, #0
 8003364:	d11b      	bne.n	800339e <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8003366:	68fb      	ldr	r3, [r7, #12]
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	681a      	ldr	r2, [r3, #0]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8003374:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	689a      	ldr	r2, [r3, #8]
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	f022 0201 	bic.w	r2, r2, #1
 8003384:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8003386:	68fb      	ldr	r3, [r7, #12]
 8003388:	2220      	movs	r2, #32
 800338a:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 800338c:	68fb      	ldr	r3, [r7, #12]
 800338e:	2220      	movs	r2, #32
 8003390:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	2200      	movs	r2, #0
 8003396:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 800339a:	2303      	movs	r3, #3
 800339c:	e043      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	681b      	ldr	r3, [r3, #0]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	f003 0304 	and.w	r3, r3, #4
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d02c      	beq.n	8003406 <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	69db      	ldr	r3, [r3, #28]
 80033b2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80033b6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80033ba:	d124      	bne.n	8003406 <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80033c4:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	681a      	ldr	r2, [r3, #0]
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	681b      	ldr	r3, [r3, #0]
 80033d0:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80033d4:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	689a      	ldr	r2, [r3, #8]
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	f022 0201 	bic.w	r2, r2, #1
 80033e4:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 80033e6:	68fb      	ldr	r3, [r7, #12]
 80033e8:	2220      	movs	r2, #32
 80033ea:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 80033ec:	68fb      	ldr	r3, [r7, #12]
 80033ee:	2220      	movs	r2, #32
 80033f0:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 80033f2:	68fb      	ldr	r3, [r7, #12]
 80033f4:	2220      	movs	r2, #32
 80033f6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	2200      	movs	r2, #0
 80033fe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e00f      	b.n	8003426 <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8003406:	68fb      	ldr	r3, [r7, #12]
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	69da      	ldr	r2, [r3, #28]
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	4013      	ands	r3, r2
 8003410:	68ba      	ldr	r2, [r7, #8]
 8003412:	429a      	cmp	r2, r3
 8003414:	bf0c      	ite	eq
 8003416:	2301      	moveq	r3, #1
 8003418:	2300      	movne	r3, #0
 800341a:	b2db      	uxtb	r3, r3
 800341c:	461a      	mov	r2, r3
 800341e:	79fb      	ldrb	r3, [r7, #7]
 8003420:	429a      	cmp	r2, r3
 8003422:	d091      	beq.n	8003348 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003424:	2300      	movs	r3, #0
}
 8003426:	4618      	mov	r0, r3
 8003428:	3710      	adds	r7, #16
 800342a:	46bd      	mov	sp, r7
 800342c:	bd80      	pop	{r7, pc}
	...

08003430 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8003430:	b480      	push	{r7}
 8003432:	b085      	sub	sp, #20
 8003434:	af00      	add	r7, sp, #0
 8003436:	60f8      	str	r0, [r7, #12]
 8003438:	60b9      	str	r1, [r7, #8]
 800343a:	4613      	mov	r3, r2
 800343c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	68ba      	ldr	r2, [r7, #8]
 8003442:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	88fa      	ldrh	r2, [r7, #6]
 8003448:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	88fa      	ldrh	r2, [r7, #6]
 8003450:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	2200      	movs	r2, #0
 8003458:	665a      	str	r2, [r3, #100]	; 0x64

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	689b      	ldr	r3, [r3, #8]
 800345e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003462:	d10e      	bne.n	8003482 <UART_Start_Receive_IT+0x52>
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	691b      	ldr	r3, [r3, #16]
 8003468:	2b00      	cmp	r3, #0
 800346a:	d105      	bne.n	8003478 <UART_Start_Receive_IT+0x48>
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	f240 12ff 	movw	r2, #511	; 0x1ff
 8003472:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003476:	e02d      	b.n	80034d4 <UART_Start_Receive_IT+0xa4>
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	22ff      	movs	r2, #255	; 0xff
 800347c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 8003480:	e028      	b.n	80034d4 <UART_Start_Receive_IT+0xa4>
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	689b      	ldr	r3, [r3, #8]
 8003486:	2b00      	cmp	r3, #0
 8003488:	d10d      	bne.n	80034a6 <UART_Start_Receive_IT+0x76>
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	691b      	ldr	r3, [r3, #16]
 800348e:	2b00      	cmp	r3, #0
 8003490:	d104      	bne.n	800349c <UART_Start_Receive_IT+0x6c>
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	22ff      	movs	r2, #255	; 0xff
 8003496:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800349a:	e01b      	b.n	80034d4 <UART_Start_Receive_IT+0xa4>
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	227f      	movs	r2, #127	; 0x7f
 80034a0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034a4:	e016      	b.n	80034d4 <UART_Start_Receive_IT+0xa4>
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80034ae:	d10d      	bne.n	80034cc <UART_Start_Receive_IT+0x9c>
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	691b      	ldr	r3, [r3, #16]
 80034b4:	2b00      	cmp	r3, #0
 80034b6:	d104      	bne.n	80034c2 <UART_Start_Receive_IT+0x92>
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	227f      	movs	r2, #127	; 0x7f
 80034bc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034c0:	e008      	b.n	80034d4 <UART_Start_Receive_IT+0xa4>
 80034c2:	68fb      	ldr	r3, [r7, #12]
 80034c4:	223f      	movs	r2, #63	; 0x3f
 80034c6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 80034ca:	e003      	b.n	80034d4 <UART_Start_Receive_IT+0xa4>
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	2200      	movs	r2, #0
 80034d0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	2200      	movs	r2, #0
 80034d8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2222      	movs	r2, #34	; 0x22
 80034e0:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	681b      	ldr	r3, [r3, #0]
 80034e6:	689a      	ldr	r2, [r3, #8]
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	f042 0201 	orr.w	r2, r2, #1
 80034f0:	609a      	str	r2, [r3, #8]

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80034f2:	68fb      	ldr	r3, [r7, #12]
 80034f4:	689b      	ldr	r3, [r3, #8]
 80034f6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80034fa:	d107      	bne.n	800350c <UART_Start_Receive_IT+0xdc>
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	691b      	ldr	r3, [r3, #16]
 8003500:	2b00      	cmp	r3, #0
 8003502:	d103      	bne.n	800350c <UART_Start_Receive_IT+0xdc>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8003504:	68fb      	ldr	r3, [r7, #12]
 8003506:	4a0c      	ldr	r2, [pc, #48]	; (8003538 <UART_Start_Receive_IT+0x108>)
 8003508:	665a      	str	r2, [r3, #100]	; 0x64
 800350a:	e002      	b.n	8003512 <UART_Start_Receive_IT+0xe2>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800350c:	68fb      	ldr	r3, [r7, #12]
 800350e:	4a0b      	ldr	r2, [pc, #44]	; (800353c <UART_Start_Receive_IT+0x10c>)
 8003510:	665a      	str	r2, [r3, #100]	; 0x64
  }

  __HAL_UNLOCK(huart);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800351a:	68fb      	ldr	r3, [r7, #12]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	681a      	ldr	r2, [r3, #0]
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	681b      	ldr	r3, [r3, #0]
 8003524:	f442 7290 	orr.w	r2, r2, #288	; 0x120
 8003528:	601a      	str	r2, [r3, #0]
  return HAL_OK;
 800352a:	2300      	movs	r3, #0
}
 800352c:	4618      	mov	r0, r3
 800352e:	3714      	adds	r7, #20
 8003530:	46bd      	mov	sp, r7
 8003532:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003536:	4770      	bx	lr
 8003538:	080036d1 	.word	0x080036d1
 800353c:	080035fd 	.word	0x080035fd

08003540 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8003540:	b480      	push	{r7}
 8003542:	b083      	sub	sp, #12
 8003544:	af00      	add	r7, sp, #0
 8003546:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	681a      	ldr	r2, [r3, #0]
 800354e:	687b      	ldr	r3, [r7, #4]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003556:	601a      	str	r2, [r3, #0]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	689a      	ldr	r2, [r3, #8]
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	f022 0201 	bic.w	r2, r2, #1
 8003566:	609a      	str	r2, [r3, #8]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800356c:	2b01      	cmp	r3, #1
 800356e:	d107      	bne.n	8003580 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	687b      	ldr	r3, [r7, #4]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f022 0210 	bic.w	r2, r2, #16
 800357e:	601a      	str	r2, [r3, #0]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	2220      	movs	r2, #32
 8003584:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	2200      	movs	r2, #0
 8003590:	665a      	str	r2, [r3, #100]	; 0x64
}
 8003592:	bf00      	nop
 8003594:	370c      	adds	r7, #12
 8003596:	46bd      	mov	sp, r7
 8003598:	f85d 7b04 	ldr.w	r7, [sp], #4
 800359c:	4770      	bx	lr

0800359e <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800359e:	b580      	push	{r7, lr}
 80035a0:	b084      	sub	sp, #16
 80035a2:	af00      	add	r7, sp, #0
 80035a4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80035aa:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	2200      	movs	r2, #0
 80035b0:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	2200      	movs	r2, #0
 80035b8:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80035bc:	68f8      	ldr	r0, [r7, #12]
 80035be:	f7ff fb6d 	bl	8002c9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035c2:	bf00      	nop
 80035c4:	3710      	adds	r7, #16
 80035c6:	46bd      	mov	sp, r7
 80035c8:	bd80      	pop	{r7, pc}

080035ca <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80035ca:	b580      	push	{r7, lr}
 80035cc:	b082      	sub	sp, #8
 80035ce:	af00      	add	r7, sp, #0
 80035d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80035d2:	687b      	ldr	r3, [r7, #4]
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	681a      	ldr	r2, [r3, #0]
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	681b      	ldr	r3, [r3, #0]
 80035dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80035e0:	601a      	str	r2, [r3, #0]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	2220      	movs	r2, #32
 80035e6:	679a      	str	r2, [r3, #120]	; 0x78

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80035e8:	687b      	ldr	r3, [r7, #4]
 80035ea:	2200      	movs	r2, #0
 80035ec:	669a      	str	r2, [r3, #104]	; 0x68
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80035ee:	6878      	ldr	r0, [r7, #4]
 80035f0:	f7ff fb4a 	bl	8002c88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80035f4:	bf00      	nop
 80035f6:	3708      	adds	r7, #8
 80035f8:	46bd      	mov	sp, r7
 80035fa:	bd80      	pop	{r7, pc}

080035fc <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 80035fc:	b580      	push	{r7, lr}
 80035fe:	b084      	sub	sp, #16
 8003600:	af00      	add	r7, sp, #0
 8003602:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800360a:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003610:	2b22      	cmp	r3, #34	; 0x22
 8003612:	d151      	bne.n	80036b8 <UART_RxISR_8BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800361a:	81bb      	strh	r3, [r7, #12]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800361c:	89bb      	ldrh	r3, [r7, #12]
 800361e:	b2d9      	uxtb	r1, r3
 8003620:	89fb      	ldrh	r3, [r7, #14]
 8003622:	b2da      	uxtb	r2, r3
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003628:	400a      	ands	r2, r1
 800362a:	b2d2      	uxtb	r2, r2
 800362c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800362e:	687b      	ldr	r3, [r7, #4]
 8003630:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003632:	1c5a      	adds	r2, r3, #1
 8003634:	687b      	ldr	r3, [r7, #4]
 8003636:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800363e:	b29b      	uxth	r3, r3
 8003640:	3b01      	subs	r3, #1
 8003642:	b29a      	uxth	r2, r3
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003650:	b29b      	uxth	r3, r3
 8003652:	2b00      	cmp	r3, #0
 8003654:	d138      	bne.n	80036c8 <UART_RxISR_8BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	681a      	ldr	r2, [r3, #0]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003664:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	689a      	ldr	r2, [r3, #8]
 800366c:	687b      	ldr	r3, [r7, #4]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f022 0201 	bic.w	r2, r2, #1
 8003674:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	2220      	movs	r2, #32
 800367a:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	2200      	movs	r2, #0
 8003680:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003686:	2b01      	cmp	r3, #1
 8003688:	d10f      	bne.n	80036aa <UART_RxISR_8BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	681a      	ldr	r2, [r3, #0]
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	f022 0210 	bic.w	r2, r2, #16
 8003698:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 80036a0:	4619      	mov	r1, r3
 80036a2:	6878      	ldr	r0, [r7, #4]
 80036a4:	f7ff fb04 	bl	8002cb0 <HAL_UARTEx_RxEventCallback>
 80036a8:	e002      	b.n	80036b0 <UART_RxISR_8BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80036aa:	6878      	ldr	r0, [r7, #4]
 80036ac:	f7fc ff28 	bl	8000500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80036b0:	687b      	ldr	r3, [r7, #4]
 80036b2:	2200      	movs	r2, #0
 80036b4:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80036b6:	e007      	b.n	80036c8 <UART_RxISR_8BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	681b      	ldr	r3, [r3, #0]
 80036bc:	699a      	ldr	r2, [r3, #24]
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	681b      	ldr	r3, [r3, #0]
 80036c2:	f042 0208 	orr.w	r2, r2, #8
 80036c6:	619a      	str	r2, [r3, #24]
}
 80036c8:	bf00      	nop
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80036d0:	b580      	push	{r7, lr}
 80036d2:	b084      	sub	sp, #16
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 80036de:	81fb      	strh	r3, [r7, #14]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80036e4:	2b22      	cmp	r3, #34	; 0x22
 80036e6:	d151      	bne.n	800378c <UART_RxISR_16BIT+0xbc>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80036ee:	81bb      	strh	r3, [r7, #12]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80036f4:	60bb      	str	r3, [r7, #8]
    *tmp = (uint16_t)(uhdata & uhMask);
 80036f6:	89ba      	ldrh	r2, [r7, #12]
 80036f8:	89fb      	ldrh	r3, [r7, #14]
 80036fa:	4013      	ands	r3, r2
 80036fc:	b29a      	uxth	r2, r3
 80036fe:	68bb      	ldr	r3, [r7, #8]
 8003700:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003706:	1c9a      	adds	r2, r3, #2
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003712:	b29b      	uxth	r3, r3
 8003714:	3b01      	subs	r3, #1
 8003716:	b29a      	uxth	r2, r3
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 8003724:	b29b      	uxth	r3, r3
 8003726:	2b00      	cmp	r3, #0
 8003728:	d138      	bne.n	800379c <UART_RxISR_16BIT+0xcc>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800372a:	687b      	ldr	r3, [r7, #4]
 800372c:	681b      	ldr	r3, [r3, #0]
 800372e:	681a      	ldr	r2, [r3, #0]
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8003738:	601a      	str	r2, [r3, #0]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	681b      	ldr	r3, [r3, #0]
 800373e:	689a      	ldr	r2, [r3, #8]
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	f022 0201 	bic.w	r2, r2, #1
 8003748:	609a      	str	r2, [r3, #8]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	2220      	movs	r2, #32
 800374e:	67da      	str	r2, [r3, #124]	; 0x7c

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800375a:	2b01      	cmp	r3, #1
 800375c:	d10f      	bne.n	800377e <UART_RxISR_16BIT+0xae>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	681a      	ldr	r2, [r3, #0]
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f022 0210 	bic.w	r2, r2, #16
 800376c:	601a      	str	r2, [r3, #0]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800376e:	687b      	ldr	r3, [r7, #4]
 8003770:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 8003774:	4619      	mov	r1, r3
 8003776:	6878      	ldr	r0, [r7, #4]
 8003778:	f7ff fa9a 	bl	8002cb0 <HAL_UARTEx_RxEventCallback>
 800377c:	e002      	b.n	8003784 <UART_RxISR_16BIT+0xb4>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800377e:	6878      	ldr	r0, [r7, #4]
 8003780:	f7fc febe 	bl	8000500 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003784:	687b      	ldr	r3, [r7, #4]
 8003786:	2200      	movs	r2, #0
 8003788:	661a      	str	r2, [r3, #96]	; 0x60
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800378a:	e007      	b.n	800379c <UART_RxISR_16BIT+0xcc>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	699a      	ldr	r2, [r3, #24]
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	681b      	ldr	r3, [r3, #0]
 8003796:	f042 0208 	orr.w	r2, r2, #8
 800379a:	619a      	str	r2, [r3, #24]
}
 800379c:	bf00      	nop
 800379e:	3710      	adds	r7, #16
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80037a4:	b084      	sub	sp, #16
 80037a6:	b580      	push	{r7, lr}
 80037a8:	b084      	sub	sp, #16
 80037aa:	af00      	add	r7, sp, #0
 80037ac:	6078      	str	r0, [r7, #4]
 80037ae:	f107 001c 	add.w	r0, r7, #28
 80037b2:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 80037b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80037b8:	2b01      	cmp	r3, #1
 80037ba:	d120      	bne.n	80037fe <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037c0:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	68da      	ldr	r2, [r3, #12]
 80037cc:	4b20      	ldr	r3, [pc, #128]	; (8003850 <USB_CoreInit+0xac>)
 80037ce:	4013      	ands	r3, r2
 80037d0:	687a      	ldr	r2, [r7, #4]
 80037d2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	68db      	ldr	r3, [r3, #12]
 80037d8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80037e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80037e2:	2b01      	cmp	r3, #1
 80037e4:	d105      	bne.n	80037f2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80037e6:	687b      	ldr	r3, [r7, #4]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80037f2:	6878      	ldr	r0, [r7, #4]
 80037f4:	f000 fa5a 	bl	8003cac <USB_CoreReset>
 80037f8:	4603      	mov	r3, r0
 80037fa:	73fb      	strb	r3, [r7, #15]
 80037fc:	e010      	b.n	8003820 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	68db      	ldr	r3, [r3, #12]
 8003802:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 800380a:	6878      	ldr	r0, [r7, #4]
 800380c:	f000 fa4e 	bl	8003cac <USB_CoreReset>
 8003810:	4603      	mov	r3, r0
 8003812:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003818:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8003820:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003822:	2b01      	cmp	r3, #1
 8003824:	d10b      	bne.n	800383e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	689b      	ldr	r3, [r3, #8]
 800382a:	f043 0206 	orr.w	r2, r3, #6
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	689b      	ldr	r3, [r3, #8]
 8003836:	f043 0220 	orr.w	r2, r3, #32
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800383e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003840:	4618      	mov	r0, r3
 8003842:	3710      	adds	r7, #16
 8003844:	46bd      	mov	sp, r7
 8003846:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800384a:	b004      	add	sp, #16
 800384c:	4770      	bx	lr
 800384e:	bf00      	nop
 8003850:	ffbdffbf 	.word	0xffbdffbf

08003854 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	f023 0201 	bic.w	r2, r3, #1
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8003868:	2300      	movs	r3, #0
}
 800386a:	4618      	mov	r0, r3
 800386c:	370c      	adds	r7, #12
 800386e:	46bd      	mov	sp, r7
 8003870:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003874:	4770      	bx	lr

08003876 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8003876:	b580      	push	{r7, lr}
 8003878:	b082      	sub	sp, #8
 800387a:	af00      	add	r7, sp, #0
 800387c:	6078      	str	r0, [r7, #4]
 800387e:	460b      	mov	r3, r1
 8003880:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800388e:	78fb      	ldrb	r3, [r7, #3]
 8003890:	2b01      	cmp	r3, #1
 8003892:	d106      	bne.n	80038a2 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8003894:	687b      	ldr	r3, [r7, #4]
 8003896:	68db      	ldr	r3, [r3, #12]
 8003898:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	60da      	str	r2, [r3, #12]
 80038a0:	e00b      	b.n	80038ba <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 80038a2:	78fb      	ldrb	r3, [r7, #3]
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d106      	bne.n	80038b6 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	68db      	ldr	r3, [r3, #12]
 80038ac:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	60da      	str	r2, [r3, #12]
 80038b4:	e001      	b.n	80038ba <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 80038b6:	2301      	movs	r3, #1
 80038b8:	e003      	b.n	80038c2 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 80038ba:	2032      	movs	r0, #50	; 0x32
 80038bc:	f7fd f9d6 	bl	8000c6c <HAL_Delay>

  return HAL_OK;
 80038c0:	2300      	movs	r3, #0
}
 80038c2:	4618      	mov	r0, r3
 80038c4:	3708      	adds	r7, #8
 80038c6:	46bd      	mov	sp, r7
 80038c8:	bd80      	pop	{r7, pc}
	...

080038cc <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 80038cc:	b084      	sub	sp, #16
 80038ce:	b580      	push	{r7, lr}
 80038d0:	b086      	sub	sp, #24
 80038d2:	af00      	add	r7, sp, #0
 80038d4:	6078      	str	r0, [r7, #4]
 80038d6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80038da:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80038de:	2300      	movs	r3, #0
 80038e0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80038e6:	2300      	movs	r3, #0
 80038e8:	613b      	str	r3, [r7, #16]
 80038ea:	e009      	b.n	8003900 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80038ec:	687a      	ldr	r2, [r7, #4]
 80038ee:	693b      	ldr	r3, [r7, #16]
 80038f0:	3340      	adds	r3, #64	; 0x40
 80038f2:	009b      	lsls	r3, r3, #2
 80038f4:	4413      	add	r3, r2
 80038f6:	2200      	movs	r2, #0
 80038f8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80038fa:	693b      	ldr	r3, [r7, #16]
 80038fc:	3301      	adds	r3, #1
 80038fe:	613b      	str	r3, [r7, #16]
 8003900:	693b      	ldr	r3, [r7, #16]
 8003902:	2b0e      	cmp	r3, #14
 8003904:	d9f2      	bls.n	80038ec <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8003906:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003908:	2b00      	cmp	r3, #0
 800390a:	d11c      	bne.n	8003946 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800390c:	68fb      	ldr	r3, [r7, #12]
 800390e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003912:	685b      	ldr	r3, [r3, #4]
 8003914:	68fa      	ldr	r2, [r7, #12]
 8003916:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800391a:	f043 0302 	orr.w	r3, r3, #2
 800391e:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003924:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	681b      	ldr	r3, [r3, #0]
 800393c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	601a      	str	r2, [r3, #0]
 8003944:	e005      	b.n	8003952 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800394a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8003952:	68fb      	ldr	r3, [r7, #12]
 8003954:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003958:	461a      	mov	r2, r3
 800395a:	2300      	movs	r3, #0
 800395c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800395e:	68fb      	ldr	r3, [r7, #12]
 8003960:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003964:	4619      	mov	r1, r3
 8003966:	68fb      	ldr	r3, [r7, #12]
 8003968:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800396c:	461a      	mov	r2, r3
 800396e:	680b      	ldr	r3, [r1, #0]
 8003970:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8003972:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003974:	2b01      	cmp	r3, #1
 8003976:	d10c      	bne.n	8003992 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003978:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800397a:	2b00      	cmp	r3, #0
 800397c:	d104      	bne.n	8003988 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800397e:	2100      	movs	r1, #0
 8003980:	6878      	ldr	r0, [r7, #4]
 8003982:	f000 f959 	bl	8003c38 <USB_SetDevSpeed>
 8003986:	e018      	b.n	80039ba <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8003988:	2101      	movs	r1, #1
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f000 f954 	bl	8003c38 <USB_SetDevSpeed>
 8003990:	e013      	b.n	80039ba <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8003992:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8003994:	2b03      	cmp	r3, #3
 8003996:	d10c      	bne.n	80039b2 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8003998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800399a:	2b00      	cmp	r3, #0
 800399c:	d104      	bne.n	80039a8 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800399e:	2100      	movs	r1, #0
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f000 f949 	bl	8003c38 <USB_SetDevSpeed>
 80039a6:	e008      	b.n	80039ba <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 80039a8:	2101      	movs	r1, #1
 80039aa:	6878      	ldr	r0, [r7, #4]
 80039ac:	f000 f944 	bl	8003c38 <USB_SetDevSpeed>
 80039b0:	e003      	b.n	80039ba <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 80039b2:	2103      	movs	r1, #3
 80039b4:	6878      	ldr	r0, [r7, #4]
 80039b6:	f000 f93f 	bl	8003c38 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80039ba:	2110      	movs	r1, #16
 80039bc:	6878      	ldr	r0, [r7, #4]
 80039be:	f000 f8f3 	bl	8003ba8 <USB_FlushTxFifo>
 80039c2:	4603      	mov	r3, r0
 80039c4:	2b00      	cmp	r3, #0
 80039c6:	d001      	beq.n	80039cc <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 80039c8:	2301      	movs	r3, #1
 80039ca:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80039cc:	6878      	ldr	r0, [r7, #4]
 80039ce:	f000 f911 	bl	8003bf4 <USB_FlushRxFifo>
 80039d2:	4603      	mov	r3, r0
 80039d4:	2b00      	cmp	r3, #0
 80039d6:	d001      	beq.n	80039dc <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80039d8:	2301      	movs	r3, #1
 80039da:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039e2:	461a      	mov	r2, r3
 80039e4:	2300      	movs	r3, #0
 80039e6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039ee:	461a      	mov	r2, r3
 80039f0:	2300      	movs	r3, #0
 80039f2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80039fa:	461a      	mov	r2, r3
 80039fc:	2300      	movs	r3, #0
 80039fe:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a00:	2300      	movs	r3, #0
 8003a02:	613b      	str	r3, [r7, #16]
 8003a04:	e043      	b.n	8003a8e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8003a06:	693b      	ldr	r3, [r7, #16]
 8003a08:	015a      	lsls	r2, r3, #5
 8003a0a:	68fb      	ldr	r3, [r7, #12]
 8003a0c:	4413      	add	r3, r2
 8003a0e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003a18:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003a1c:	d118      	bne.n	8003a50 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8003a1e:	693b      	ldr	r3, [r7, #16]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d10a      	bne.n	8003a3a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8003a24:	693b      	ldr	r3, [r7, #16]
 8003a26:	015a      	lsls	r2, r3, #5
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	4413      	add	r3, r2
 8003a2c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a30:	461a      	mov	r2, r3
 8003a32:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003a36:	6013      	str	r3, [r2, #0]
 8003a38:	e013      	b.n	8003a62 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8003a3a:	693b      	ldr	r3, [r7, #16]
 8003a3c:	015a      	lsls	r2, r3, #5
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	4413      	add	r3, r2
 8003a42:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a46:	461a      	mov	r2, r3
 8003a48:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003a4c:	6013      	str	r3, [r2, #0]
 8003a4e:	e008      	b.n	8003a62 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8003a50:	693b      	ldr	r3, [r7, #16]
 8003a52:	015a      	lsls	r2, r3, #5
 8003a54:	68fb      	ldr	r3, [r7, #12]
 8003a56:	4413      	add	r3, r2
 8003a58:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	2300      	movs	r3, #0
 8003a60:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8003a62:	693b      	ldr	r3, [r7, #16]
 8003a64:	015a      	lsls	r2, r3, #5
 8003a66:	68fb      	ldr	r3, [r7, #12]
 8003a68:	4413      	add	r3, r2
 8003a6a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a6e:	461a      	mov	r2, r3
 8003a70:	2300      	movs	r3, #0
 8003a72:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8003a74:	693b      	ldr	r3, [r7, #16]
 8003a76:	015a      	lsls	r2, r3, #5
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	4413      	add	r3, r2
 8003a7c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8003a80:	461a      	mov	r2, r3
 8003a82:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003a86:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a88:	693b      	ldr	r3, [r7, #16]
 8003a8a:	3301      	adds	r3, #1
 8003a8c:	613b      	str	r3, [r7, #16]
 8003a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a90:	693a      	ldr	r2, [r7, #16]
 8003a92:	429a      	cmp	r2, r3
 8003a94:	d3b7      	bcc.n	8003a06 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003a96:	2300      	movs	r3, #0
 8003a98:	613b      	str	r3, [r7, #16]
 8003a9a:	e043      	b.n	8003b24 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8003a9c:	693b      	ldr	r3, [r7, #16]
 8003a9e:	015a      	lsls	r2, r3, #5
 8003aa0:	68fb      	ldr	r3, [r7, #12]
 8003aa2:	4413      	add	r3, r2
 8003aa4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003aa8:	681b      	ldr	r3, [r3, #0]
 8003aaa:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8003aae:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003ab2:	d118      	bne.n	8003ae6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8003ab4:	693b      	ldr	r3, [r7, #16]
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d10a      	bne.n	8003ad0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8003aba:	693b      	ldr	r3, [r7, #16]
 8003abc:	015a      	lsls	r2, r3, #5
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	4413      	add	r3, r2
 8003ac2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003ac6:	461a      	mov	r2, r3
 8003ac8:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8003acc:	6013      	str	r3, [r2, #0]
 8003ace:	e013      	b.n	8003af8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8003ad0:	693b      	ldr	r3, [r7, #16]
 8003ad2:	015a      	lsls	r2, r3, #5
 8003ad4:	68fb      	ldr	r3, [r7, #12]
 8003ad6:	4413      	add	r3, r2
 8003ad8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003adc:	461a      	mov	r2, r3
 8003ade:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8003ae2:	6013      	str	r3, [r2, #0]
 8003ae4:	e008      	b.n	8003af8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8003ae6:	693b      	ldr	r3, [r7, #16]
 8003ae8:	015a      	lsls	r2, r3, #5
 8003aea:	68fb      	ldr	r3, [r7, #12]
 8003aec:	4413      	add	r3, r2
 8003aee:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003af2:	461a      	mov	r2, r3
 8003af4:	2300      	movs	r3, #0
 8003af6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8003af8:	693b      	ldr	r3, [r7, #16]
 8003afa:	015a      	lsls	r2, r3, #5
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	4413      	add	r3, r2
 8003b00:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b04:	461a      	mov	r2, r3
 8003b06:	2300      	movs	r3, #0
 8003b08:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8003b0a:	693b      	ldr	r3, [r7, #16]
 8003b0c:	015a      	lsls	r2, r3, #5
 8003b0e:	68fb      	ldr	r3, [r7, #12]
 8003b10:	4413      	add	r3, r2
 8003b12:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8003b16:	461a      	mov	r2, r3
 8003b18:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8003b1c:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8003b1e:	693b      	ldr	r3, [r7, #16]
 8003b20:	3301      	adds	r3, #1
 8003b22:	613b      	str	r3, [r7, #16]
 8003b24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003b26:	693a      	ldr	r2, [r7, #16]
 8003b28:	429a      	cmp	r2, r3
 8003b2a:	d3b7      	bcc.n	8003a9c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8003b2c:	68fb      	ldr	r3, [r7, #12]
 8003b2e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003b32:	691b      	ldr	r3, [r3, #16]
 8003b34:	68fa      	ldr	r2, [r7, #12]
 8003b36:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003b3a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b3e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2200      	movs	r2, #0
 8003b44:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8003b4c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8003b4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d105      	bne.n	8003b60 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f043 0210 	orr.w	r2, r3, #16
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	699a      	ldr	r2, [r3, #24]
 8003b64:	4b0e      	ldr	r3, [pc, #56]	; (8003ba0 <USB_DevInit+0x2d4>)
 8003b66:	4313      	orrs	r3, r2
 8003b68:	687a      	ldr	r2, [r7, #4]
 8003b6a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8003b6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d005      	beq.n	8003b7e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	699b      	ldr	r3, [r3, #24]
 8003b76:	f043 0208 	orr.w	r2, r3, #8
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8003b7e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8003b80:	2b01      	cmp	r3, #1
 8003b82:	d105      	bne.n	8003b90 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	699a      	ldr	r2, [r3, #24]
 8003b88:	4b06      	ldr	r3, [pc, #24]	; (8003ba4 <USB_DevInit+0x2d8>)
 8003b8a:	4313      	orrs	r3, r2
 8003b8c:	687a      	ldr	r2, [r7, #4]
 8003b8e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8003b90:	7dfb      	ldrb	r3, [r7, #23]
}
 8003b92:	4618      	mov	r0, r3
 8003b94:	3718      	adds	r7, #24
 8003b96:	46bd      	mov	sp, r7
 8003b98:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8003b9c:	b004      	add	sp, #16
 8003b9e:	4770      	bx	lr
 8003ba0:	803c3800 	.word	0x803c3800
 8003ba4:	40000004 	.word	0x40000004

08003ba8 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8003ba8:	b480      	push	{r7}
 8003baa:	b085      	sub	sp, #20
 8003bac:	af00      	add	r7, sp, #0
 8003bae:	6078      	str	r0, [r7, #4]
 8003bb0:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8003bb6:	683b      	ldr	r3, [r7, #0]
 8003bb8:	019b      	lsls	r3, r3, #6
 8003bba:	f043 0220 	orr.w	r2, r3, #32
 8003bbe:	687b      	ldr	r3, [r7, #4]
 8003bc0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	3301      	adds	r3, #1
 8003bc6:	60fb      	str	r3, [r7, #12]
 8003bc8:	68fb      	ldr	r3, [r7, #12]
 8003bca:	4a09      	ldr	r2, [pc, #36]	; (8003bf0 <USB_FlushTxFifo+0x48>)
 8003bcc:	4293      	cmp	r3, r2
 8003bce:	d901      	bls.n	8003bd4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8003bd0:	2303      	movs	r3, #3
 8003bd2:	e006      	b.n	8003be2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8003bd4:	687b      	ldr	r3, [r7, #4]
 8003bd6:	691b      	ldr	r3, [r3, #16]
 8003bd8:	f003 0320 	and.w	r3, r3, #32
 8003bdc:	2b20      	cmp	r3, #32
 8003bde:	d0f0      	beq.n	8003bc2 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8003be0:	2300      	movs	r3, #0
}
 8003be2:	4618      	mov	r0, r3
 8003be4:	3714      	adds	r7, #20
 8003be6:	46bd      	mov	sp, r7
 8003be8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bec:	4770      	bx	lr
 8003bee:	bf00      	nop
 8003bf0:	00030d40 	.word	0x00030d40

08003bf4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8003bf4:	b480      	push	{r7}
 8003bf6:	b085      	sub	sp, #20
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 8003bfc:	2300      	movs	r3, #0
 8003bfe:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2210      	movs	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	3301      	adds	r3, #1
 8003c0a:	60fb      	str	r3, [r7, #12]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	4a09      	ldr	r2, [pc, #36]	; (8003c34 <USB_FlushRxFifo+0x40>)
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e006      	b.n	8003c26 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0310 	and.w	r3, r3, #16
 8003c20:	2b10      	cmp	r3, #16
 8003c22:	d0f0      	beq.n	8003c06 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 8003c24:	2300      	movs	r3, #0
}
 8003c26:	4618      	mov	r0, r3
 8003c28:	3714      	adds	r7, #20
 8003c2a:	46bd      	mov	sp, r7
 8003c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c30:	4770      	bx	lr
 8003c32:	bf00      	nop
 8003c34:	00030d40 	.word	0x00030d40

08003c38 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8003c38:	b480      	push	{r7}
 8003c3a:	b085      	sub	sp, #20
 8003c3c:	af00      	add	r7, sp, #0
 8003c3e:	6078      	str	r0, [r7, #4]
 8003c40:	460b      	mov	r3, r1
 8003c42:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c44:	687b      	ldr	r3, [r7, #4]
 8003c46:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c4e:	681a      	ldr	r2, [r3, #0]
 8003c50:	78fb      	ldrb	r3, [r7, #3]
 8003c52:	68f9      	ldr	r1, [r7, #12]
 8003c54:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8003c58:	4313      	orrs	r3, r2
 8003c5a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8003c5c:	2300      	movs	r3, #0
}
 8003c5e:	4618      	mov	r0, r3
 8003c60:	3714      	adds	r7, #20
 8003c62:	46bd      	mov	sp, r7
 8003c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c68:	4770      	bx	lr

08003c6a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 8003c6a:	b480      	push	{r7}
 8003c6c:	b085      	sub	sp, #20
 8003c6e:	af00      	add	r7, sp, #0
 8003c70:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8003c76:	68fb      	ldr	r3, [r7, #12]
 8003c78:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	68fa      	ldr	r2, [r7, #12]
 8003c80:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8003c84:	f023 0303 	bic.w	r3, r3, #3
 8003c88:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8003c90:	685b      	ldr	r3, [r3, #4]
 8003c92:	68fa      	ldr	r2, [r7, #12]
 8003c94:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8003c98:	f043 0302 	orr.w	r3, r3, #2
 8003c9c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8003c9e:	2300      	movs	r3, #0
}
 8003ca0:	4618      	mov	r0, r3
 8003ca2:	3714      	adds	r7, #20
 8003ca4:	46bd      	mov	sp, r7
 8003ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003caa:	4770      	bx	lr

08003cac <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8003cac:	b480      	push	{r7}
 8003cae:	b085      	sub	sp, #20
 8003cb0:	af00      	add	r7, sp, #0
 8003cb2:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8003cb4:	2300      	movs	r3, #0
 8003cb6:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	3301      	adds	r3, #1
 8003cbc:	60fb      	str	r3, [r7, #12]
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	4a13      	ldr	r2, [pc, #76]	; (8003d10 <USB_CoreReset+0x64>)
 8003cc2:	4293      	cmp	r3, r2
 8003cc4:	d901      	bls.n	8003cca <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8003cc6:	2303      	movs	r3, #3
 8003cc8:	e01b      	b.n	8003d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	691b      	ldr	r3, [r3, #16]
 8003cce:	2b00      	cmp	r3, #0
 8003cd0:	daf2      	bge.n	8003cb8 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f043 0201 	orr.w	r2, r3, #1
 8003cde:	687b      	ldr	r3, [r7, #4]
 8003ce0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8003ce2:	68fb      	ldr	r3, [r7, #12]
 8003ce4:	3301      	adds	r3, #1
 8003ce6:	60fb      	str	r3, [r7, #12]
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	4a09      	ldr	r2, [pc, #36]	; (8003d10 <USB_CoreReset+0x64>)
 8003cec:	4293      	cmp	r3, r2
 8003cee:	d901      	bls.n	8003cf4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8003cf0:	2303      	movs	r3, #3
 8003cf2:	e006      	b.n	8003d02 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	691b      	ldr	r3, [r3, #16]
 8003cf8:	f003 0301 	and.w	r3, r3, #1
 8003cfc:	2b01      	cmp	r3, #1
 8003cfe:	d0f0      	beq.n	8003ce2 <USB_CoreReset+0x36>

  return HAL_OK;
 8003d00:	2300      	movs	r3, #0
}
 8003d02:	4618      	mov	r0, r3
 8003d04:	3714      	adds	r7, #20
 8003d06:	46bd      	mov	sp, r7
 8003d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d0c:	4770      	bx	lr
 8003d0e:	bf00      	nop
 8003d10:	00030d40 	.word	0x00030d40

08003d14 <__libc_init_array>:
 8003d14:	b570      	push	{r4, r5, r6, lr}
 8003d16:	4d0d      	ldr	r5, [pc, #52]	; (8003d4c <__libc_init_array+0x38>)
 8003d18:	4c0d      	ldr	r4, [pc, #52]	; (8003d50 <__libc_init_array+0x3c>)
 8003d1a:	1b64      	subs	r4, r4, r5
 8003d1c:	10a4      	asrs	r4, r4, #2
 8003d1e:	2600      	movs	r6, #0
 8003d20:	42a6      	cmp	r6, r4
 8003d22:	d109      	bne.n	8003d38 <__libc_init_array+0x24>
 8003d24:	4d0b      	ldr	r5, [pc, #44]	; (8003d54 <__libc_init_array+0x40>)
 8003d26:	4c0c      	ldr	r4, [pc, #48]	; (8003d58 <__libc_init_array+0x44>)
 8003d28:	f000 f820 	bl	8003d6c <_init>
 8003d2c:	1b64      	subs	r4, r4, r5
 8003d2e:	10a4      	asrs	r4, r4, #2
 8003d30:	2600      	movs	r6, #0
 8003d32:	42a6      	cmp	r6, r4
 8003d34:	d105      	bne.n	8003d42 <__libc_init_array+0x2e>
 8003d36:	bd70      	pop	{r4, r5, r6, pc}
 8003d38:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d3c:	4798      	blx	r3
 8003d3e:	3601      	adds	r6, #1
 8003d40:	e7ee      	b.n	8003d20 <__libc_init_array+0xc>
 8003d42:	f855 3b04 	ldr.w	r3, [r5], #4
 8003d46:	4798      	blx	r3
 8003d48:	3601      	adds	r6, #1
 8003d4a:	e7f2      	b.n	8003d32 <__libc_init_array+0x1e>
 8003d4c:	08003da4 	.word	0x08003da4
 8003d50:	08003da4 	.word	0x08003da4
 8003d54:	08003da4 	.word	0x08003da4
 8003d58:	08003da8 	.word	0x08003da8

08003d5c <memset>:
 8003d5c:	4402      	add	r2, r0
 8003d5e:	4603      	mov	r3, r0
 8003d60:	4293      	cmp	r3, r2
 8003d62:	d100      	bne.n	8003d66 <memset+0xa>
 8003d64:	4770      	bx	lr
 8003d66:	f803 1b01 	strb.w	r1, [r3], #1
 8003d6a:	e7f9      	b.n	8003d60 <memset+0x4>

08003d6c <_init>:
 8003d6c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d6e:	bf00      	nop
 8003d70:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d72:	bc08      	pop	{r3}
 8003d74:	469e      	mov	lr, r3
 8003d76:	4770      	bx	lr

08003d78 <_fini>:
 8003d78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003d7a:	bf00      	nop
 8003d7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003d7e:	bc08      	pop	{r3}
 8003d80:	469e      	mov	lr, r3
 8003d82:	4770      	bx	lr
