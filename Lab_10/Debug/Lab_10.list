
Lab_10.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000488c  080001c8  080001c8  000101c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000018  08004a54  08004a54  00014a54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004a6c  08004a6c  00020020  2**0
                  CONTENTS
  4 .ARM          00000008  08004a6c  08004a6c  00014a6c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08004a74  08004a74  00020020  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004a74  08004a74  00014a74  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08004a78  08004a78  00014a78  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000020  20000000  08004a7c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000056c  20000020  08004a9c  00020020  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000058c  08004a9c  0002058c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020020  2**0
                  CONTENTS, READONLY
 12 .debug_info   00013431  00000000  00000000  00020050  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002755  00000000  00000000  00033481  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011b8  00000000  00000000  00035bd8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c0  00000000  00000000  00036d90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026b28  00000000  00000000  00037e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013968  00000000  00000000  0005e978  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f47a8  00000000  00000000  000722e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  00166a88  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004bd0  00000000  00000000  00166adc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	20000020 	.word	0x20000020
 80001e4:	00000000 	.word	0x00000000
 80001e8:	08004a3c 	.word	0x08004a3c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000024 	.word	0x20000024
 8000204:	08004a3c 	.word	0x08004a3c

08000208 <__aeabi_uldivmod>:
 8000208:	b953      	cbnz	r3, 8000220 <__aeabi_uldivmod+0x18>
 800020a:	b94a      	cbnz	r2, 8000220 <__aeabi_uldivmod+0x18>
 800020c:	2900      	cmp	r1, #0
 800020e:	bf08      	it	eq
 8000210:	2800      	cmpeq	r0, #0
 8000212:	bf1c      	itt	ne
 8000214:	f04f 31ff 	movne.w	r1, #4294967295
 8000218:	f04f 30ff 	movne.w	r0, #4294967295
 800021c:	f000 b96e 	b.w	80004fc <__aeabi_idiv0>
 8000220:	f1ad 0c08 	sub.w	ip, sp, #8
 8000224:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000228:	f000 f806 	bl	8000238 <__udivmoddi4>
 800022c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000230:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000234:	b004      	add	sp, #16
 8000236:	4770      	bx	lr

08000238 <__udivmoddi4>:
 8000238:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800023c:	9d08      	ldr	r5, [sp, #32]
 800023e:	4604      	mov	r4, r0
 8000240:	468c      	mov	ip, r1
 8000242:	2b00      	cmp	r3, #0
 8000244:	f040 8083 	bne.w	800034e <__udivmoddi4+0x116>
 8000248:	428a      	cmp	r2, r1
 800024a:	4617      	mov	r7, r2
 800024c:	d947      	bls.n	80002de <__udivmoddi4+0xa6>
 800024e:	fab2 f282 	clz	r2, r2
 8000252:	b142      	cbz	r2, 8000266 <__udivmoddi4+0x2e>
 8000254:	f1c2 0020 	rsb	r0, r2, #32
 8000258:	fa24 f000 	lsr.w	r0, r4, r0
 800025c:	4091      	lsls	r1, r2
 800025e:	4097      	lsls	r7, r2
 8000260:	ea40 0c01 	orr.w	ip, r0, r1
 8000264:	4094      	lsls	r4, r2
 8000266:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800026a:	0c23      	lsrs	r3, r4, #16
 800026c:	fbbc f6f8 	udiv	r6, ip, r8
 8000270:	fa1f fe87 	uxth.w	lr, r7
 8000274:	fb08 c116 	mls	r1, r8, r6, ip
 8000278:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027c:	fb06 f10e 	mul.w	r1, r6, lr
 8000280:	4299      	cmp	r1, r3
 8000282:	d909      	bls.n	8000298 <__udivmoddi4+0x60>
 8000284:	18fb      	adds	r3, r7, r3
 8000286:	f106 30ff 	add.w	r0, r6, #4294967295
 800028a:	f080 8119 	bcs.w	80004c0 <__udivmoddi4+0x288>
 800028e:	4299      	cmp	r1, r3
 8000290:	f240 8116 	bls.w	80004c0 <__udivmoddi4+0x288>
 8000294:	3e02      	subs	r6, #2
 8000296:	443b      	add	r3, r7
 8000298:	1a5b      	subs	r3, r3, r1
 800029a:	b2a4      	uxth	r4, r4
 800029c:	fbb3 f0f8 	udiv	r0, r3, r8
 80002a0:	fb08 3310 	mls	r3, r8, r0, r3
 80002a4:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 80002a8:	fb00 fe0e 	mul.w	lr, r0, lr
 80002ac:	45a6      	cmp	lr, r4
 80002ae:	d909      	bls.n	80002c4 <__udivmoddi4+0x8c>
 80002b0:	193c      	adds	r4, r7, r4
 80002b2:	f100 33ff 	add.w	r3, r0, #4294967295
 80002b6:	f080 8105 	bcs.w	80004c4 <__udivmoddi4+0x28c>
 80002ba:	45a6      	cmp	lr, r4
 80002bc:	f240 8102 	bls.w	80004c4 <__udivmoddi4+0x28c>
 80002c0:	3802      	subs	r0, #2
 80002c2:	443c      	add	r4, r7
 80002c4:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002c8:	eba4 040e 	sub.w	r4, r4, lr
 80002cc:	2600      	movs	r6, #0
 80002ce:	b11d      	cbz	r5, 80002d8 <__udivmoddi4+0xa0>
 80002d0:	40d4      	lsrs	r4, r2
 80002d2:	2300      	movs	r3, #0
 80002d4:	e9c5 4300 	strd	r4, r3, [r5]
 80002d8:	4631      	mov	r1, r6
 80002da:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002de:	b902      	cbnz	r2, 80002e2 <__udivmoddi4+0xaa>
 80002e0:	deff      	udf	#255	; 0xff
 80002e2:	fab2 f282 	clz	r2, r2
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d150      	bne.n	800038c <__udivmoddi4+0x154>
 80002ea:	1bcb      	subs	r3, r1, r7
 80002ec:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002f0:	fa1f f887 	uxth.w	r8, r7
 80002f4:	2601      	movs	r6, #1
 80002f6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002fa:	0c21      	lsrs	r1, r4, #16
 80002fc:	fb0e 331c 	mls	r3, lr, ip, r3
 8000300:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000304:	fb08 f30c 	mul.w	r3, r8, ip
 8000308:	428b      	cmp	r3, r1
 800030a:	d907      	bls.n	800031c <__udivmoddi4+0xe4>
 800030c:	1879      	adds	r1, r7, r1
 800030e:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000312:	d202      	bcs.n	800031a <__udivmoddi4+0xe2>
 8000314:	428b      	cmp	r3, r1
 8000316:	f200 80e9 	bhi.w	80004ec <__udivmoddi4+0x2b4>
 800031a:	4684      	mov	ip, r0
 800031c:	1ac9      	subs	r1, r1, r3
 800031e:	b2a3      	uxth	r3, r4
 8000320:	fbb1 f0fe 	udiv	r0, r1, lr
 8000324:	fb0e 1110 	mls	r1, lr, r0, r1
 8000328:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 800032c:	fb08 f800 	mul.w	r8, r8, r0
 8000330:	45a0      	cmp	r8, r4
 8000332:	d907      	bls.n	8000344 <__udivmoddi4+0x10c>
 8000334:	193c      	adds	r4, r7, r4
 8000336:	f100 33ff 	add.w	r3, r0, #4294967295
 800033a:	d202      	bcs.n	8000342 <__udivmoddi4+0x10a>
 800033c:	45a0      	cmp	r8, r4
 800033e:	f200 80d9 	bhi.w	80004f4 <__udivmoddi4+0x2bc>
 8000342:	4618      	mov	r0, r3
 8000344:	eba4 0408 	sub.w	r4, r4, r8
 8000348:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800034c:	e7bf      	b.n	80002ce <__udivmoddi4+0x96>
 800034e:	428b      	cmp	r3, r1
 8000350:	d909      	bls.n	8000366 <__udivmoddi4+0x12e>
 8000352:	2d00      	cmp	r5, #0
 8000354:	f000 80b1 	beq.w	80004ba <__udivmoddi4+0x282>
 8000358:	2600      	movs	r6, #0
 800035a:	e9c5 0100 	strd	r0, r1, [r5]
 800035e:	4630      	mov	r0, r6
 8000360:	4631      	mov	r1, r6
 8000362:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000366:	fab3 f683 	clz	r6, r3
 800036a:	2e00      	cmp	r6, #0
 800036c:	d14a      	bne.n	8000404 <__udivmoddi4+0x1cc>
 800036e:	428b      	cmp	r3, r1
 8000370:	d302      	bcc.n	8000378 <__udivmoddi4+0x140>
 8000372:	4282      	cmp	r2, r0
 8000374:	f200 80b8 	bhi.w	80004e8 <__udivmoddi4+0x2b0>
 8000378:	1a84      	subs	r4, r0, r2
 800037a:	eb61 0103 	sbc.w	r1, r1, r3
 800037e:	2001      	movs	r0, #1
 8000380:	468c      	mov	ip, r1
 8000382:	2d00      	cmp	r5, #0
 8000384:	d0a8      	beq.n	80002d8 <__udivmoddi4+0xa0>
 8000386:	e9c5 4c00 	strd	r4, ip, [r5]
 800038a:	e7a5      	b.n	80002d8 <__udivmoddi4+0xa0>
 800038c:	f1c2 0320 	rsb	r3, r2, #32
 8000390:	fa20 f603 	lsr.w	r6, r0, r3
 8000394:	4097      	lsls	r7, r2
 8000396:	fa01 f002 	lsl.w	r0, r1, r2
 800039a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800039e:	40d9      	lsrs	r1, r3
 80003a0:	4330      	orrs	r0, r6
 80003a2:	0c03      	lsrs	r3, r0, #16
 80003a4:	fbb1 f6fe 	udiv	r6, r1, lr
 80003a8:	fa1f f887 	uxth.w	r8, r7
 80003ac:	fb0e 1116 	mls	r1, lr, r6, r1
 80003b0:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003b4:	fb06 f108 	mul.w	r1, r6, r8
 80003b8:	4299      	cmp	r1, r3
 80003ba:	fa04 f402 	lsl.w	r4, r4, r2
 80003be:	d909      	bls.n	80003d4 <__udivmoddi4+0x19c>
 80003c0:	18fb      	adds	r3, r7, r3
 80003c2:	f106 3cff 	add.w	ip, r6, #4294967295
 80003c6:	f080 808d 	bcs.w	80004e4 <__udivmoddi4+0x2ac>
 80003ca:	4299      	cmp	r1, r3
 80003cc:	f240 808a 	bls.w	80004e4 <__udivmoddi4+0x2ac>
 80003d0:	3e02      	subs	r6, #2
 80003d2:	443b      	add	r3, r7
 80003d4:	1a5b      	subs	r3, r3, r1
 80003d6:	b281      	uxth	r1, r0
 80003d8:	fbb3 f0fe 	udiv	r0, r3, lr
 80003dc:	fb0e 3310 	mls	r3, lr, r0, r3
 80003e0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003e4:	fb00 f308 	mul.w	r3, r0, r8
 80003e8:	428b      	cmp	r3, r1
 80003ea:	d907      	bls.n	80003fc <__udivmoddi4+0x1c4>
 80003ec:	1879      	adds	r1, r7, r1
 80003ee:	f100 3cff 	add.w	ip, r0, #4294967295
 80003f2:	d273      	bcs.n	80004dc <__udivmoddi4+0x2a4>
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d971      	bls.n	80004dc <__udivmoddi4+0x2a4>
 80003f8:	3802      	subs	r0, #2
 80003fa:	4439      	add	r1, r7
 80003fc:	1acb      	subs	r3, r1, r3
 80003fe:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000402:	e778      	b.n	80002f6 <__udivmoddi4+0xbe>
 8000404:	f1c6 0c20 	rsb	ip, r6, #32
 8000408:	fa03 f406 	lsl.w	r4, r3, r6
 800040c:	fa22 f30c 	lsr.w	r3, r2, ip
 8000410:	431c      	orrs	r4, r3
 8000412:	fa20 f70c 	lsr.w	r7, r0, ip
 8000416:	fa01 f306 	lsl.w	r3, r1, r6
 800041a:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 800041e:	fa21 f10c 	lsr.w	r1, r1, ip
 8000422:	431f      	orrs	r7, r3
 8000424:	0c3b      	lsrs	r3, r7, #16
 8000426:	fbb1 f9fe 	udiv	r9, r1, lr
 800042a:	fa1f f884 	uxth.w	r8, r4
 800042e:	fb0e 1119 	mls	r1, lr, r9, r1
 8000432:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000436:	fb09 fa08 	mul.w	sl, r9, r8
 800043a:	458a      	cmp	sl, r1
 800043c:	fa02 f206 	lsl.w	r2, r2, r6
 8000440:	fa00 f306 	lsl.w	r3, r0, r6
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x220>
 8000446:	1861      	adds	r1, r4, r1
 8000448:	f109 30ff 	add.w	r0, r9, #4294967295
 800044c:	d248      	bcs.n	80004e0 <__udivmoddi4+0x2a8>
 800044e:	458a      	cmp	sl, r1
 8000450:	d946      	bls.n	80004e0 <__udivmoddi4+0x2a8>
 8000452:	f1a9 0902 	sub.w	r9, r9, #2
 8000456:	4421      	add	r1, r4
 8000458:	eba1 010a 	sub.w	r1, r1, sl
 800045c:	b2bf      	uxth	r7, r7
 800045e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000462:	fb0e 1110 	mls	r1, lr, r0, r1
 8000466:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800046a:	fb00 f808 	mul.w	r8, r0, r8
 800046e:	45b8      	cmp	r8, r7
 8000470:	d907      	bls.n	8000482 <__udivmoddi4+0x24a>
 8000472:	19e7      	adds	r7, r4, r7
 8000474:	f100 31ff 	add.w	r1, r0, #4294967295
 8000478:	d22e      	bcs.n	80004d8 <__udivmoddi4+0x2a0>
 800047a:	45b8      	cmp	r8, r7
 800047c:	d92c      	bls.n	80004d8 <__udivmoddi4+0x2a0>
 800047e:	3802      	subs	r0, #2
 8000480:	4427      	add	r7, r4
 8000482:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000486:	eba7 0708 	sub.w	r7, r7, r8
 800048a:	fba0 8902 	umull	r8, r9, r0, r2
 800048e:	454f      	cmp	r7, r9
 8000490:	46c6      	mov	lr, r8
 8000492:	4649      	mov	r1, r9
 8000494:	d31a      	bcc.n	80004cc <__udivmoddi4+0x294>
 8000496:	d017      	beq.n	80004c8 <__udivmoddi4+0x290>
 8000498:	b15d      	cbz	r5, 80004b2 <__udivmoddi4+0x27a>
 800049a:	ebb3 020e 	subs.w	r2, r3, lr
 800049e:	eb67 0701 	sbc.w	r7, r7, r1
 80004a2:	fa07 fc0c 	lsl.w	ip, r7, ip
 80004a6:	40f2      	lsrs	r2, r6
 80004a8:	ea4c 0202 	orr.w	r2, ip, r2
 80004ac:	40f7      	lsrs	r7, r6
 80004ae:	e9c5 2700 	strd	r2, r7, [r5]
 80004b2:	2600      	movs	r6, #0
 80004b4:	4631      	mov	r1, r6
 80004b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004ba:	462e      	mov	r6, r5
 80004bc:	4628      	mov	r0, r5
 80004be:	e70b      	b.n	80002d8 <__udivmoddi4+0xa0>
 80004c0:	4606      	mov	r6, r0
 80004c2:	e6e9      	b.n	8000298 <__udivmoddi4+0x60>
 80004c4:	4618      	mov	r0, r3
 80004c6:	e6fd      	b.n	80002c4 <__udivmoddi4+0x8c>
 80004c8:	4543      	cmp	r3, r8
 80004ca:	d2e5      	bcs.n	8000498 <__udivmoddi4+0x260>
 80004cc:	ebb8 0e02 	subs.w	lr, r8, r2
 80004d0:	eb69 0104 	sbc.w	r1, r9, r4
 80004d4:	3801      	subs	r0, #1
 80004d6:	e7df      	b.n	8000498 <__udivmoddi4+0x260>
 80004d8:	4608      	mov	r0, r1
 80004da:	e7d2      	b.n	8000482 <__udivmoddi4+0x24a>
 80004dc:	4660      	mov	r0, ip
 80004de:	e78d      	b.n	80003fc <__udivmoddi4+0x1c4>
 80004e0:	4681      	mov	r9, r0
 80004e2:	e7b9      	b.n	8000458 <__udivmoddi4+0x220>
 80004e4:	4666      	mov	r6, ip
 80004e6:	e775      	b.n	80003d4 <__udivmoddi4+0x19c>
 80004e8:	4630      	mov	r0, r6
 80004ea:	e74a      	b.n	8000382 <__udivmoddi4+0x14a>
 80004ec:	f1ac 0c02 	sub.w	ip, ip, #2
 80004f0:	4439      	add	r1, r7
 80004f2:	e713      	b.n	800031c <__udivmoddi4+0xe4>
 80004f4:	3802      	subs	r0, #2
 80004f6:	443c      	add	r4, r7
 80004f8:	e724      	b.n	8000344 <__udivmoddi4+0x10c>
 80004fa:	bf00      	nop

080004fc <__aeabi_idiv0>:
 80004fc:	4770      	bx	lr
 80004fe:	bf00      	nop

08000500 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000500:	b580      	push	{r7, lr}
 8000502:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000504:	f000 fd25 	bl	8000f52 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000508:	f000 f812 	bl	8000530 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800050c:	f000 f9c8 	bl	80008a0 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000510:	f000 f968 	bl	80007e4 <MX_USART3_UART_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000514:	f000 f996 	bl	8000844 <MX_USB_OTG_FS_PCD_Init>
  MX_ADC1_Init();
 8000518:	f000 f89a 	bl	8000650 <MX_ADC1_Init>
  MX_DAC_Init();
 800051c:	f000 f8ea 	bl	80006f4 <MX_DAC_Init>
  MX_TIM3_Init();
 8000520:	f000 f912 	bl	8000748 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim3);
 8000524:	4801      	ldr	r0, [pc, #4]	; (800052c <main+0x2c>)
 8000526:	f002 ff37 	bl	8003398 <HAL_TIM_Base_Start_IT>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800052a:	e7fe      	b.n	800052a <main+0x2a>
 800052c:	200004dc 	.word	0x200004dc

08000530 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000530:	b580      	push	{r7, lr}
 8000532:	b0b4      	sub	sp, #208	; 0xd0
 8000534:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000536:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 800053a:	2230      	movs	r2, #48	; 0x30
 800053c:	2100      	movs	r1, #0
 800053e:	4618      	mov	r0, r3
 8000540:	f004 fa74 	bl	8004a2c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000544:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000548:	2200      	movs	r2, #0
 800054a:	601a      	str	r2, [r3, #0]
 800054c:	605a      	str	r2, [r3, #4]
 800054e:	609a      	str	r2, [r3, #8]
 8000550:	60da      	str	r2, [r3, #12]
 8000552:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000554:	f107 0308 	add.w	r3, r7, #8
 8000558:	2284      	movs	r2, #132	; 0x84
 800055a:	2100      	movs	r1, #0
 800055c:	4618      	mov	r0, r3
 800055e:	f004 fa65 	bl	8004a2c <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000562:	f001 fe1b 	bl	800219c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000566:	4b37      	ldr	r3, [pc, #220]	; (8000644 <SystemClock_Config+0x114>)
 8000568:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800056a:	4a36      	ldr	r2, [pc, #216]	; (8000644 <SystemClock_Config+0x114>)
 800056c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000570:	6413      	str	r3, [r2, #64]	; 0x40
 8000572:	4b34      	ldr	r3, [pc, #208]	; (8000644 <SystemClock_Config+0x114>)
 8000574:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000576:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800057a:	607b      	str	r3, [r7, #4]
 800057c:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 800057e:	4b32      	ldr	r3, [pc, #200]	; (8000648 <SystemClock_Config+0x118>)
 8000580:	681b      	ldr	r3, [r3, #0]
 8000582:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000586:	4a30      	ldr	r2, [pc, #192]	; (8000648 <SystemClock_Config+0x118>)
 8000588:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800058c:	6013      	str	r3, [r2, #0]
 800058e:	4b2e      	ldr	r3, [pc, #184]	; (8000648 <SystemClock_Config+0x118>)
 8000590:	681b      	ldr	r3, [r3, #0]
 8000592:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000596:	603b      	str	r3, [r7, #0]
 8000598:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800059a:	2301      	movs	r3, #1
 800059c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80005a0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80005a4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80005a8:	2302      	movs	r3, #2
 80005aa:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80005ae:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80005b2:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 80005b6:	2304      	movs	r3, #4
 80005b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 80005bc:	2348      	movs	r3, #72	; 0x48
 80005be:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80005c2:	2302      	movs	r3, #2
 80005c4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80005c8:	2303      	movs	r3, #3
 80005ca:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005ce:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 80005d2:	4618      	mov	r0, r3
 80005d4:	f001 fdf2 	bl	80021bc <HAL_RCC_OscConfig>
 80005d8:	4603      	mov	r3, r0
 80005da:	2b00      	cmp	r3, #0
 80005dc:	d001      	beq.n	80005e2 <SystemClock_Config+0xb2>
  {
    Error_Handler();
 80005de:	f000 fad9 	bl	8000b94 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80005e2:	230f      	movs	r3, #15
 80005e4:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80005e8:	2302      	movs	r3, #2
 80005ea:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80005ee:	2300      	movs	r3, #0
 80005f0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80005f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80005f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80005fc:	2300      	movs	r3, #0
 80005fe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000602:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000606:	2102      	movs	r1, #2
 8000608:	4618      	mov	r0, r3
 800060a:	f002 f87b 	bl	8002704 <HAL_RCC_ClockConfig>
 800060e:	4603      	mov	r3, r0
 8000610:	2b00      	cmp	r3, #0
 8000612:	d001      	beq.n	8000618 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 8000614:	f000 fabe 	bl	8000b94 <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8000618:	4b0c      	ldr	r3, [pc, #48]	; (800064c <SystemClock_Config+0x11c>)
 800061a:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 800061c:	2300      	movs	r3, #0
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8000620:	2300      	movs	r3, #0
 8000622:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000626:	f107 0308 	add.w	r3, r7, #8
 800062a:	4618      	mov	r0, r3
 800062c:	f002 fa6c 	bl	8002b08 <HAL_RCCEx_PeriphCLKConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0x10a>
  {
    Error_Handler();
 8000636:	f000 faad 	bl	8000b94 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	37d0      	adds	r7, #208	; 0xd0
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000
 800064c:	00200100 	.word	0x00200100

08000650 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <MX_ADC1_Init+0x9c>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC1_Init+0x98>)
 800066a:	2200      	movs	r2, #0
 800066c:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 800066e:	4b1e      	ldr	r3, [pc, #120]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000670:	2200      	movs	r2, #0
 8000672:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000674:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000676:	2200      	movs	r2, #0
 8000678:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800067a:	4b1b      	ldr	r3, [pc, #108]	; (80006e8 <MX_ADC1_Init+0x98>)
 800067c:	2200      	movs	r2, #0
 800067e:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000680:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000682:	2200      	movs	r2, #0
 8000684:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000688:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_ADC1_Init+0x98>)
 800068a:	2200      	movs	r2, #0
 800068c:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800068e:	4b16      	ldr	r3, [pc, #88]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000690:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_ADC1_Init+0xa0>)
 8000692:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000694:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_ADC1_Init+0x98>)
 8000696:	2200      	movs	r2, #0
 8000698:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 800069a:	4b13      	ldr	r3, [pc, #76]	; (80006e8 <MX_ADC1_Init+0x98>)
 800069c:	2201      	movs	r2, #1
 800069e:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80006a0:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_ADC1_Init+0x98>)
 80006a2:	2200      	movs	r2, #0
 80006a4:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006a8:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_ADC1_Init+0x98>)
 80006aa:	2201      	movs	r2, #1
 80006ac:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 80006ae:	480e      	ldr	r0, [pc, #56]	; (80006e8 <MX_ADC1_Init+0x98>)
 80006b0:	f000 fcd0 	bl	8001054 <HAL_ADC_Init>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 80006ba:	f000 fa6b 	bl	8000b94 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_3;
 80006be:	2303      	movs	r3, #3
 80006c0:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c2:	2301      	movs	r3, #1
 80006c4:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c6:	2300      	movs	r3, #0
 80006c8:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80006ca:	463b      	mov	r3, r7
 80006cc:	4619      	mov	r1, r3
 80006ce:	4806      	ldr	r0, [pc, #24]	; (80006e8 <MX_ADC1_Init+0x98>)
 80006d0:	f000 fe6a 	bl	80013a8 <HAL_ADC_ConfigChannel>
 80006d4:	4603      	mov	r3, r0
 80006d6:	2b00      	cmp	r3, #0
 80006d8:	d001      	beq.n	80006de <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 80006da:	f000 fa5b 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80006de:	bf00      	nop
 80006e0:	3710      	adds	r7, #16
 80006e2:	46bd      	mov	sp, r7
 80006e4:	bd80      	pop	{r7, pc}
 80006e6:	bf00      	nop
 80006e8:	20000528 	.word	0x20000528
 80006ec:	40012000 	.word	0x40012000
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b082      	sub	sp, #8
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000702:	4b0f      	ldr	r3, [pc, #60]	; (8000740 <MX_DAC_Init+0x4c>)
 8000704:	4a0f      	ldr	r2, [pc, #60]	; (8000744 <MX_DAC_Init+0x50>)
 8000706:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000708:	480d      	ldr	r0, [pc, #52]	; (8000740 <MX_DAC_Init+0x4c>)
 800070a:	f001 f9a2 	bl	8001a52 <HAL_DAC_Init>
 800070e:	4603      	mov	r3, r0
 8000710:	2b00      	cmp	r3, #0
 8000712:	d001      	beq.n	8000718 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000714:	f000 fa3e 	bl	8000b94 <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000718:	2300      	movs	r3, #0
 800071a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 800071c:	2300      	movs	r3, #0
 800071e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000720:	463b      	mov	r3, r7
 8000722:	2200      	movs	r2, #0
 8000724:	4619      	mov	r1, r3
 8000726:	4806      	ldr	r0, [pc, #24]	; (8000740 <MX_DAC_Init+0x4c>)
 8000728:	f001 f9da 	bl	8001ae0 <HAL_DAC_ConfigChannel>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000732:	f000 fa2f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	3708      	adds	r7, #8
 800073a:	46bd      	mov	sp, r7
 800073c:	bd80      	pop	{r7, pc}
 800073e:	bf00      	nop
 8000740:	20000570 	.word	0x20000570
 8000744:	40007400 	.word	0x40007400

08000748 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	b088      	sub	sp, #32
 800074c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800074e:	f107 0310 	add.w	r3, r7, #16
 8000752:	2200      	movs	r2, #0
 8000754:	601a      	str	r2, [r3, #0]
 8000756:	605a      	str	r2, [r3, #4]
 8000758:	609a      	str	r2, [r3, #8]
 800075a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800075c:	1d3b      	adds	r3, r7, #4
 800075e:	2200      	movs	r2, #0
 8000760:	601a      	str	r2, [r3, #0]
 8000762:	605a      	str	r2, [r3, #4]
 8000764:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000766:	4b1d      	ldr	r3, [pc, #116]	; (80007dc <MX_TIM3_Init+0x94>)
 8000768:	4a1d      	ldr	r2, [pc, #116]	; (80007e0 <MX_TIM3_Init+0x98>)
 800076a:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 8;
 800076c:	4b1b      	ldr	r3, [pc, #108]	; (80007dc <MX_TIM3_Init+0x94>)
 800076e:	2208      	movs	r2, #8
 8000770:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000772:	4b1a      	ldr	r3, [pc, #104]	; (80007dc <MX_TIM3_Init+0x94>)
 8000774:	2200      	movs	r2, #0
 8000776:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 999;
 8000778:	4b18      	ldr	r3, [pc, #96]	; (80007dc <MX_TIM3_Init+0x94>)
 800077a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800077e:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000780:	4b16      	ldr	r3, [pc, #88]	; (80007dc <MX_TIM3_Init+0x94>)
 8000782:	2200      	movs	r2, #0
 8000784:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000786:	4b15      	ldr	r3, [pc, #84]	; (80007dc <MX_TIM3_Init+0x94>)
 8000788:	2200      	movs	r2, #0
 800078a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800078c:	4813      	ldr	r0, [pc, #76]	; (80007dc <MX_TIM3_Init+0x94>)
 800078e:	f002 fdab 	bl	80032e8 <HAL_TIM_Base_Init>
 8000792:	4603      	mov	r3, r0
 8000794:	2b00      	cmp	r3, #0
 8000796:	d001      	beq.n	800079c <MX_TIM3_Init+0x54>
  {
    Error_Handler();
 8000798:	f000 f9fc 	bl	8000b94 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800079c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007a0:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80007a2:	f107 0310 	add.w	r3, r7, #16
 80007a6:	4619      	mov	r1, r3
 80007a8:	480c      	ldr	r0, [pc, #48]	; (80007dc <MX_TIM3_Init+0x94>)
 80007aa:	f002 ff8d 	bl	80036c8 <HAL_TIM_ConfigClockSource>
 80007ae:	4603      	mov	r3, r0
 80007b0:	2b00      	cmp	r3, #0
 80007b2:	d001      	beq.n	80007b8 <MX_TIM3_Init+0x70>
  {
    Error_Handler();
 80007b4:	f000 f9ee 	bl	8000b94 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80007b8:	2320      	movs	r3, #32
 80007ba:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007bc:	2300      	movs	r3, #0
 80007be:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80007c0:	1d3b      	adds	r3, r7, #4
 80007c2:	4619      	mov	r1, r3
 80007c4:	4805      	ldr	r0, [pc, #20]	; (80007dc <MX_TIM3_Init+0x94>)
 80007c6:	f003 f9a7 	bl	8003b18 <HAL_TIMEx_MasterConfigSynchronization>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <MX_TIM3_Init+0x8c>
  {
    Error_Handler();
 80007d0:	f000 f9e0 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80007d4:	bf00      	nop
 80007d6:	3720      	adds	r7, #32
 80007d8:	46bd      	mov	sp, r7
 80007da:	bd80      	pop	{r7, pc}
 80007dc:	200004dc 	.word	0x200004dc
 80007e0:	40000400 	.word	0x40000400

080007e4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 80007e4:	b580      	push	{r7, lr}
 80007e6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 80007e8:	4b14      	ldr	r3, [pc, #80]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007ea:	4a15      	ldr	r2, [pc, #84]	; (8000840 <MX_USART3_UART_Init+0x5c>)
 80007ec:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 80007ee:	4b13      	ldr	r3, [pc, #76]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80007f4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 80007f6:	4b11      	ldr	r3, [pc, #68]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007f8:	2200      	movs	r2, #0
 80007fa:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 80007fc:	4b0f      	ldr	r3, [pc, #60]	; (800083c <MX_USART3_UART_Init+0x58>)
 80007fe:	2200      	movs	r2, #0
 8000800:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8000802:	4b0e      	ldr	r3, [pc, #56]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000804:	2200      	movs	r2, #0
 8000806:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8000808:	4b0c      	ldr	r3, [pc, #48]	; (800083c <MX_USART3_UART_Init+0x58>)
 800080a:	220c      	movs	r2, #12
 800080c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800080e:	4b0b      	ldr	r3, [pc, #44]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000810:	2200      	movs	r2, #0
 8000812:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8000814:	4b09      	ldr	r3, [pc, #36]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000816:	2200      	movs	r2, #0
 8000818:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800081a:	4b08      	ldr	r3, [pc, #32]	; (800083c <MX_USART3_UART_Init+0x58>)
 800081c:	2200      	movs	r2, #0
 800081e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000820:	4b06      	ldr	r3, [pc, #24]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000822:	2200      	movs	r2, #0
 8000824:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8000826:	4805      	ldr	r0, [pc, #20]	; (800083c <MX_USART3_UART_Init+0x58>)
 8000828:	f003 fa22 	bl	8003c70 <HAL_UART_Init>
 800082c:	4603      	mov	r3, r0
 800082e:	2b00      	cmp	r3, #0
 8000830:	d001      	beq.n	8000836 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8000832:	f000 f9af 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8000836:	bf00      	nop
 8000838:	bd80      	pop	{r7, pc}
 800083a:	bf00      	nop
 800083c:	20000054 	.word	0x20000054
 8000840:	40004800 	.word	0x40004800

08000844 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 8000844:	b580      	push	{r7, lr}
 8000846:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 8000848:	4b14      	ldr	r3, [pc, #80]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800084a:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 800084e:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 8000850:	4b12      	ldr	r3, [pc, #72]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000852:	2206      	movs	r2, #6
 8000854:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 8000856:	4b11      	ldr	r3, [pc, #68]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000858:	2202      	movs	r2, #2
 800085a:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 800085c:	4b0f      	ldr	r3, [pc, #60]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800085e:	2200      	movs	r2, #0
 8000860:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 8000862:	4b0e      	ldr	r3, [pc, #56]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000864:	2202      	movs	r2, #2
 8000866:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 8000868:	4b0c      	ldr	r3, [pc, #48]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800086a:	2201      	movs	r2, #1
 800086c:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 800086e:	4b0b      	ldr	r3, [pc, #44]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000870:	2200      	movs	r2, #0
 8000872:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 8000874:	4b09      	ldr	r3, [pc, #36]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000876:	2200      	movs	r2, #0
 8000878:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 800087a:	4b08      	ldr	r3, [pc, #32]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 800087c:	2201      	movs	r2, #1
 800087e:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 8000880:	4b06      	ldr	r3, [pc, #24]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000882:	2200      	movs	r2, #0
 8000884:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 8000886:	4805      	ldr	r0, [pc, #20]	; (800089c <MX_USB_OTG_FS_PCD_Init+0x58>)
 8000888:	f001 fb3f 	bl	8001f0a <HAL_PCD_Init>
 800088c:	4603      	mov	r3, r0
 800088e:	2b00      	cmp	r3, #0
 8000890:	d001      	beq.n	8000896 <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8000892:	f000 f97f 	bl	8000b94 <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 8000896:	bf00      	nop
 8000898:	bd80      	pop	{r7, pc}
 800089a:	bf00      	nop
 800089c:	200000d8 	.word	0x200000d8

080008a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80008a0:	b580      	push	{r7, lr}
 80008a2:	b08c      	sub	sp, #48	; 0x30
 80008a4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008a6:	f107 031c 	add.w	r3, r7, #28
 80008aa:	2200      	movs	r2, #0
 80008ac:	601a      	str	r2, [r3, #0]
 80008ae:	605a      	str	r2, [r3, #4]
 80008b0:	609a      	str	r2, [r3, #8]
 80008b2:	60da      	str	r2, [r3, #12]
 80008b4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008b6:	4b67      	ldr	r3, [pc, #412]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ba:	4a66      	ldr	r2, [pc, #408]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008bc:	f043 0304 	orr.w	r3, r3, #4
 80008c0:	6313      	str	r3, [r2, #48]	; 0x30
 80008c2:	4b64      	ldr	r3, [pc, #400]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c6:	f003 0304 	and.w	r3, r3, #4
 80008ca:	61bb      	str	r3, [r7, #24]
 80008cc:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008ce:	4b61      	ldr	r3, [pc, #388]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008d2:	4a60      	ldr	r2, [pc, #384]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008d8:	6313      	str	r3, [r2, #48]	; 0x30
 80008da:	4b5e      	ldr	r3, [pc, #376]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008e2:	617b      	str	r3, [r7, #20]
 80008e4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008e6:	4b5b      	ldr	r3, [pc, #364]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	4a5a      	ldr	r2, [pc, #360]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008ec:	f043 0301 	orr.w	r3, r3, #1
 80008f0:	6313      	str	r3, [r2, #48]	; 0x30
 80008f2:	4b58      	ldr	r3, [pc, #352]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 80008f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008f6:	f003 0301 	and.w	r3, r3, #1
 80008fa:	613b      	str	r3, [r7, #16]
 80008fc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80008fe:	4b55      	ldr	r3, [pc, #340]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 8000900:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000902:	4a54      	ldr	r2, [pc, #336]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 8000904:	f043 0302 	orr.w	r3, r3, #2
 8000908:	6313      	str	r3, [r2, #48]	; 0x30
 800090a:	4b52      	ldr	r3, [pc, #328]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 800090c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800090e:	f003 0302 	and.w	r3, r3, #2
 8000912:	60fb      	str	r3, [r7, #12]
 8000914:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000916:	4b4f      	ldr	r3, [pc, #316]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800091a:	4a4e      	ldr	r2, [pc, #312]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 800091c:	f043 0308 	orr.w	r3, r3, #8
 8000920:	6313      	str	r3, [r2, #48]	; 0x30
 8000922:	4b4c      	ldr	r3, [pc, #304]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000926:	f003 0308 	and.w	r3, r3, #8
 800092a:	60bb      	str	r3, [r7, #8]
 800092c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800092e:	4b49      	ldr	r3, [pc, #292]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a48      	ldr	r2, [pc, #288]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 8000934:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b46      	ldr	r3, [pc, #280]	; (8000a54 <MX_GPIO_Init+0x1b4>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000946:	2200      	movs	r2, #0
 8000948:	f244 0181 	movw	r1, #16513	; 0x4081
 800094c:	4842      	ldr	r0, [pc, #264]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 800094e:	f001 fac3 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8000952:	2200      	movs	r2, #0
 8000954:	2140      	movs	r1, #64	; 0x40
 8000956:	4841      	ldr	r0, [pc, #260]	; (8000a5c <MX_GPIO_Init+0x1bc>)
 8000958:	f001 fabe 	bl	8001ed8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800095c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8000960:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000962:	4b3f      	ldr	r3, [pc, #252]	; (8000a60 <MX_GPIO_Init+0x1c0>)
 8000964:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000966:	2300      	movs	r3, #0
 8000968:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800096a:	f107 031c 	add.w	r3, r7, #28
 800096e:	4619      	mov	r1, r3
 8000970:	483c      	ldr	r0, [pc, #240]	; (8000a64 <MX_GPIO_Init+0x1c4>)
 8000972:	f001 f905 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8000976:	2332      	movs	r3, #50	; 0x32
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800097a:	2302      	movs	r3, #2
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097e:	2300      	movs	r3, #0
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000982:	2303      	movs	r3, #3
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000986:	230b      	movs	r3, #11
 8000988:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800098a:	f107 031c 	add.w	r3, r7, #28
 800098e:	4619      	mov	r1, r3
 8000990:	4834      	ldr	r0, [pc, #208]	; (8000a64 <MX_GPIO_Init+0x1c4>)
 8000992:	f001 f8f5 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8000996:	2386      	movs	r3, #134	; 0x86
 8000998:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800099a:	2302      	movs	r3, #2
 800099c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099e:	2300      	movs	r3, #0
 80009a0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009a2:	2303      	movs	r3, #3
 80009a4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009a6:	230b      	movs	r3, #11
 80009a8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80009aa:	f107 031c 	add.w	r3, r7, #28
 80009ae:	4619      	mov	r1, r3
 80009b0:	482d      	ldr	r0, [pc, #180]	; (8000a68 <MX_GPIO_Init+0x1c8>)
 80009b2:	f001 f8e5 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 80009b6:	f244 0381 	movw	r3, #16513	; 0x4081
 80009ba:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009bc:	2301      	movs	r3, #1
 80009be:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009c0:	2300      	movs	r3, #0
 80009c2:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80009c4:	2300      	movs	r3, #0
 80009c6:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80009c8:	f107 031c 	add.w	r3, r7, #28
 80009cc:	4619      	mov	r1, r3
 80009ce:	4822      	ldr	r0, [pc, #136]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80009d0:	f001 f8d6 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 80009d4:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80009d8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80009da:	2302      	movs	r3, #2
 80009dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009de:	2300      	movs	r3, #0
 80009e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80009e2:	2303      	movs	r3, #3
 80009e4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80009e6:	230b      	movs	r3, #11
 80009e8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 80009ea:	f107 031c 	add.w	r3, r7, #28
 80009ee:	4619      	mov	r1, r3
 80009f0:	4819      	ldr	r0, [pc, #100]	; (8000a58 <MX_GPIO_Init+0x1b8>)
 80009f2:	f001 f8c5 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80009f6:	2340      	movs	r3, #64	; 0x40
 80009f8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009fa:	2301      	movs	r3, #1
 80009fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80009fe:	2300      	movs	r3, #0
 8000a00:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000a02:	2300      	movs	r3, #0
 8000a04:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 8000a06:	f107 031c 	add.w	r3, r7, #28
 8000a0a:	4619      	mov	r1, r3
 8000a0c:	4813      	ldr	r0, [pc, #76]	; (8000a5c <MX_GPIO_Init+0x1bc>)
 8000a0e:	f001 f8b7 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000a12:	2380      	movs	r3, #128	; 0x80
 8000a14:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000a16:	2300      	movs	r3, #0
 8000a18:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a1a:	2300      	movs	r3, #0
 8000a1c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	480d      	ldr	r0, [pc, #52]	; (8000a5c <MX_GPIO_Init+0x1bc>)
 8000a26:	f001 f8ab 	bl	8001b80 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 8000a2a:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000a2e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a30:	2302      	movs	r3, #2
 8000a32:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a34:	2300      	movs	r3, #0
 8000a36:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a38:	2303      	movs	r3, #3
 8000a3a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8000a3c:	230b      	movs	r3, #11
 8000a3e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000a40:	f107 031c 	add.w	r3, r7, #28
 8000a44:	4619      	mov	r1, r3
 8000a46:	4805      	ldr	r0, [pc, #20]	; (8000a5c <MX_GPIO_Init+0x1bc>)
 8000a48:	f001 f89a 	bl	8001b80 <HAL_GPIO_Init>

}
 8000a4c:	bf00      	nop
 8000a4e:	3730      	adds	r7, #48	; 0x30
 8000a50:	46bd      	mov	sp, r7
 8000a52:	bd80      	pop	{r7, pc}
 8000a54:	40023800 	.word	0x40023800
 8000a58:	40020400 	.word	0x40020400
 8000a5c:	40021800 	.word	0x40021800
 8000a60:	10110000 	.word	0x10110000
 8000a64:	40020800 	.word	0x40020800
 8000a68:	40020000 	.word	0x40020000

08000a6c <HAL_TIM_PeriodElapsedCallback>:

/* USER CODE BEGIN 4 */
void HAL_TIM_PeriodElapsedCallback	(TIM_HandleTypeDef * 	htim)
{
 8000a6c:	b580      	push	{r7, lr}
 8000a6e:	b084      	sub	sp, #16
 8000a70:	af00      	add	r7, sp, #0
 8000a72:	6078      	str	r0, [r7, #4]
	int zad = 0;
 8000a74:	2300      	movs	r3, #0
 8000a76:	60fb      	str	r3, [r7, #12]
	HAL_ADC_Start(&hadc1);
 8000a78:	4840      	ldr	r0, [pc, #256]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a7a:	f000 fb2f 	bl	80010dc <HAL_ADC_Start>
	HAL_ADC_PollForConversion(&hadc1, AdcValue);
 8000a7e:	4b40      	ldr	r3, [pc, #256]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000a80:	681b      	ldr	r3, [r3, #0]
 8000a82:	4619      	mov	r1, r3
 8000a84:	483d      	ldr	r0, [pc, #244]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a86:	f000 fbf7 	bl	8001278 <HAL_ADC_PollForConversion>
	AdcValue = HAL_ADC_GetValue(&hadc1);
 8000a8a:	483c      	ldr	r0, [pc, #240]	; (8000b7c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8000a8c:	f000 fc7f 	bl	800138e <HAL_ADC_GetValue>
 8000a90:	4603      	mov	r3, r0
 8000a92:	461a      	mov	r2, r3
 8000a94:	4b3a      	ldr	r3, [pc, #232]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000a96:	601a      	str	r2, [r3, #0]
	static int it = 0;
	switch ( zad )
 8000a98:	68fb      	ldr	r3, [r7, #12]
 8000a9a:	2b00      	cmp	r3, #0
 8000a9c:	d003      	beq.n	8000aa6 <HAL_TIM_PeriodElapsedCallback+0x3a>
 8000a9e:	68fb      	ldr	r3, [r7, #12]
 8000aa0:	2b01      	cmp	r3, #1
 8000aa2:	d008      	beq.n	8000ab6 <HAL_TIM_PeriodElapsedCallback+0x4a>
	    	else
	    		it = 0;
	    	break;
	}

}
 8000aa4:	e066      	b.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x108>
	    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, AdcValue);
 8000aa6:	4b36      	ldr	r3, [pc, #216]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000aa8:	681b      	ldr	r3, [r3, #0]
 8000aaa:	2200      	movs	r2, #0
 8000aac:	2100      	movs	r1, #0
 8000aae:	4835      	ldr	r0, [pc, #212]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000ab0:	f000 fff1 	bl	8001a96 <HAL_DAC_SetValue>
	        break;
 8000ab4:	e05e      	b.n	8000b74 <HAL_TIM_PeriodElapsedCallback+0x108>
	    	xVal[it] = AdcValue;
 8000ab6:	4b34      	ldr	r3, [pc, #208]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a31      	ldr	r2, [pc, #196]	; (8000b80 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8000abc:	6812      	ldr	r2, [r2, #0]
 8000abe:	4933      	ldr	r1, [pc, #204]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ac0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	    	int out = factor[0]*xVal[0] + factor[1]*xVal[1] + factor[2]*xVal[2] + factor[3]*xVal[3] + factor[4]*xVal[4];
 8000ac4:	4b32      	ldr	r3, [pc, #200]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000ac6:	ed93 7a00 	vldr	s14, [r3]
 8000aca:	4b30      	ldr	r3, [pc, #192]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000acc:	681b      	ldr	r3, [r3, #0]
 8000ace:	ee07 3a90 	vmov	s15, r3
 8000ad2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000ad6:	ee27 7a27 	vmul.f32	s14, s14, s15
 8000ada:	4b2d      	ldr	r3, [pc, #180]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000adc:	edd3 6a01 	vldr	s13, [r3, #4]
 8000ae0:	4b2a      	ldr	r3, [pc, #168]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000ae2:	685b      	ldr	r3, [r3, #4]
 8000ae4:	ee07 3a90 	vmov	s15, r3
 8000ae8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000aec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000af0:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000af4:	4b26      	ldr	r3, [pc, #152]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000af6:	edd3 6a02 	vldr	s13, [r3, #8]
 8000afa:	4b24      	ldr	r3, [pc, #144]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000afc:	689b      	ldr	r3, [r3, #8]
 8000afe:	ee07 3a90 	vmov	s15, r3
 8000b02:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b06:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b0a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b0e:	4b20      	ldr	r3, [pc, #128]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000b10:	edd3 6a03 	vldr	s13, [r3, #12]
 8000b14:	4b1d      	ldr	r3, [pc, #116]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000b16:	68db      	ldr	r3, [r3, #12]
 8000b18:	ee07 3a90 	vmov	s15, r3
 8000b1c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b20:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b24:	ee37 7a27 	vadd.f32	s14, s14, s15
 8000b28:	4b19      	ldr	r3, [pc, #100]	; (8000b90 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8000b2a:	edd3 6a04 	vldr	s13, [r3, #16]
 8000b2e:	4b17      	ldr	r3, [pc, #92]	; (8000b8c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8000b30:	691b      	ldr	r3, [r3, #16]
 8000b32:	ee07 3a90 	vmov	s15, r3
 8000b36:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8000b3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000b3e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8000b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8000b46:	ee17 3a90 	vmov	r3, s15
 8000b4a:	60bb      	str	r3, [r7, #8]
	    	HAL_DAC_SetValue(&hdac, DAC_CHANNEL_1, DAC_ALIGN_12B_R, out);
 8000b4c:	68bb      	ldr	r3, [r7, #8]
 8000b4e:	2200      	movs	r2, #0
 8000b50:	2100      	movs	r1, #0
 8000b52:	480c      	ldr	r0, [pc, #48]	; (8000b84 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8000b54:	f000 ff9f 	bl	8001a96 <HAL_DAC_SetValue>
	    	if(it < 4)
 8000b58:	4b0b      	ldr	r3, [pc, #44]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b5a:	681b      	ldr	r3, [r3, #0]
 8000b5c:	2b03      	cmp	r3, #3
 8000b5e:	dc05      	bgt.n	8000b6c <HAL_TIM_PeriodElapsedCallback+0x100>
	    		it = it + 1;
 8000b60:	4b09      	ldr	r3, [pc, #36]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b62:	681b      	ldr	r3, [r3, #0]
 8000b64:	3301      	adds	r3, #1
 8000b66:	4a08      	ldr	r2, [pc, #32]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b68:	6013      	str	r3, [r2, #0]
	    	break;
 8000b6a:	e002      	b.n	8000b72 <HAL_TIM_PeriodElapsedCallback+0x106>
	    		it = 0;
 8000b6c:	4b06      	ldr	r3, [pc, #24]	; (8000b88 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
	    	break;
 8000b72:	bf00      	nop
}
 8000b74:	bf00      	nop
 8000b76:	3710      	adds	r7, #16
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000528 	.word	0x20000528
 8000b80:	20000584 	.word	0x20000584
 8000b84:	20000570 	.word	0x20000570
 8000b88:	20000050 	.word	0x20000050
 8000b8c:	2000003c 	.word	0x2000003c
 8000b90:	20000000 	.word	0x20000000

08000b94 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b94:	b480      	push	{r7}
 8000b96:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b98:	b672      	cpsid	i
}
 8000b9a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b9c:	e7fe      	b.n	8000b9c <Error_Handler+0x8>
	...

08000ba0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000ba0:	b480      	push	{r7}
 8000ba2:	b083      	sub	sp, #12
 8000ba4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8000ba6:	4b0f      	ldr	r3, [pc, #60]	; (8000be4 <HAL_MspInit+0x44>)
 8000ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000baa:	4a0e      	ldr	r2, [pc, #56]	; (8000be4 <HAL_MspInit+0x44>)
 8000bac:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000bb0:	6413      	str	r3, [r2, #64]	; 0x40
 8000bb2:	4b0c      	ldr	r3, [pc, #48]	; (8000be4 <HAL_MspInit+0x44>)
 8000bb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bb6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000bba:	607b      	str	r3, [r7, #4]
 8000bbc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bbe:	4b09      	ldr	r3, [pc, #36]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bc2:	4a08      	ldr	r2, [pc, #32]	; (8000be4 <HAL_MspInit+0x44>)
 8000bc4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000bc8:	6453      	str	r3, [r2, #68]	; 0x44
 8000bca:	4b06      	ldr	r3, [pc, #24]	; (8000be4 <HAL_MspInit+0x44>)
 8000bcc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000bce:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000bd2:	603b      	str	r3, [r7, #0]
 8000bd4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000bd6:	bf00      	nop
 8000bd8:	370c      	adds	r7, #12
 8000bda:	46bd      	mov	sp, r7
 8000bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000be0:	4770      	bx	lr
 8000be2:	bf00      	nop
 8000be4:	40023800 	.word	0x40023800

08000be8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b08a      	sub	sp, #40	; 0x28
 8000bec:	af00      	add	r7, sp, #0
 8000bee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bf0:	f107 0314 	add.w	r3, r7, #20
 8000bf4:	2200      	movs	r2, #0
 8000bf6:	601a      	str	r2, [r3, #0]
 8000bf8:	605a      	str	r2, [r3, #4]
 8000bfa:	609a      	str	r2, [r3, #8]
 8000bfc:	60da      	str	r2, [r3, #12]
 8000bfe:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 8000c00:	687b      	ldr	r3, [r7, #4]
 8000c02:	681b      	ldr	r3, [r3, #0]
 8000c04:	4a15      	ldr	r2, [pc, #84]	; (8000c5c <HAL_ADC_MspInit+0x74>)
 8000c06:	4293      	cmp	r3, r2
 8000c08:	d123      	bne.n	8000c52 <HAL_ADC_MspInit+0x6a>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 8000c0a:	4b15      	ldr	r3, [pc, #84]	; (8000c60 <HAL_ADC_MspInit+0x78>)
 8000c0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c0e:	4a14      	ldr	r2, [pc, #80]	; (8000c60 <HAL_ADC_MspInit+0x78>)
 8000c10:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000c14:	6453      	str	r3, [r2, #68]	; 0x44
 8000c16:	4b12      	ldr	r3, [pc, #72]	; (8000c60 <HAL_ADC_MspInit+0x78>)
 8000c18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000c1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8000c1e:	613b      	str	r3, [r7, #16]
 8000c20:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c22:	4b0f      	ldr	r3, [pc, #60]	; (8000c60 <HAL_ADC_MspInit+0x78>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a0e      	ldr	r2, [pc, #56]	; (8000c60 <HAL_ADC_MspInit+0x78>)
 8000c28:	f043 0301 	orr.w	r3, r3, #1
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b0c      	ldr	r3, [pc, #48]	; (8000c60 <HAL_ADC_MspInit+0x78>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0301 	and.w	r3, r3, #1
 8000c36:	60fb      	str	r3, [r7, #12]
 8000c38:	68fb      	ldr	r3, [r7, #12]
    /**ADC1 GPIO Configuration
    PA3     ------> ADC1_IN3
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8000c3a:	2308      	movs	r3, #8
 8000c3c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000c3e:	2303      	movs	r3, #3
 8000c40:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c42:	2300      	movs	r3, #0
 8000c44:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c46:	f107 0314 	add.w	r3, r7, #20
 8000c4a:	4619      	mov	r1, r3
 8000c4c:	4805      	ldr	r0, [pc, #20]	; (8000c64 <HAL_ADC_MspInit+0x7c>)
 8000c4e:	f000 ff97 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000c52:	bf00      	nop
 8000c54:	3728      	adds	r7, #40	; 0x28
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bd80      	pop	{r7, pc}
 8000c5a:	bf00      	nop
 8000c5c:	40012000 	.word	0x40012000
 8000c60:	40023800 	.word	0x40023800
 8000c64:	40020000 	.word	0x40020000

08000c68 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	b08a      	sub	sp, #40	; 0x28
 8000c6c:	af00      	add	r7, sp, #0
 8000c6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c70:	f107 0314 	add.w	r3, r7, #20
 8000c74:	2200      	movs	r2, #0
 8000c76:	601a      	str	r2, [r3, #0]
 8000c78:	605a      	str	r2, [r3, #4]
 8000c7a:	609a      	str	r2, [r3, #8]
 8000c7c:	60da      	str	r2, [r3, #12]
 8000c7e:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8000c80:	687b      	ldr	r3, [r7, #4]
 8000c82:	681b      	ldr	r3, [r3, #0]
 8000c84:	4a15      	ldr	r2, [pc, #84]	; (8000cdc <HAL_DAC_MspInit+0x74>)
 8000c86:	4293      	cmp	r3, r2
 8000c88:	d123      	bne.n	8000cd2 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000c8a:	4b15      	ldr	r3, [pc, #84]	; (8000ce0 <HAL_DAC_MspInit+0x78>)
 8000c8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c8e:	4a14      	ldr	r2, [pc, #80]	; (8000ce0 <HAL_DAC_MspInit+0x78>)
 8000c90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000c94:	6413      	str	r3, [r2, #64]	; 0x40
 8000c96:	4b12      	ldr	r3, [pc, #72]	; (8000ce0 <HAL_DAC_MspInit+0x78>)
 8000c98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000c9e:	613b      	str	r3, [r7, #16]
 8000ca0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ca2:	4b0f      	ldr	r3, [pc, #60]	; (8000ce0 <HAL_DAC_MspInit+0x78>)
 8000ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ca6:	4a0e      	ldr	r2, [pc, #56]	; (8000ce0 <HAL_DAC_MspInit+0x78>)
 8000ca8:	f043 0301 	orr.w	r3, r3, #1
 8000cac:	6313      	str	r3, [r2, #48]	; 0x30
 8000cae:	4b0c      	ldr	r3, [pc, #48]	; (8000ce0 <HAL_DAC_MspInit+0x78>)
 8000cb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000cb2:	f003 0301 	and.w	r3, r3, #1
 8000cb6:	60fb      	str	r3, [r7, #12]
 8000cb8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000cba:	2310      	movs	r3, #16
 8000cbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000cbe:	2303      	movs	r3, #3
 8000cc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000cc2:	2300      	movs	r3, #0
 8000cc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000cc6:	f107 0314 	add.w	r3, r7, #20
 8000cca:	4619      	mov	r1, r3
 8000ccc:	4805      	ldr	r0, [pc, #20]	; (8000ce4 <HAL_DAC_MspInit+0x7c>)
 8000cce:	f000 ff57 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 8000cd2:	bf00      	nop
 8000cd4:	3728      	adds	r7, #40	; 0x28
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	40007400 	.word	0x40007400
 8000ce0:	40023800 	.word	0x40023800
 8000ce4:	40020000 	.word	0x40020000

08000ce8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000ce8:	b580      	push	{r7, lr}
 8000cea:	b084      	sub	sp, #16
 8000cec:	af00      	add	r7, sp, #0
 8000cee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8000cf0:	687b      	ldr	r3, [r7, #4]
 8000cf2:	681b      	ldr	r3, [r3, #0]
 8000cf4:	4a0d      	ldr	r2, [pc, #52]	; (8000d2c <HAL_TIM_Base_MspInit+0x44>)
 8000cf6:	4293      	cmp	r3, r2
 8000cf8:	d113      	bne.n	8000d22 <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000cfa:	4b0d      	ldr	r3, [pc, #52]	; (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000cfc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000cfe:	4a0c      	ldr	r2, [pc, #48]	; (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000d00:	f043 0302 	orr.w	r3, r3, #2
 8000d04:	6413      	str	r3, [r2, #64]	; 0x40
 8000d06:	4b0a      	ldr	r3, [pc, #40]	; (8000d30 <HAL_TIM_Base_MspInit+0x48>)
 8000d08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d0a:	f003 0302 	and.w	r3, r3, #2
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	68fb      	ldr	r3, [r7, #12]
    /* TIM3 interrupt Init */
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8000d12:	2200      	movs	r2, #0
 8000d14:	2100      	movs	r1, #0
 8000d16:	201d      	movs	r0, #29
 8000d18:	f000 fe65 	bl	80019e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8000d1c:	201d      	movs	r0, #29
 8000d1e:	f000 fe7e 	bl	8001a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000d22:	bf00      	nop
 8000d24:	3710      	adds	r7, #16
 8000d26:	46bd      	mov	sp, r7
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	40000400 	.word	0x40000400
 8000d30:	40023800 	.word	0x40023800

08000d34 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000d34:	b580      	push	{r7, lr}
 8000d36:	b08a      	sub	sp, #40	; 0x28
 8000d38:	af00      	add	r7, sp, #0
 8000d3a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000d3c:	f107 0314 	add.w	r3, r7, #20
 8000d40:	2200      	movs	r2, #0
 8000d42:	601a      	str	r2, [r3, #0]
 8000d44:	605a      	str	r2, [r3, #4]
 8000d46:	609a      	str	r2, [r3, #8]
 8000d48:	60da      	str	r2, [r3, #12]
 8000d4a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8000d4c:	687b      	ldr	r3, [r7, #4]
 8000d4e:	681b      	ldr	r3, [r3, #0]
 8000d50:	4a17      	ldr	r2, [pc, #92]	; (8000db0 <HAL_UART_MspInit+0x7c>)
 8000d52:	4293      	cmp	r3, r2
 8000d54:	d128      	bne.n	8000da8 <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8000d56:	4b17      	ldr	r3, [pc, #92]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d5a:	4a16      	ldr	r2, [pc, #88]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d5c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8000d60:	6413      	str	r3, [r2, #64]	; 0x40
 8000d62:	4b14      	ldr	r3, [pc, #80]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d64:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000d66:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8000d6a:	613b      	str	r3, [r7, #16]
 8000d6c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000d6e:	4b11      	ldr	r3, [pc, #68]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d72:	4a10      	ldr	r2, [pc, #64]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d74:	f043 0308 	orr.w	r3, r3, #8
 8000d78:	6313      	str	r3, [r2, #48]	; 0x30
 8000d7a:	4b0e      	ldr	r3, [pc, #56]	; (8000db4 <HAL_UART_MspInit+0x80>)
 8000d7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000d7e:	f003 0308 	and.w	r3, r3, #8
 8000d82:	60fb      	str	r3, [r7, #12]
 8000d84:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8000d86:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000d8a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d8c:	2302      	movs	r3, #2
 8000d8e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d90:	2300      	movs	r3, #0
 8000d92:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000d94:	2303      	movs	r3, #3
 8000d96:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8000d98:	2307      	movs	r3, #7
 8000d9a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000d9c:	f107 0314 	add.w	r3, r7, #20
 8000da0:	4619      	mov	r1, r3
 8000da2:	4805      	ldr	r0, [pc, #20]	; (8000db8 <HAL_UART_MspInit+0x84>)
 8000da4:	f000 feec 	bl	8001b80 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8000da8:	bf00      	nop
 8000daa:	3728      	adds	r7, #40	; 0x28
 8000dac:	46bd      	mov	sp, r7
 8000dae:	bd80      	pop	{r7, pc}
 8000db0:	40004800 	.word	0x40004800
 8000db4:	40023800 	.word	0x40023800
 8000db8:	40020c00 	.word	0x40020c00

08000dbc <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	b08a      	sub	sp, #40	; 0x28
 8000dc0:	af00      	add	r7, sp, #0
 8000dc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000dc4:	f107 0314 	add.w	r3, r7, #20
 8000dc8:	2200      	movs	r2, #0
 8000dca:	601a      	str	r2, [r3, #0]
 8000dcc:	605a      	str	r2, [r3, #4]
 8000dce:	609a      	str	r2, [r3, #8]
 8000dd0:	60da      	str	r2, [r3, #12]
 8000dd2:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8000dd4:	687b      	ldr	r3, [r7, #4]
 8000dd6:	681b      	ldr	r3, [r3, #0]
 8000dd8:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8000ddc:	d141      	bne.n	8000e62 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000dde:	4b23      	ldr	r3, [pc, #140]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000de0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000de2:	4a22      	ldr	r2, [pc, #136]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000de4:	f043 0301 	orr.w	r3, r3, #1
 8000de8:	6313      	str	r3, [r2, #48]	; 0x30
 8000dea:	4b20      	ldr	r3, [pc, #128]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000dec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dee:	f003 0301 	and.w	r3, r3, #1
 8000df2:	613b      	str	r3, [r7, #16]
 8000df4:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 8000df6:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 8000dfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000dfc:	2302      	movs	r3, #2
 8000dfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e00:	2300      	movs	r3, #0
 8000e02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000e04:	2303      	movs	r3, #3
 8000e06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8000e08:	230a      	movs	r3, #10
 8000e0a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000e0c:	f107 0314 	add.w	r3, r7, #20
 8000e10:	4619      	mov	r1, r3
 8000e12:	4817      	ldr	r0, [pc, #92]	; (8000e70 <HAL_PCD_MspInit+0xb4>)
 8000e14:	f000 feb4 	bl	8001b80 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 8000e18:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000e1c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000e1e:	2300      	movs	r3, #0
 8000e20:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000e22:	2300      	movs	r3, #0
 8000e24:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 8000e26:	f107 0314 	add.w	r3, r7, #20
 8000e2a:	4619      	mov	r1, r3
 8000e2c:	4810      	ldr	r0, [pc, #64]	; (8000e70 <HAL_PCD_MspInit+0xb4>)
 8000e2e:	f000 fea7 	bl	8001b80 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8000e32:	4b0e      	ldr	r3, [pc, #56]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000e34:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e36:	4a0d      	ldr	r2, [pc, #52]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000e38:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e3c:	6353      	str	r3, [r2, #52]	; 0x34
 8000e3e:	4b0b      	ldr	r3, [pc, #44]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000e40:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8000e42:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e46:	60fb      	str	r3, [r7, #12]
 8000e48:	68fb      	ldr	r3, [r7, #12]
 8000e4a:	4b08      	ldr	r3, [pc, #32]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000e4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e4e:	4a07      	ldr	r2, [pc, #28]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000e50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000e54:	6453      	str	r3, [r2, #68]	; 0x44
 8000e56:	4b05      	ldr	r3, [pc, #20]	; (8000e6c <HAL_PCD_MspInit+0xb0>)
 8000e58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000e5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000e5e:	60bb      	str	r3, [r7, #8]
 8000e60:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 8000e62:	bf00      	nop
 8000e64:	3728      	adds	r7, #40	; 0x28
 8000e66:	46bd      	mov	sp, r7
 8000e68:	bd80      	pop	{r7, pc}
 8000e6a:	bf00      	nop
 8000e6c:	40023800 	.word	0x40023800
 8000e70:	40020000 	.word	0x40020000

08000e74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000e74:	b480      	push	{r7}
 8000e76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000e78:	e7fe      	b.n	8000e78 <NMI_Handler+0x4>

08000e7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000e7a:	b480      	push	{r7}
 8000e7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000e7e:	e7fe      	b.n	8000e7e <HardFault_Handler+0x4>

08000e80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000e80:	b480      	push	{r7}
 8000e82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000e84:	e7fe      	b.n	8000e84 <MemManage_Handler+0x4>

08000e86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000e86:	b480      	push	{r7}
 8000e88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000e8a:	e7fe      	b.n	8000e8a <BusFault_Handler+0x4>

08000e8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000e8c:	b480      	push	{r7}
 8000e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000e90:	e7fe      	b.n	8000e90 <UsageFault_Handler+0x4>

08000e92 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000e92:	b480      	push	{r7}
 8000e94:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000e96:	bf00      	nop
 8000e98:	46bd      	mov	sp, r7
 8000e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e9e:	4770      	bx	lr

08000ea0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000ea0:	b480      	push	{r7}
 8000ea2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000ea4:	bf00      	nop
 8000ea6:	46bd      	mov	sp, r7
 8000ea8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eac:	4770      	bx	lr

08000eae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000eae:	b480      	push	{r7}
 8000eb0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000eb2:	bf00      	nop
 8000eb4:	46bd      	mov	sp, r7
 8000eb6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000eba:	4770      	bx	lr

08000ebc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000ebc:	b580      	push	{r7, lr}
 8000ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ec0:	f000 f884 	bl	8000fcc <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000ec4:	bf00      	nop
 8000ec6:	bd80      	pop	{r7, pc}

08000ec8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8000ec8:	b580      	push	{r7, lr}
 8000eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8000ecc:	4802      	ldr	r0, [pc, #8]	; (8000ed8 <TIM3_IRQHandler+0x10>)
 8000ece:	f002 fadb 	bl	8003488 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	200004dc 	.word	0x200004dc

08000edc <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000edc:	b480      	push	{r7}
 8000ede:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000ee0:	4b06      	ldr	r3, [pc, #24]	; (8000efc <SystemInit+0x20>)
 8000ee2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000ee6:	4a05      	ldr	r2, [pc, #20]	; (8000efc <SystemInit+0x20>)
 8000ee8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000eec:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000ef0:	bf00      	nop
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop
 8000efc:	e000ed00 	.word	0xe000ed00

08000f00 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8000f00:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000f38 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000f04:	480d      	ldr	r0, [pc, #52]	; (8000f3c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8000f06:	490e      	ldr	r1, [pc, #56]	; (8000f40 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8000f08:	4a0e      	ldr	r2, [pc, #56]	; (8000f44 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000f0c:	e002      	b.n	8000f14 <LoopCopyDataInit>

08000f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000f12:	3304      	adds	r3, #4

08000f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000f18:	d3f9      	bcc.n	8000f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000f1a:	4a0b      	ldr	r2, [pc, #44]	; (8000f48 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8000f1c:	4c0b      	ldr	r4, [pc, #44]	; (8000f4c <LoopFillZerobss+0x26>)
  movs r3, #0
 8000f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000f20:	e001      	b.n	8000f26 <LoopFillZerobss>

08000f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000f24:	3204      	adds	r2, #4

08000f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000f28:	d3fb      	bcc.n	8000f22 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000f2a:	f7ff ffd7 	bl	8000edc <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000f2e:	f003 fd59 	bl	80049e4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000f32:	f7ff fae5 	bl	8000500 <main>
  bx  lr    
 8000f36:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000f38:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8000f3c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000f40:	20000020 	.word	0x20000020
  ldr r2, =_sidata
 8000f44:	08004a7c 	.word	0x08004a7c
  ldr r2, =_sbss
 8000f48:	20000020 	.word	0x20000020
  ldr r4, =_ebss
 8000f4c:	2000058c 	.word	0x2000058c

08000f50 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000f50:	e7fe      	b.n	8000f50 <ADC_IRQHandler>

08000f52 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000f52:	b580      	push	{r7, lr}
 8000f54:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000f56:	2003      	movs	r0, #3
 8000f58:	f000 fd3a 	bl	80019d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000f5c:	2000      	movs	r0, #0
 8000f5e:	f000 f805 	bl	8000f6c <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 8000f62:	f7ff fe1d 	bl	8000ba0 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 8000f66:	2300      	movs	r3, #0
}
 8000f68:	4618      	mov	r0, r3
 8000f6a:	bd80      	pop	{r7, pc}

08000f6c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f6c:	b580      	push	{r7, lr}
 8000f6e:	b082      	sub	sp, #8
 8000f70:	af00      	add	r7, sp, #0
 8000f72:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000f74:	4b12      	ldr	r3, [pc, #72]	; (8000fc0 <HAL_InitTick+0x54>)
 8000f76:	681a      	ldr	r2, [r3, #0]
 8000f78:	4b12      	ldr	r3, [pc, #72]	; (8000fc4 <HAL_InitTick+0x58>)
 8000f7a:	781b      	ldrb	r3, [r3, #0]
 8000f7c:	4619      	mov	r1, r3
 8000f7e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f82:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f86:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f8a:	4618      	mov	r0, r3
 8000f8c:	f000 fd55 	bl	8001a3a <HAL_SYSTICK_Config>
 8000f90:	4603      	mov	r3, r0
 8000f92:	2b00      	cmp	r3, #0
 8000f94:	d001      	beq.n	8000f9a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000f96:	2301      	movs	r3, #1
 8000f98:	e00e      	b.n	8000fb8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f9a:	687b      	ldr	r3, [r7, #4]
 8000f9c:	2b0f      	cmp	r3, #15
 8000f9e:	d80a      	bhi.n	8000fb6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	6879      	ldr	r1, [r7, #4]
 8000fa4:	f04f 30ff 	mov.w	r0, #4294967295
 8000fa8:	f000 fd1d 	bl	80019e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000fac:	4a06      	ldr	r2, [pc, #24]	; (8000fc8 <HAL_InitTick+0x5c>)
 8000fae:	687b      	ldr	r3, [r7, #4]
 8000fb0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	e000      	b.n	8000fb8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000fb6:	2301      	movs	r3, #1
}
 8000fb8:	4618      	mov	r0, r3
 8000fba:	3708      	adds	r7, #8
 8000fbc:	46bd      	mov	sp, r7
 8000fbe:	bd80      	pop	{r7, pc}
 8000fc0:	20000014 	.word	0x20000014
 8000fc4:	2000001c 	.word	0x2000001c
 8000fc8:	20000018 	.word	0x20000018

08000fcc <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000fcc:	b480      	push	{r7}
 8000fce:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000fd0:	4b06      	ldr	r3, [pc, #24]	; (8000fec <HAL_IncTick+0x20>)
 8000fd2:	781b      	ldrb	r3, [r3, #0]
 8000fd4:	461a      	mov	r2, r3
 8000fd6:	4b06      	ldr	r3, [pc, #24]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fd8:	681b      	ldr	r3, [r3, #0]
 8000fda:	4413      	add	r3, r2
 8000fdc:	4a04      	ldr	r2, [pc, #16]	; (8000ff0 <HAL_IncTick+0x24>)
 8000fde:	6013      	str	r3, [r2, #0]
}
 8000fe0:	bf00      	nop
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fe8:	4770      	bx	lr
 8000fea:	bf00      	nop
 8000fec:	2000001c 	.word	0x2000001c
 8000ff0:	20000588 	.word	0x20000588

08000ff4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ff4:	b480      	push	{r7}
 8000ff6:	af00      	add	r7, sp, #0
  return uwTick;
 8000ff8:	4b03      	ldr	r3, [pc, #12]	; (8001008 <HAL_GetTick+0x14>)
 8000ffa:	681b      	ldr	r3, [r3, #0]
}
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	46bd      	mov	sp, r7
 8001000:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001004:	4770      	bx	lr
 8001006:	bf00      	nop
 8001008:	20000588 	.word	0x20000588

0800100c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800100c:	b580      	push	{r7, lr}
 800100e:	b084      	sub	sp, #16
 8001010:	af00      	add	r7, sp, #0
 8001012:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001014:	f7ff ffee 	bl	8000ff4 <HAL_GetTick>
 8001018:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800101e:	68fb      	ldr	r3, [r7, #12]
 8001020:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001024:	d005      	beq.n	8001032 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001026:	4b0a      	ldr	r3, [pc, #40]	; (8001050 <HAL_Delay+0x44>)
 8001028:	781b      	ldrb	r3, [r3, #0]
 800102a:	461a      	mov	r2, r3
 800102c:	68fb      	ldr	r3, [r7, #12]
 800102e:	4413      	add	r3, r2
 8001030:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001032:	bf00      	nop
 8001034:	f7ff ffde 	bl	8000ff4 <HAL_GetTick>
 8001038:	4602      	mov	r2, r0
 800103a:	68bb      	ldr	r3, [r7, #8]
 800103c:	1ad3      	subs	r3, r2, r3
 800103e:	68fa      	ldr	r2, [r7, #12]
 8001040:	429a      	cmp	r2, r3
 8001042:	d8f7      	bhi.n	8001034 <HAL_Delay+0x28>
  {
  }
}
 8001044:	bf00      	nop
 8001046:	bf00      	nop
 8001048:	3710      	adds	r7, #16
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	2000001c 	.word	0x2000001c

08001054 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b084      	sub	sp, #16
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800105c:	2300      	movs	r3, #0
 800105e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8001060:	687b      	ldr	r3, [r7, #4]
 8001062:	2b00      	cmp	r3, #0
 8001064:	d101      	bne.n	800106a <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8001066:	2301      	movs	r3, #1
 8001068:	e031      	b.n	80010ce <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800106e:	2b00      	cmp	r3, #0
 8001070:	d109      	bne.n	8001086 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8001072:	6878      	ldr	r0, [r7, #4]
 8001074:	f7ff fdb8 	bl	8000be8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8001078:	687b      	ldr	r3, [r7, #4]
 800107a:	2200      	movs	r2, #0
 800107c:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	2200      	movs	r2, #0
 8001082:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8001086:	687b      	ldr	r3, [r7, #4]
 8001088:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800108a:	f003 0310 	and.w	r3, r3, #16
 800108e:	2b00      	cmp	r3, #0
 8001090:	d116      	bne.n	80010c0 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001092:	687b      	ldr	r3, [r7, #4]
 8001094:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001096:	4b10      	ldr	r3, [pc, #64]	; (80010d8 <HAL_ADC_Init+0x84>)
 8001098:	4013      	ands	r3, r2
 800109a:	f043 0202 	orr.w	r2, r3, #2
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80010a2:	6878      	ldr	r0, [r7, #4]
 80010a4:	f000 faca 	bl	800163c <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80010a8:	687b      	ldr	r3, [r7, #4]
 80010aa:	2200      	movs	r2, #0
 80010ac:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80010ae:	687b      	ldr	r3, [r7, #4]
 80010b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80010b2:	f023 0303 	bic.w	r3, r3, #3
 80010b6:	f043 0201 	orr.w	r2, r3, #1
 80010ba:	687b      	ldr	r3, [r7, #4]
 80010bc:	641a      	str	r2, [r3, #64]	; 0x40
 80010be:	e001      	b.n	80010c4 <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80010c0:	2301      	movs	r3, #1
 80010c2:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80010c4:	687b      	ldr	r3, [r7, #4]
 80010c6:	2200      	movs	r2, #0
 80010c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80010cc:	7bfb      	ldrb	r3, [r7, #15]
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3710      	adds	r7, #16
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	ffffeefd 	.word	0xffffeefd

080010dc <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80010dc:	b480      	push	{r7}
 80010de:	b085      	sub	sp, #20
 80010e0:	af00      	add	r7, sp, #0
 80010e2:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80010e4:	2300      	movs	r3, #0
 80010e6:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80010ee:	2b01      	cmp	r3, #1
 80010f0:	d101      	bne.n	80010f6 <HAL_ADC_Start+0x1a>
 80010f2:	2302      	movs	r3, #2
 80010f4:	e0ad      	b.n	8001252 <HAL_ADC_Start+0x176>
 80010f6:	687b      	ldr	r3, [r7, #4]
 80010f8:	2201      	movs	r2, #1
 80010fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80010fe:	687b      	ldr	r3, [r7, #4]
 8001100:	681b      	ldr	r3, [r3, #0]
 8001102:	689b      	ldr	r3, [r3, #8]
 8001104:	f003 0301 	and.w	r3, r3, #1
 8001108:	2b01      	cmp	r3, #1
 800110a:	d018      	beq.n	800113e <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 800110c:	687b      	ldr	r3, [r7, #4]
 800110e:	681b      	ldr	r3, [r3, #0]
 8001110:	689a      	ldr	r2, [r3, #8]
 8001112:	687b      	ldr	r3, [r7, #4]
 8001114:	681b      	ldr	r3, [r3, #0]
 8001116:	f042 0201 	orr.w	r2, r2, #1
 800111a:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 800111c:	4b50      	ldr	r3, [pc, #320]	; (8001260 <HAL_ADC_Start+0x184>)
 800111e:	681b      	ldr	r3, [r3, #0]
 8001120:	4a50      	ldr	r2, [pc, #320]	; (8001264 <HAL_ADC_Start+0x188>)
 8001122:	fba2 2303 	umull	r2, r3, r2, r3
 8001126:	0c9a      	lsrs	r2, r3, #18
 8001128:	4613      	mov	r3, r2
 800112a:	005b      	lsls	r3, r3, #1
 800112c:	4413      	add	r3, r2
 800112e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001130:	e002      	b.n	8001138 <HAL_ADC_Start+0x5c>
    {
      counter--;
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	3b01      	subs	r3, #1
 8001136:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8001138:	68fb      	ldr	r3, [r7, #12]
 800113a:	2b00      	cmp	r3, #0
 800113c:	d1f9      	bne.n	8001132 <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	689b      	ldr	r3, [r3, #8]
 8001144:	f003 0301 	and.w	r3, r3, #1
 8001148:	2b01      	cmp	r3, #1
 800114a:	d175      	bne.n	8001238 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 800114c:	687b      	ldr	r3, [r7, #4]
 800114e:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8001150:	4b45      	ldr	r3, [pc, #276]	; (8001268 <HAL_ADC_Start+0x18c>)
 8001152:	4013      	ands	r3, r2
 8001154:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 800115c:	687b      	ldr	r3, [r7, #4]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	685b      	ldr	r3, [r3, #4]
 8001162:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001166:	2b00      	cmp	r3, #0
 8001168:	d007      	beq.n	800117a <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800116e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001172:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800117a:	687b      	ldr	r3, [r7, #4]
 800117c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800117e:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001182:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001186:	d106      	bne.n	8001196 <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800118c:	f023 0206 	bic.w	r2, r3, #6
 8001190:	687b      	ldr	r3, [r7, #4]
 8001192:	645a      	str	r2, [r3, #68]	; 0x44
 8001194:	e002      	b.n	800119c <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8001196:	687b      	ldr	r3, [r7, #4]
 8001198:	2200      	movs	r2, #0
 800119a:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 800119c:	687b      	ldr	r3, [r7, #4]
 800119e:	2200      	movs	r2, #0
 80011a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80011a4:	687b      	ldr	r3, [r7, #4]
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80011ac:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80011ae:	4b2f      	ldr	r3, [pc, #188]	; (800126c <HAL_ADC_Start+0x190>)
 80011b0:	685b      	ldr	r3, [r3, #4]
 80011b2:	f003 031f 	and.w	r3, r3, #31
 80011b6:	2b00      	cmp	r3, #0
 80011b8:	d10f      	bne.n	80011da <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80011ba:	687b      	ldr	r3, [r7, #4]
 80011bc:	681b      	ldr	r3, [r3, #0]
 80011be:	689b      	ldr	r3, [r3, #8]
 80011c0:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011c4:	2b00      	cmp	r3, #0
 80011c6:	d143      	bne.n	8001250 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	689a      	ldr	r2, [r3, #8]
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	681b      	ldr	r3, [r3, #0]
 80011d2:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80011d6:	609a      	str	r2, [r3, #8]
 80011d8:	e03a      	b.n	8001250 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	4a24      	ldr	r2, [pc, #144]	; (8001270 <HAL_ADC_Start+0x194>)
 80011e0:	4293      	cmp	r3, r2
 80011e2:	d10e      	bne.n	8001202 <HAL_ADC_Start+0x126>
 80011e4:	687b      	ldr	r3, [r7, #4]
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	689b      	ldr	r3, [r3, #8]
 80011ea:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80011ee:	2b00      	cmp	r3, #0
 80011f0:	d107      	bne.n	8001202 <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	689a      	ldr	r2, [r3, #8]
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	681b      	ldr	r3, [r3, #0]
 80011fc:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001200:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 8001202:	4b1a      	ldr	r3, [pc, #104]	; (800126c <HAL_ADC_Start+0x190>)
 8001204:	685b      	ldr	r3, [r3, #4]
 8001206:	f003 0310 	and.w	r3, r3, #16
 800120a:	2b00      	cmp	r3, #0
 800120c:	d120      	bne.n	8001250 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	4a18      	ldr	r2, [pc, #96]	; (8001274 <HAL_ADC_Start+0x198>)
 8001214:	4293      	cmp	r3, r2
 8001216:	d11b      	bne.n	8001250 <HAL_ADC_Start+0x174>
 8001218:	687b      	ldr	r3, [r7, #4]
 800121a:	681b      	ldr	r3, [r3, #0]
 800121c:	689b      	ldr	r3, [r3, #8]
 800121e:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001222:	2b00      	cmp	r3, #0
 8001224:	d114      	bne.n	8001250 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8001226:	687b      	ldr	r3, [r7, #4]
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	689a      	ldr	r2, [r3, #8]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	681b      	ldr	r3, [r3, #0]
 8001230:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8001234:	609a      	str	r2, [r3, #8]
 8001236:	e00b      	b.n	8001250 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001238:	687b      	ldr	r3, [r7, #4]
 800123a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800123c:	f043 0210 	orr.w	r2, r3, #16
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001244:	687b      	ldr	r3, [r7, #4]
 8001246:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001248:	f043 0201 	orr.w	r2, r3, #1
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8001250:	2300      	movs	r3, #0
}
 8001252:	4618      	mov	r0, r3
 8001254:	3714      	adds	r7, #20
 8001256:	46bd      	mov	sp, r7
 8001258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800125c:	4770      	bx	lr
 800125e:	bf00      	nop
 8001260:	20000014 	.word	0x20000014
 8001264:	431bde83 	.word	0x431bde83
 8001268:	fffff8fe 	.word	0xfffff8fe
 800126c:	40012300 	.word	0x40012300
 8001270:	40012000 	.word	0x40012000
 8001274:	40012200 	.word	0x40012200

08001278 <HAL_ADC_PollForConversion>:
  *         the configuration information for the specified ADC.
  * @param  Timeout Timeout value in millisecond.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef* hadc, uint32_t Timeout)
{
 8001278:	b580      	push	{r7, lr}
 800127a:	b084      	sub	sp, #16
 800127c:	af00      	add	r7, sp, #0
 800127e:	6078      	str	r0, [r7, #4]
 8001280:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8001282:	2300      	movs	r3, #0
 8001284:	60fb      	str	r3, [r7, #12]
  /* each conversion:                                                       */
  /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
  /* several ranks and polling for end of each conversion.                  */
  /* For code simplicity sake, this particular case is generalized to       */
  /* ADC configured in DMA mode and polling for end of each conversion.     */
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 8001286:	687b      	ldr	r3, [r7, #4]
 8001288:	681b      	ldr	r3, [r3, #0]
 800128a:	689b      	ldr	r3, [r3, #8]
 800128c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8001294:	d113      	bne.n	80012be <HAL_ADC_PollForConversion+0x46>
      HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_DMA)    )
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	681b      	ldr	r3, [r3, #0]
 800129a:	689b      	ldr	r3, [r3, #8]
 800129c:	f403 7380 	and.w	r3, r3, #256	; 0x100
  if (HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_EOCS) &&
 80012a0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80012a4:	d10b      	bne.n	80012be <HAL_ADC_PollForConversion+0x46>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 80012a6:	687b      	ldr	r3, [r7, #4]
 80012a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012aa:	f043 0220 	orr.w	r2, r3, #32
 80012ae:	687b      	ldr	r3, [r7, #4]
 80012b0:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 80012b2:	687b      	ldr	r3, [r7, #4]
 80012b4:	2200      	movs	r2, #0
 80012b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    return HAL_ERROR;
 80012ba:	2301      	movs	r3, #1
 80012bc:	e063      	b.n	8001386 <HAL_ADC_PollForConversion+0x10e>
  }
 
  /* Get tick */ 
  tickstart = HAL_GetTick();
 80012be:	f7ff fe99 	bl	8000ff4 <HAL_GetTick>
 80012c2:	60f8      	str	r0, [r7, #12]

  /* Check End of conversion flag */
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012c4:	e021      	b.n	800130a <HAL_ADC_PollForConversion+0x92>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if(Timeout != HAL_MAX_DELAY)
 80012c6:	683b      	ldr	r3, [r7, #0]
 80012c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80012cc:	d01d      	beq.n	800130a <HAL_ADC_PollForConversion+0x92>
    {
      if((Timeout == 0) || ((HAL_GetTick() - tickstart ) > Timeout))
 80012ce:	683b      	ldr	r3, [r7, #0]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	d007      	beq.n	80012e4 <HAL_ADC_PollForConversion+0x6c>
 80012d4:	f7ff fe8e 	bl	8000ff4 <HAL_GetTick>
 80012d8:	4602      	mov	r2, r0
 80012da:	68fb      	ldr	r3, [r7, #12]
 80012dc:	1ad3      	subs	r3, r2, r3
 80012de:	683a      	ldr	r2, [r7, #0]
 80012e0:	429a      	cmp	r2, r3
 80012e2:	d212      	bcs.n	800130a <HAL_ADC_PollForConversion+0x92>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 80012e4:	687b      	ldr	r3, [r7, #4]
 80012e6:	681b      	ldr	r3, [r3, #0]
 80012e8:	681b      	ldr	r3, [r3, #0]
 80012ea:	f003 0302 	and.w	r3, r3, #2
 80012ee:	2b02      	cmp	r3, #2
 80012f0:	d00b      	beq.n	800130a <HAL_ADC_PollForConversion+0x92>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 80012f2:	687b      	ldr	r3, [r7, #4]
 80012f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012f6:	f043 0204 	orr.w	r2, r3, #4
 80012fa:	687b      	ldr	r3, [r7, #4]
 80012fc:	641a      	str	r2, [r3, #64]	; 0x40
          
          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 80012fe:	687b      	ldr	r3, [r7, #4]
 8001300:	2200      	movs	r2, #0
 8001302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
          
          return HAL_TIMEOUT;
 8001306:	2303      	movs	r3, #3
 8001308:	e03d      	b.n	8001386 <HAL_ADC_PollForConversion+0x10e>
  while(!(__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOC)))
 800130a:	687b      	ldr	r3, [r7, #4]
 800130c:	681b      	ldr	r3, [r3, #0]
 800130e:	681b      	ldr	r3, [r3, #0]
 8001310:	f003 0302 	and.w	r3, r3, #2
 8001314:	2b02      	cmp	r3, #2
 8001316:	d1d6      	bne.n	80012c6 <HAL_ADC_PollForConversion+0x4e>
      }
    }
  }
  
  /* Clear regular group conversion flag */
  __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_STRT | ADC_FLAG_EOC);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	681b      	ldr	r3, [r3, #0]
 800131c:	f06f 0212 	mvn.w	r2, #18
 8001320:	601a      	str	r2, [r3, #0]
  
  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001322:	687b      	ldr	r3, [r7, #4]
 8001324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001326:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800132a:	687b      	ldr	r3, [r7, #4]
 800132c:	641a      	str	r2, [r3, #64]	; 0x40
  /* by external trigger, continuous mode or scan sequence on going.          */
  /* Note: On STM32F7, there is no independent flag of end of sequence.       */
  /*       The test of scan sequence on going is done either with scan        */
  /*       sequence disabled or with end of conversion flag set to            */
  /*       of end of sequence.                                                */
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 800132e:	687b      	ldr	r3, [r7, #4]
 8001330:	681b      	ldr	r3, [r3, #0]
 8001332:	689b      	ldr	r3, [r3, #8]
 8001334:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8001338:	2b00      	cmp	r3, #0
 800133a:	d123      	bne.n	8001384 <HAL_ADC_PollForConversion+0x10c>
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	699b      	ldr	r3, [r3, #24]
  if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8001340:	2b00      	cmp	r3, #0
 8001342:	d11f      	bne.n	8001384 <HAL_ADC_PollForConversion+0x10c>
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 8001344:	687b      	ldr	r3, [r7, #4]
 8001346:	681b      	ldr	r3, [r3, #0]
 8001348:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800134a:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
     (hadc->Init.ContinuousConvMode == DISABLE)            &&
 800134e:	2b00      	cmp	r3, #0
 8001350:	d006      	beq.n	8001360 <HAL_ADC_PollForConversion+0xe8>
      HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	689b      	ldr	r3, [r3, #8]
 8001358:	f403 6380 	and.w	r3, r3, #1024	; 0x400
     (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) ||
 800135c:	2b00      	cmp	r3, #0
 800135e:	d111      	bne.n	8001384 <HAL_ADC_PollForConversion+0x10c>
  {
    /* Set ADC state */
    CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001364:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	641a      	str	r2, [r3, #64]	; 0x40
    
    if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001370:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001374:	2b00      	cmp	r3, #0
 8001376:	d105      	bne.n	8001384 <HAL_ADC_PollForConversion+0x10c>
    { 
      SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001378:	687b      	ldr	r3, [r7, #4]
 800137a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800137c:	f043 0201 	orr.w	r2, r3, #1
 8001380:	687b      	ldr	r3, [r7, #4]
 8001382:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }
  
  /* Return ADC state */
  return HAL_OK;
 8001384:	2300      	movs	r3, #0
}
 8001386:	4618      	mov	r0, r3
 8001388:	3710      	adds	r7, #16
 800138a:	46bd      	mov	sp, r7
 800138c:	bd80      	pop	{r7, pc}

0800138e <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 800138e:	b480      	push	{r7}
 8001390:	b083      	sub	sp, #12
 8001392:	af00      	add	r7, sp, #0
 8001394:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8001396:	687b      	ldr	r3, [r7, #4]
 8001398:	681b      	ldr	r3, [r3, #0]
 800139a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800139c:	4618      	mov	r0, r3
 800139e:	370c      	adds	r7, #12
 80013a0:	46bd      	mov	sp, r7
 80013a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013a6:	4770      	bx	lr

080013a8 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80013a8:	b480      	push	{r7}
 80013aa:	b085      	sub	sp, #20
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	6078      	str	r0, [r7, #4]
 80013b0:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80013b2:	2300      	movs	r3, #0
 80013b4:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80013b6:	687b      	ldr	r3, [r7, #4]
 80013b8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80013bc:	2b01      	cmp	r3, #1
 80013be:	d101      	bne.n	80013c4 <HAL_ADC_ConfigChannel+0x1c>
 80013c0:	2302      	movs	r3, #2
 80013c2:	e12a      	b.n	800161a <HAL_ADC_ConfigChannel+0x272>
 80013c4:	687b      	ldr	r3, [r7, #4]
 80013c6:	2201      	movs	r2, #1
 80013c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80013cc:	683b      	ldr	r3, [r7, #0]
 80013ce:	681b      	ldr	r3, [r3, #0]
 80013d0:	2b09      	cmp	r3, #9
 80013d2:	d93a      	bls.n	800144a <HAL_ADC_ConfigChannel+0xa2>
 80013d4:	683b      	ldr	r3, [r7, #0]
 80013d6:	681b      	ldr	r3, [r3, #0]
 80013d8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80013dc:	d035      	beq.n	800144a <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80013de:	687b      	ldr	r3, [r7, #4]
 80013e0:	681b      	ldr	r3, [r3, #0]
 80013e2:	68d9      	ldr	r1, [r3, #12]
 80013e4:	683b      	ldr	r3, [r7, #0]
 80013e6:	681b      	ldr	r3, [r3, #0]
 80013e8:	b29b      	uxth	r3, r3
 80013ea:	461a      	mov	r2, r3
 80013ec:	4613      	mov	r3, r2
 80013ee:	005b      	lsls	r3, r3, #1
 80013f0:	4413      	add	r3, r2
 80013f2:	3b1e      	subs	r3, #30
 80013f4:	2207      	movs	r2, #7
 80013f6:	fa02 f303 	lsl.w	r3, r2, r3
 80013fa:	43da      	mvns	r2, r3
 80013fc:	687b      	ldr	r3, [r7, #4]
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	400a      	ands	r2, r1
 8001402:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001404:	683b      	ldr	r3, [r7, #0]
 8001406:	681b      	ldr	r3, [r3, #0]
 8001408:	4a87      	ldr	r2, [pc, #540]	; (8001628 <HAL_ADC_ConfigChannel+0x280>)
 800140a:	4293      	cmp	r3, r2
 800140c:	d10a      	bne.n	8001424 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 800140e:	687b      	ldr	r3, [r7, #4]
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	68d9      	ldr	r1, [r3, #12]
 8001414:	683b      	ldr	r3, [r7, #0]
 8001416:	689b      	ldr	r3, [r3, #8]
 8001418:	061a      	lsls	r2, r3, #24
 800141a:	687b      	ldr	r3, [r7, #4]
 800141c:	681b      	ldr	r3, [r3, #0]
 800141e:	430a      	orrs	r2, r1
 8001420:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001422:	e035      	b.n	8001490 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	681b      	ldr	r3, [r3, #0]
 8001428:	68d9      	ldr	r1, [r3, #12]
 800142a:	683b      	ldr	r3, [r7, #0]
 800142c:	689a      	ldr	r2, [r3, #8]
 800142e:	683b      	ldr	r3, [r7, #0]
 8001430:	681b      	ldr	r3, [r3, #0]
 8001432:	b29b      	uxth	r3, r3
 8001434:	4618      	mov	r0, r3
 8001436:	4603      	mov	r3, r0
 8001438:	005b      	lsls	r3, r3, #1
 800143a:	4403      	add	r3, r0
 800143c:	3b1e      	subs	r3, #30
 800143e:	409a      	lsls	r2, r3
 8001440:	687b      	ldr	r3, [r7, #4]
 8001442:	681b      	ldr	r3, [r3, #0]
 8001444:	430a      	orrs	r2, r1
 8001446:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8001448:	e022      	b.n	8001490 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800144a:	687b      	ldr	r3, [r7, #4]
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	6919      	ldr	r1, [r3, #16]
 8001450:	683b      	ldr	r3, [r7, #0]
 8001452:	681b      	ldr	r3, [r3, #0]
 8001454:	b29b      	uxth	r3, r3
 8001456:	461a      	mov	r2, r3
 8001458:	4613      	mov	r3, r2
 800145a:	005b      	lsls	r3, r3, #1
 800145c:	4413      	add	r3, r2
 800145e:	2207      	movs	r2, #7
 8001460:	fa02 f303 	lsl.w	r3, r2, r3
 8001464:	43da      	mvns	r2, r3
 8001466:	687b      	ldr	r3, [r7, #4]
 8001468:	681b      	ldr	r3, [r3, #0]
 800146a:	400a      	ands	r2, r1
 800146c:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	681b      	ldr	r3, [r3, #0]
 8001472:	6919      	ldr	r1, [r3, #16]
 8001474:	683b      	ldr	r3, [r7, #0]
 8001476:	689a      	ldr	r2, [r3, #8]
 8001478:	683b      	ldr	r3, [r7, #0]
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	b29b      	uxth	r3, r3
 800147e:	4618      	mov	r0, r3
 8001480:	4603      	mov	r3, r0
 8001482:	005b      	lsls	r3, r3, #1
 8001484:	4403      	add	r3, r0
 8001486:	409a      	lsls	r2, r3
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	430a      	orrs	r2, r1
 800148e:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8001490:	683b      	ldr	r3, [r7, #0]
 8001492:	685b      	ldr	r3, [r3, #4]
 8001494:	2b06      	cmp	r3, #6
 8001496:	d824      	bhi.n	80014e2 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8001498:	687b      	ldr	r3, [r7, #4]
 800149a:	681b      	ldr	r3, [r3, #0]
 800149c:	6b59      	ldr	r1, [r3, #52]	; 0x34
 800149e:	683b      	ldr	r3, [r7, #0]
 80014a0:	685a      	ldr	r2, [r3, #4]
 80014a2:	4613      	mov	r3, r2
 80014a4:	009b      	lsls	r3, r3, #2
 80014a6:	4413      	add	r3, r2
 80014a8:	3b05      	subs	r3, #5
 80014aa:	221f      	movs	r2, #31
 80014ac:	fa02 f303 	lsl.w	r3, r2, r3
 80014b0:	43da      	mvns	r2, r3
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	400a      	ands	r2, r1
 80014b8:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80014c0:	683b      	ldr	r3, [r7, #0]
 80014c2:	681b      	ldr	r3, [r3, #0]
 80014c4:	b29b      	uxth	r3, r3
 80014c6:	4618      	mov	r0, r3
 80014c8:	683b      	ldr	r3, [r7, #0]
 80014ca:	685a      	ldr	r2, [r3, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	009b      	lsls	r3, r3, #2
 80014d0:	4413      	add	r3, r2
 80014d2:	3b05      	subs	r3, #5
 80014d4:	fa00 f203 	lsl.w	r2, r0, r3
 80014d8:	687b      	ldr	r3, [r7, #4]
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	430a      	orrs	r2, r1
 80014de:	635a      	str	r2, [r3, #52]	; 0x34
 80014e0:	e04c      	b.n	800157c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80014e2:	683b      	ldr	r3, [r7, #0]
 80014e4:	685b      	ldr	r3, [r3, #4]
 80014e6:	2b0c      	cmp	r3, #12
 80014e8:	d824      	bhi.n	8001534 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80014ea:	687b      	ldr	r3, [r7, #4]
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80014f0:	683b      	ldr	r3, [r7, #0]
 80014f2:	685a      	ldr	r2, [r3, #4]
 80014f4:	4613      	mov	r3, r2
 80014f6:	009b      	lsls	r3, r3, #2
 80014f8:	4413      	add	r3, r2
 80014fa:	3b23      	subs	r3, #35	; 0x23
 80014fc:	221f      	movs	r2, #31
 80014fe:	fa02 f303 	lsl.w	r3, r2, r3
 8001502:	43da      	mvns	r2, r3
 8001504:	687b      	ldr	r3, [r7, #4]
 8001506:	681b      	ldr	r3, [r3, #0]
 8001508:	400a      	ands	r2, r1
 800150a:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800150c:	687b      	ldr	r3, [r7, #4]
 800150e:	681b      	ldr	r3, [r3, #0]
 8001510:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8001512:	683b      	ldr	r3, [r7, #0]
 8001514:	681b      	ldr	r3, [r3, #0]
 8001516:	b29b      	uxth	r3, r3
 8001518:	4618      	mov	r0, r3
 800151a:	683b      	ldr	r3, [r7, #0]
 800151c:	685a      	ldr	r2, [r3, #4]
 800151e:	4613      	mov	r3, r2
 8001520:	009b      	lsls	r3, r3, #2
 8001522:	4413      	add	r3, r2
 8001524:	3b23      	subs	r3, #35	; 0x23
 8001526:	fa00 f203 	lsl.w	r2, r0, r3
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	430a      	orrs	r2, r1
 8001530:	631a      	str	r2, [r3, #48]	; 0x30
 8001532:	e023      	b.n	800157c <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8001534:	687b      	ldr	r3, [r7, #4]
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800153a:	683b      	ldr	r3, [r7, #0]
 800153c:	685a      	ldr	r2, [r3, #4]
 800153e:	4613      	mov	r3, r2
 8001540:	009b      	lsls	r3, r3, #2
 8001542:	4413      	add	r3, r2
 8001544:	3b41      	subs	r3, #65	; 0x41
 8001546:	221f      	movs	r2, #31
 8001548:	fa02 f303 	lsl.w	r3, r2, r3
 800154c:	43da      	mvns	r2, r3
 800154e:	687b      	ldr	r3, [r7, #4]
 8001550:	681b      	ldr	r3, [r3, #0]
 8001552:	400a      	ands	r2, r1
 8001554:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8001556:	687b      	ldr	r3, [r7, #4]
 8001558:	681b      	ldr	r3, [r3, #0]
 800155a:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800155c:	683b      	ldr	r3, [r7, #0]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	b29b      	uxth	r3, r3
 8001562:	4618      	mov	r0, r3
 8001564:	683b      	ldr	r3, [r7, #0]
 8001566:	685a      	ldr	r2, [r3, #4]
 8001568:	4613      	mov	r3, r2
 800156a:	009b      	lsls	r3, r3, #2
 800156c:	4413      	add	r3, r2
 800156e:	3b41      	subs	r3, #65	; 0x41
 8001570:	fa00 f203 	lsl.w	r2, r0, r3
 8001574:	687b      	ldr	r3, [r7, #4]
 8001576:	681b      	ldr	r3, [r3, #0]
 8001578:	430a      	orrs	r2, r1
 800157a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 800157c:	687b      	ldr	r3, [r7, #4]
 800157e:	681b      	ldr	r3, [r3, #0]
 8001580:	4a2a      	ldr	r2, [pc, #168]	; (800162c <HAL_ADC_ConfigChannel+0x284>)
 8001582:	4293      	cmp	r3, r2
 8001584:	d10a      	bne.n	800159c <HAL_ADC_ConfigChannel+0x1f4>
 8001586:	683b      	ldr	r3, [r7, #0]
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800158e:	d105      	bne.n	800159c <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8001590:	4b27      	ldr	r3, [pc, #156]	; (8001630 <HAL_ADC_ConfigChannel+0x288>)
 8001592:	685b      	ldr	r3, [r3, #4]
 8001594:	4a26      	ldr	r2, [pc, #152]	; (8001630 <HAL_ADC_ConfigChannel+0x288>)
 8001596:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800159a:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	681b      	ldr	r3, [r3, #0]
 80015a0:	4a22      	ldr	r2, [pc, #136]	; (800162c <HAL_ADC_ConfigChannel+0x284>)
 80015a2:	4293      	cmp	r3, r2
 80015a4:	d109      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x212>
 80015a6:	683b      	ldr	r3, [r7, #0]
 80015a8:	681b      	ldr	r3, [r3, #0]
 80015aa:	2b12      	cmp	r3, #18
 80015ac:	d105      	bne.n	80015ba <HAL_ADC_ConfigChannel+0x212>
  {
    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80015ae:	4b20      	ldr	r3, [pc, #128]	; (8001630 <HAL_ADC_ConfigChannel+0x288>)
 80015b0:	685b      	ldr	r3, [r3, #4]
 80015b2:	4a1f      	ldr	r2, [pc, #124]	; (8001630 <HAL_ADC_ConfigChannel+0x288>)
 80015b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80015b8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	681b      	ldr	r3, [r3, #0]
 80015be:	4a1b      	ldr	r2, [pc, #108]	; (800162c <HAL_ADC_ConfigChannel+0x284>)
 80015c0:	4293      	cmp	r3, r2
 80015c2:	d125      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x268>
 80015c4:	683b      	ldr	r3, [r7, #0]
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a17      	ldr	r2, [pc, #92]	; (8001628 <HAL_ADC_ConfigChannel+0x280>)
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d003      	beq.n	80015d6 <HAL_ADC_ConfigChannel+0x22e>
 80015ce:	683b      	ldr	r3, [r7, #0]
 80015d0:	681b      	ldr	r3, [r3, #0]
 80015d2:	2b11      	cmp	r3, #17
 80015d4:	d11c      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x268>
  {
    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80015d6:	4b16      	ldr	r3, [pc, #88]	; (8001630 <HAL_ADC_ConfigChannel+0x288>)
 80015d8:	685b      	ldr	r3, [r3, #4]
 80015da:	4a15      	ldr	r2, [pc, #84]	; (8001630 <HAL_ADC_ConfigChannel+0x288>)
 80015dc:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80015e0:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80015e2:	683b      	ldr	r3, [r7, #0]
 80015e4:	681b      	ldr	r3, [r3, #0]
 80015e6:	4a10      	ldr	r2, [pc, #64]	; (8001628 <HAL_ADC_ConfigChannel+0x280>)
 80015e8:	4293      	cmp	r3, r2
 80015ea:	d111      	bne.n	8001610 <HAL_ADC_ConfigChannel+0x268>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80015ec:	4b11      	ldr	r3, [pc, #68]	; (8001634 <HAL_ADC_ConfigChannel+0x28c>)
 80015ee:	681b      	ldr	r3, [r3, #0]
 80015f0:	4a11      	ldr	r2, [pc, #68]	; (8001638 <HAL_ADC_ConfigChannel+0x290>)
 80015f2:	fba2 2303 	umull	r2, r3, r2, r3
 80015f6:	0c9a      	lsrs	r2, r3, #18
 80015f8:	4613      	mov	r3, r2
 80015fa:	009b      	lsls	r3, r3, #2
 80015fc:	4413      	add	r3, r2
 80015fe:	005b      	lsls	r3, r3, #1
 8001600:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8001602:	e002      	b.n	800160a <HAL_ADC_ConfigChannel+0x262>
      {
        counter--;
 8001604:	68fb      	ldr	r3, [r7, #12]
 8001606:	3b01      	subs	r3, #1
 8001608:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800160a:	68fb      	ldr	r3, [r7, #12]
 800160c:	2b00      	cmp	r3, #0
 800160e:	d1f9      	bne.n	8001604 <HAL_ADC_ConfigChannel+0x25c>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8001610:	687b      	ldr	r3, [r7, #4]
 8001612:	2200      	movs	r2, #0
 8001614:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8001618:	2300      	movs	r3, #0
}
 800161a:	4618      	mov	r0, r3
 800161c:	3714      	adds	r7, #20
 800161e:	46bd      	mov	sp, r7
 8001620:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001624:	4770      	bx	lr
 8001626:	bf00      	nop
 8001628:	10000012 	.word	0x10000012
 800162c:	40012000 	.word	0x40012000
 8001630:	40012300 	.word	0x40012300
 8001634:	20000014 	.word	0x20000014
 8001638:	431bde83 	.word	0x431bde83

0800163c <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 800163c:	b480      	push	{r7}
 800163e:	b083      	sub	sp, #12
 8001640:	af00      	add	r7, sp, #0
 8001642:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8001644:	4b78      	ldr	r3, [pc, #480]	; (8001828 <ADC_Init+0x1ec>)
 8001646:	685b      	ldr	r3, [r3, #4]
 8001648:	4a77      	ldr	r2, [pc, #476]	; (8001828 <ADC_Init+0x1ec>)
 800164a:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800164e:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 8001650:	4b75      	ldr	r3, [pc, #468]	; (8001828 <ADC_Init+0x1ec>)
 8001652:	685a      	ldr	r2, [r3, #4]
 8001654:	687b      	ldr	r3, [r7, #4]
 8001656:	685b      	ldr	r3, [r3, #4]
 8001658:	4973      	ldr	r1, [pc, #460]	; (8001828 <ADC_Init+0x1ec>)
 800165a:	4313      	orrs	r3, r2
 800165c:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	681b      	ldr	r3, [r3, #0]
 8001662:	685a      	ldr	r2, [r3, #4]
 8001664:	687b      	ldr	r3, [r7, #4]
 8001666:	681b      	ldr	r3, [r3, #0]
 8001668:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800166c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	6859      	ldr	r1, [r3, #4]
 8001674:	687b      	ldr	r3, [r7, #4]
 8001676:	691b      	ldr	r3, [r3, #16]
 8001678:	021a      	lsls	r2, r3, #8
 800167a:	687b      	ldr	r3, [r7, #4]
 800167c:	681b      	ldr	r3, [r3, #0]
 800167e:	430a      	orrs	r2, r1
 8001680:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8001682:	687b      	ldr	r3, [r7, #4]
 8001684:	681b      	ldr	r3, [r3, #0]
 8001686:	685a      	ldr	r2, [r3, #4]
 8001688:	687b      	ldr	r3, [r7, #4]
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8001690:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8001692:	687b      	ldr	r3, [r7, #4]
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	6859      	ldr	r1, [r3, #4]
 8001698:	687b      	ldr	r3, [r7, #4]
 800169a:	689a      	ldr	r2, [r3, #8]
 800169c:	687b      	ldr	r3, [r7, #4]
 800169e:	681b      	ldr	r3, [r3, #0]
 80016a0:	430a      	orrs	r2, r1
 80016a2:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	681b      	ldr	r3, [r3, #0]
 80016a8:	689a      	ldr	r2, [r3, #8]
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	681b      	ldr	r3, [r3, #0]
 80016ae:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80016b2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80016b4:	687b      	ldr	r3, [r7, #4]
 80016b6:	681b      	ldr	r3, [r3, #0]
 80016b8:	6899      	ldr	r1, [r3, #8]
 80016ba:	687b      	ldr	r3, [r7, #4]
 80016bc:	68da      	ldr	r2, [r3, #12]
 80016be:	687b      	ldr	r3, [r7, #4]
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	430a      	orrs	r2, r1
 80016c4:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016ca:	4a58      	ldr	r2, [pc, #352]	; (800182c <ADC_Init+0x1f0>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d022      	beq.n	8001716 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80016d0:	687b      	ldr	r3, [r7, #4]
 80016d2:	681b      	ldr	r3, [r3, #0]
 80016d4:	689a      	ldr	r2, [r3, #8]
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80016de:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80016e0:	687b      	ldr	r3, [r7, #4]
 80016e2:	681b      	ldr	r3, [r3, #0]
 80016e4:	6899      	ldr	r1, [r3, #8]
 80016e6:	687b      	ldr	r3, [r7, #4]
 80016e8:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	430a      	orrs	r2, r1
 80016f0:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80016f2:	687b      	ldr	r3, [r7, #4]
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	689a      	ldr	r2, [r3, #8]
 80016f8:	687b      	ldr	r3, [r7, #4]
 80016fa:	681b      	ldr	r3, [r3, #0]
 80016fc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001700:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	681b      	ldr	r3, [r3, #0]
 8001706:	6899      	ldr	r1, [r3, #8]
 8001708:	687b      	ldr	r3, [r7, #4]
 800170a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	430a      	orrs	r2, r1
 8001712:	609a      	str	r2, [r3, #8]
 8001714:	e00f      	b.n	8001736 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8001716:	687b      	ldr	r3, [r7, #4]
 8001718:	681b      	ldr	r3, [r3, #0]
 800171a:	689a      	ldr	r2, [r3, #8]
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8001724:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	689a      	ldr	r2, [r3, #8]
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	681b      	ldr	r3, [r3, #0]
 8001730:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8001734:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	689a      	ldr	r2, [r3, #8]
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	681b      	ldr	r3, [r3, #0]
 8001740:	f022 0202 	bic.w	r2, r2, #2
 8001744:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8001746:	687b      	ldr	r3, [r7, #4]
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	6899      	ldr	r1, [r3, #8]
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	699b      	ldr	r3, [r3, #24]
 8001750:	005a      	lsls	r2, r3, #1
 8001752:	687b      	ldr	r3, [r7, #4]
 8001754:	681b      	ldr	r3, [r3, #0]
 8001756:	430a      	orrs	r2, r1
 8001758:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	f893 3020 	ldrb.w	r3, [r3, #32]
 8001760:	2b00      	cmp	r3, #0
 8001762:	d01b      	beq.n	800179c <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8001764:	687b      	ldr	r3, [r7, #4]
 8001766:	681b      	ldr	r3, [r3, #0]
 8001768:	685a      	ldr	r2, [r3, #4]
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	681b      	ldr	r3, [r3, #0]
 800176e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8001772:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8001774:	687b      	ldr	r3, [r7, #4]
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	685a      	ldr	r2, [r3, #4]
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8001782:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	6859      	ldr	r1, [r3, #4]
 800178a:	687b      	ldr	r3, [r7, #4]
 800178c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800178e:	3b01      	subs	r3, #1
 8001790:	035a      	lsls	r2, r3, #13
 8001792:	687b      	ldr	r3, [r7, #4]
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	430a      	orrs	r2, r1
 8001798:	605a      	str	r2, [r3, #4]
 800179a:	e007      	b.n	80017ac <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 800179c:	687b      	ldr	r3, [r7, #4]
 800179e:	681b      	ldr	r3, [r3, #0]
 80017a0:	685a      	ldr	r2, [r3, #4]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	681b      	ldr	r3, [r3, #0]
 80017a6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80017aa:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80017ba:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	681b      	ldr	r3, [r3, #0]
 80017c0:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	69db      	ldr	r3, [r3, #28]
 80017c6:	3b01      	subs	r3, #1
 80017c8:	051a      	lsls	r2, r3, #20
 80017ca:	687b      	ldr	r3, [r7, #4]
 80017cc:	681b      	ldr	r3, [r3, #0]
 80017ce:	430a      	orrs	r2, r1
 80017d0:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	689a      	ldr	r2, [r3, #8]
 80017d8:	687b      	ldr	r3, [r7, #4]
 80017da:	681b      	ldr	r3, [r3, #0]
 80017dc:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80017e0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	681b      	ldr	r3, [r3, #0]
 80017e6:	6899      	ldr	r1, [r3, #8]
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80017ee:	025a      	lsls	r2, r3, #9
 80017f0:	687b      	ldr	r3, [r7, #4]
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	430a      	orrs	r2, r1
 80017f6:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80017f8:	687b      	ldr	r3, [r7, #4]
 80017fa:	681b      	ldr	r3, [r3, #0]
 80017fc:	689a      	ldr	r2, [r3, #8]
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8001806:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	681b      	ldr	r3, [r3, #0]
 800180c:	6899      	ldr	r1, [r3, #8]
 800180e:	687b      	ldr	r3, [r7, #4]
 8001810:	695b      	ldr	r3, [r3, #20]
 8001812:	029a      	lsls	r2, r3, #10
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	681b      	ldr	r3, [r3, #0]
 8001818:	430a      	orrs	r2, r1
 800181a:	609a      	str	r2, [r3, #8]
}
 800181c:	bf00      	nop
 800181e:	370c      	adds	r7, #12
 8001820:	46bd      	mov	sp, r7
 8001822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001826:	4770      	bx	lr
 8001828:	40012300 	.word	0x40012300
 800182c:	0f000001 	.word	0x0f000001

08001830 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001830:	b480      	push	{r7}
 8001832:	b085      	sub	sp, #20
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	f003 0307 	and.w	r3, r3, #7
 800183e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <__NVIC_SetPriorityGrouping+0x40>)
 8001842:	68db      	ldr	r3, [r3, #12]
 8001844:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001846:	68ba      	ldr	r2, [r7, #8]
 8001848:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800184c:	4013      	ands	r3, r2
 800184e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001850:	68fb      	ldr	r3, [r7, #12]
 8001852:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001854:	68bb      	ldr	r3, [r7, #8]
 8001856:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8001858:	4b06      	ldr	r3, [pc, #24]	; (8001874 <__NVIC_SetPriorityGrouping+0x44>)
 800185a:	4313      	orrs	r3, r2
 800185c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800185e:	4a04      	ldr	r2, [pc, #16]	; (8001870 <__NVIC_SetPriorityGrouping+0x40>)
 8001860:	68bb      	ldr	r3, [r7, #8]
 8001862:	60d3      	str	r3, [r2, #12]
}
 8001864:	bf00      	nop
 8001866:	3714      	adds	r7, #20
 8001868:	46bd      	mov	sp, r7
 800186a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800186e:	4770      	bx	lr
 8001870:	e000ed00 	.word	0xe000ed00
 8001874:	05fa0000 	.word	0x05fa0000

08001878 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800187c:	4b04      	ldr	r3, [pc, #16]	; (8001890 <__NVIC_GetPriorityGrouping+0x18>)
 800187e:	68db      	ldr	r3, [r3, #12]
 8001880:	0a1b      	lsrs	r3, r3, #8
 8001882:	f003 0307 	and.w	r3, r3, #7
}
 8001886:	4618      	mov	r0, r3
 8001888:	46bd      	mov	sp, r7
 800188a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188e:	4770      	bx	lr
 8001890:	e000ed00 	.word	0xe000ed00

08001894 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001894:	b480      	push	{r7}
 8001896:	b083      	sub	sp, #12
 8001898:	af00      	add	r7, sp, #0
 800189a:	4603      	mov	r3, r0
 800189c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800189e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018a2:	2b00      	cmp	r3, #0
 80018a4:	db0b      	blt.n	80018be <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	f003 021f 	and.w	r2, r3, #31
 80018ac:	4907      	ldr	r1, [pc, #28]	; (80018cc <__NVIC_EnableIRQ+0x38>)
 80018ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018b2:	095b      	lsrs	r3, r3, #5
 80018b4:	2001      	movs	r0, #1
 80018b6:	fa00 f202 	lsl.w	r2, r0, r2
 80018ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80018be:	bf00      	nop
 80018c0:	370c      	adds	r7, #12
 80018c2:	46bd      	mov	sp, r7
 80018c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c8:	4770      	bx	lr
 80018ca:	bf00      	nop
 80018cc:	e000e100 	.word	0xe000e100

080018d0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80018d0:	b480      	push	{r7}
 80018d2:	b083      	sub	sp, #12
 80018d4:	af00      	add	r7, sp, #0
 80018d6:	4603      	mov	r3, r0
 80018d8:	6039      	str	r1, [r7, #0]
 80018da:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80018dc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018e0:	2b00      	cmp	r3, #0
 80018e2:	db0a      	blt.n	80018fa <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	b2da      	uxtb	r2, r3
 80018e8:	490c      	ldr	r1, [pc, #48]	; (800191c <__NVIC_SetPriority+0x4c>)
 80018ea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80018ee:	0112      	lsls	r2, r2, #4
 80018f0:	b2d2      	uxtb	r2, r2
 80018f2:	440b      	add	r3, r1
 80018f4:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80018f8:	e00a      	b.n	8001910 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80018fa:	683b      	ldr	r3, [r7, #0]
 80018fc:	b2da      	uxtb	r2, r3
 80018fe:	4908      	ldr	r1, [pc, #32]	; (8001920 <__NVIC_SetPriority+0x50>)
 8001900:	79fb      	ldrb	r3, [r7, #7]
 8001902:	f003 030f 	and.w	r3, r3, #15
 8001906:	3b04      	subs	r3, #4
 8001908:	0112      	lsls	r2, r2, #4
 800190a:	b2d2      	uxtb	r2, r2
 800190c:	440b      	add	r3, r1
 800190e:	761a      	strb	r2, [r3, #24]
}
 8001910:	bf00      	nop
 8001912:	370c      	adds	r7, #12
 8001914:	46bd      	mov	sp, r7
 8001916:	f85d 7b04 	ldr.w	r7, [sp], #4
 800191a:	4770      	bx	lr
 800191c:	e000e100 	.word	0xe000e100
 8001920:	e000ed00 	.word	0xe000ed00

08001924 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001924:	b480      	push	{r7}
 8001926:	b089      	sub	sp, #36	; 0x24
 8001928:	af00      	add	r7, sp, #0
 800192a:	60f8      	str	r0, [r7, #12]
 800192c:	60b9      	str	r1, [r7, #8]
 800192e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001930:	68fb      	ldr	r3, [r7, #12]
 8001932:	f003 0307 	and.w	r3, r3, #7
 8001936:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001938:	69fb      	ldr	r3, [r7, #28]
 800193a:	f1c3 0307 	rsb	r3, r3, #7
 800193e:	2b04      	cmp	r3, #4
 8001940:	bf28      	it	cs
 8001942:	2304      	movcs	r3, #4
 8001944:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001946:	69fb      	ldr	r3, [r7, #28]
 8001948:	3304      	adds	r3, #4
 800194a:	2b06      	cmp	r3, #6
 800194c:	d902      	bls.n	8001954 <NVIC_EncodePriority+0x30>
 800194e:	69fb      	ldr	r3, [r7, #28]
 8001950:	3b03      	subs	r3, #3
 8001952:	e000      	b.n	8001956 <NVIC_EncodePriority+0x32>
 8001954:	2300      	movs	r3, #0
 8001956:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001958:	f04f 32ff 	mov.w	r2, #4294967295
 800195c:	69bb      	ldr	r3, [r7, #24]
 800195e:	fa02 f303 	lsl.w	r3, r2, r3
 8001962:	43da      	mvns	r2, r3
 8001964:	68bb      	ldr	r3, [r7, #8]
 8001966:	401a      	ands	r2, r3
 8001968:	697b      	ldr	r3, [r7, #20]
 800196a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800196c:	f04f 31ff 	mov.w	r1, #4294967295
 8001970:	697b      	ldr	r3, [r7, #20]
 8001972:	fa01 f303 	lsl.w	r3, r1, r3
 8001976:	43d9      	mvns	r1, r3
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800197c:	4313      	orrs	r3, r2
         );
}
 800197e:	4618      	mov	r0, r3
 8001980:	3724      	adds	r7, #36	; 0x24
 8001982:	46bd      	mov	sp, r7
 8001984:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001988:	4770      	bx	lr
	...

0800198c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b082      	sub	sp, #8
 8001990:	af00      	add	r7, sp, #0
 8001992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001994:	687b      	ldr	r3, [r7, #4]
 8001996:	3b01      	subs	r3, #1
 8001998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800199c:	d301      	bcc.n	80019a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800199e:	2301      	movs	r3, #1
 80019a0:	e00f      	b.n	80019c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80019a2:	4a0a      	ldr	r2, [pc, #40]	; (80019cc <SysTick_Config+0x40>)
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	3b01      	subs	r3, #1
 80019a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80019aa:	210f      	movs	r1, #15
 80019ac:	f04f 30ff 	mov.w	r0, #4294967295
 80019b0:	f7ff ff8e 	bl	80018d0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80019b4:	4b05      	ldr	r3, [pc, #20]	; (80019cc <SysTick_Config+0x40>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80019ba:	4b04      	ldr	r3, [pc, #16]	; (80019cc <SysTick_Config+0x40>)
 80019bc:	2207      	movs	r2, #7
 80019be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80019c0:	2300      	movs	r3, #0
}
 80019c2:	4618      	mov	r0, r3
 80019c4:	3708      	adds	r7, #8
 80019c6:	46bd      	mov	sp, r7
 80019c8:	bd80      	pop	{r7, pc}
 80019ca:	bf00      	nop
 80019cc:	e000e010 	.word	0xe000e010

080019d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80019d0:	b580      	push	{r7, lr}
 80019d2:	b082      	sub	sp, #8
 80019d4:	af00      	add	r7, sp, #0
 80019d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80019d8:	6878      	ldr	r0, [r7, #4]
 80019da:	f7ff ff29 	bl	8001830 <__NVIC_SetPriorityGrouping>
}
 80019de:	bf00      	nop
 80019e0:	3708      	adds	r7, #8
 80019e2:	46bd      	mov	sp, r7
 80019e4:	bd80      	pop	{r7, pc}

080019e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80019e6:	b580      	push	{r7, lr}
 80019e8:	b086      	sub	sp, #24
 80019ea:	af00      	add	r7, sp, #0
 80019ec:	4603      	mov	r3, r0
 80019ee:	60b9      	str	r1, [r7, #8]
 80019f0:	607a      	str	r2, [r7, #4]
 80019f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80019f4:	2300      	movs	r3, #0
 80019f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80019f8:	f7ff ff3e 	bl	8001878 <__NVIC_GetPriorityGrouping>
 80019fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80019fe:	687a      	ldr	r2, [r7, #4]
 8001a00:	68b9      	ldr	r1, [r7, #8]
 8001a02:	6978      	ldr	r0, [r7, #20]
 8001a04:	f7ff ff8e 	bl	8001924 <NVIC_EncodePriority>
 8001a08:	4602      	mov	r2, r0
 8001a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a0e:	4611      	mov	r1, r2
 8001a10:	4618      	mov	r0, r3
 8001a12:	f7ff ff5d 	bl	80018d0 <__NVIC_SetPriority>
}
 8001a16:	bf00      	nop
 8001a18:	3718      	adds	r7, #24
 8001a1a:	46bd      	mov	sp, r7
 8001a1c:	bd80      	pop	{r7, pc}

08001a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001a1e:	b580      	push	{r7, lr}
 8001a20:	b082      	sub	sp, #8
 8001a22:	af00      	add	r7, sp, #0
 8001a24:	4603      	mov	r3, r0
 8001a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001a2c:	4618      	mov	r0, r3
 8001a2e:	f7ff ff31 	bl	8001894 <__NVIC_EnableIRQ>
}
 8001a32:	bf00      	nop
 8001a34:	3708      	adds	r7, #8
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bd80      	pop	{r7, pc}

08001a3a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001a3a:	b580      	push	{r7, lr}
 8001a3c:	b082      	sub	sp, #8
 8001a3e:	af00      	add	r7, sp, #0
 8001a40:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001a42:	6878      	ldr	r0, [r7, #4]
 8001a44:	f7ff ffa2 	bl	800198c <SysTick_Config>
 8001a48:	4603      	mov	r3, r0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}

08001a52 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001a52:	b580      	push	{r7, lr}
 8001a54:	b082      	sub	sp, #8
 8001a56:	af00      	add	r7, sp, #0
 8001a58:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001a5a:	687b      	ldr	r3, [r7, #4]
 8001a5c:	2b00      	cmp	r3, #0
 8001a5e:	d101      	bne.n	8001a64 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e014      	b.n	8001a8e <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	791b      	ldrb	r3, [r3, #4]
 8001a68:	b2db      	uxtb	r3, r3
 8001a6a:	2b00      	cmp	r3, #0
 8001a6c:	d105      	bne.n	8001a7a <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001a6e:	687b      	ldr	r3, [r7, #4]
 8001a70:	2200      	movs	r2, #0
 8001a72:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001a74:	6878      	ldr	r0, [r7, #4]
 8001a76:	f7ff f8f7 	bl	8000c68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	2202      	movs	r2, #2
 8001a7e:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	2200      	movs	r2, #0
 8001a84:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001a86:	687b      	ldr	r3, [r7, #4]
 8001a88:	2201      	movs	r2, #1
 8001a8a:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001a8c:	2300      	movs	r3, #0
}
 8001a8e:	4618      	mov	r0, r3
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8001a96:	b480      	push	{r7}
 8001a98:	b087      	sub	sp, #28
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	681b      	ldr	r3, [r3, #0]
 8001aac:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8001aae:	68bb      	ldr	r3, [r7, #8]
 8001ab0:	2b00      	cmp	r3, #0
 8001ab2:	d105      	bne.n	8001ac0 <HAL_DAC_SetValue+0x2a>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8001ab4:	697a      	ldr	r2, [r7, #20]
 8001ab6:	687b      	ldr	r3, [r7, #4]
 8001ab8:	4413      	add	r3, r2
 8001aba:	3308      	adds	r3, #8
 8001abc:	617b      	str	r3, [r7, #20]
 8001abe:	e004      	b.n	8001aca <HAL_DAC_SetValue+0x34>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8001ac0:	697a      	ldr	r2, [r7, #20]
 8001ac2:	687b      	ldr	r3, [r7, #4]
 8001ac4:	4413      	add	r3, r2
 8001ac6:	3314      	adds	r3, #20
 8001ac8:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8001aca:	697b      	ldr	r3, [r7, #20]
 8001acc:	461a      	mov	r2, r3
 8001ace:	683b      	ldr	r3, [r7, #0]
 8001ad0:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8001ad2:	2300      	movs	r3, #0
}
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	371c      	adds	r7, #28
 8001ad8:	46bd      	mov	sp, r7
 8001ada:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ade:	4770      	bx	lr

08001ae0 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	b087      	sub	sp, #28
 8001ae4:	af00      	add	r7, sp, #0
 8001ae6:	60f8      	str	r0, [r7, #12]
 8001ae8:	60b9      	str	r1, [r7, #8]
 8001aea:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001aec:	68fb      	ldr	r3, [r7, #12]
 8001aee:	795b      	ldrb	r3, [r3, #5]
 8001af0:	2b01      	cmp	r3, #1
 8001af2:	d101      	bne.n	8001af8 <HAL_DAC_ConfigChannel+0x18>
 8001af4:	2302      	movs	r3, #2
 8001af6:	e03c      	b.n	8001b72 <HAL_DAC_ConfigChannel+0x92>
 8001af8:	68fb      	ldr	r3, [r7, #12]
 8001afa:	2201      	movs	r2, #1
 8001afc:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001afe:	68fb      	ldr	r3, [r7, #12]
 8001b00:	2202      	movs	r2, #2
 8001b02:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001b04:	68fb      	ldr	r3, [r7, #12]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	681b      	ldr	r3, [r3, #0]
 8001b0a:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001b0c:	687b      	ldr	r3, [r7, #4]
 8001b0e:	f003 0310 	and.w	r3, r3, #16
 8001b12:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001b16:	fa02 f303 	lsl.w	r3, r2, r3
 8001b1a:	43db      	mvns	r3, r3
 8001b1c:	697a      	ldr	r2, [r7, #20]
 8001b1e:	4013      	ands	r3, r2
 8001b20:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001b22:	68bb      	ldr	r3, [r7, #8]
 8001b24:	681a      	ldr	r2, [r3, #0]
 8001b26:	68bb      	ldr	r3, [r7, #8]
 8001b28:	685b      	ldr	r3, [r3, #4]
 8001b2a:	4313      	orrs	r3, r2
 8001b2c:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001b2e:	687b      	ldr	r3, [r7, #4]
 8001b30:	f003 0310 	and.w	r3, r3, #16
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	fa02 f303 	lsl.w	r3, r2, r3
 8001b3a:	697a      	ldr	r2, [r7, #20]
 8001b3c:	4313      	orrs	r3, r2
 8001b3e:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001b40:	68fb      	ldr	r3, [r7, #12]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	697a      	ldr	r2, [r7, #20]
 8001b46:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	681b      	ldr	r3, [r3, #0]
 8001b4c:	6819      	ldr	r1, [r3, #0]
 8001b4e:	687b      	ldr	r3, [r7, #4]
 8001b50:	f003 0310 	and.w	r3, r3, #16
 8001b54:	22c0      	movs	r2, #192	; 0xc0
 8001b56:	fa02 f303 	lsl.w	r3, r2, r3
 8001b5a:	43da      	mvns	r2, r3
 8001b5c:	68fb      	ldr	r3, [r7, #12]
 8001b5e:	681b      	ldr	r3, [r3, #0]
 8001b60:	400a      	ands	r2, r1
 8001b62:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001b64:	68fb      	ldr	r3, [r7, #12]
 8001b66:	2201      	movs	r2, #1
 8001b68:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001b6a:	68fb      	ldr	r3, [r7, #12]
 8001b6c:	2200      	movs	r2, #0
 8001b6e:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001b70:	2300      	movs	r3, #0
}
 8001b72:	4618      	mov	r0, r3
 8001b74:	371c      	adds	r7, #28
 8001b76:	46bd      	mov	sp, r7
 8001b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b7c:	4770      	bx	lr
	...

08001b80 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b80:	b480      	push	{r7}
 8001b82:	b089      	sub	sp, #36	; 0x24
 8001b84:	af00      	add	r7, sp, #0
 8001b86:	6078      	str	r0, [r7, #4]
 8001b88:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8001b8e:	2300      	movs	r3, #0
 8001b90:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8001b92:	2300      	movs	r3, #0
 8001b94:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8001b96:	2300      	movs	r3, #0
 8001b98:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	61fb      	str	r3, [r7, #28]
 8001b9e:	e175      	b.n	8001e8c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8001ba0:	2201      	movs	r2, #1
 8001ba2:	69fb      	ldr	r3, [r7, #28]
 8001ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8001ba8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001baa:	683b      	ldr	r3, [r7, #0]
 8001bac:	681b      	ldr	r3, [r3, #0]
 8001bae:	697a      	ldr	r2, [r7, #20]
 8001bb0:	4013      	ands	r3, r2
 8001bb2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001bb4:	693a      	ldr	r2, [r7, #16]
 8001bb6:	697b      	ldr	r3, [r7, #20]
 8001bb8:	429a      	cmp	r2, r3
 8001bba:	f040 8164 	bne.w	8001e86 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bbe:	683b      	ldr	r3, [r7, #0]
 8001bc0:	685b      	ldr	r3, [r3, #4]
 8001bc2:	2b01      	cmp	r3, #1
 8001bc4:	d00b      	beq.n	8001bde <HAL_GPIO_Init+0x5e>
 8001bc6:	683b      	ldr	r3, [r7, #0]
 8001bc8:	685b      	ldr	r3, [r3, #4]
 8001bca:	2b02      	cmp	r3, #2
 8001bcc:	d007      	beq.n	8001bde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bce:	683b      	ldr	r3, [r7, #0]
 8001bd0:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8001bd2:	2b11      	cmp	r3, #17
 8001bd4:	d003      	beq.n	8001bde <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001bd6:	683b      	ldr	r3, [r7, #0]
 8001bd8:	685b      	ldr	r3, [r3, #4]
 8001bda:	2b12      	cmp	r3, #18
 8001bdc:	d130      	bne.n	8001c40 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	689b      	ldr	r3, [r3, #8]
 8001be2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8001be4:	69fb      	ldr	r3, [r7, #28]
 8001be6:	005b      	lsls	r3, r3, #1
 8001be8:	2203      	movs	r2, #3
 8001bea:	fa02 f303 	lsl.w	r3, r2, r3
 8001bee:	43db      	mvns	r3, r3
 8001bf0:	69ba      	ldr	r2, [r7, #24]
 8001bf2:	4013      	ands	r3, r2
 8001bf4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8001bf6:	683b      	ldr	r3, [r7, #0]
 8001bf8:	68da      	ldr	r2, [r3, #12]
 8001bfa:	69fb      	ldr	r3, [r7, #28]
 8001bfc:	005b      	lsls	r3, r3, #1
 8001bfe:	fa02 f303 	lsl.w	r3, r2, r3
 8001c02:	69ba      	ldr	r2, [r7, #24]
 8001c04:	4313      	orrs	r3, r2
 8001c06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001c08:	687b      	ldr	r3, [r7, #4]
 8001c0a:	69ba      	ldr	r2, [r7, #24]
 8001c0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	685b      	ldr	r3, [r3, #4]
 8001c12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001c14:	2201      	movs	r2, #1
 8001c16:	69fb      	ldr	r3, [r7, #28]
 8001c18:	fa02 f303 	lsl.w	r3, r2, r3
 8001c1c:	43db      	mvns	r3, r3
 8001c1e:	69ba      	ldr	r2, [r7, #24]
 8001c20:	4013      	ands	r3, r2
 8001c22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	685b      	ldr	r3, [r3, #4]
 8001c28:	091b      	lsrs	r3, r3, #4
 8001c2a:	f003 0201 	and.w	r2, r3, #1
 8001c2e:	69fb      	ldr	r3, [r7, #28]
 8001c30:	fa02 f303 	lsl.w	r3, r2, r3
 8001c34:	69ba      	ldr	r2, [r7, #24]
 8001c36:	4313      	orrs	r3, r2
 8001c38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	69ba      	ldr	r2, [r7, #24]
 8001c3e:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8001c40:	687b      	ldr	r3, [r7, #4]
 8001c42:	68db      	ldr	r3, [r3, #12]
 8001c44:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8001c46:	69fb      	ldr	r3, [r7, #28]
 8001c48:	005b      	lsls	r3, r3, #1
 8001c4a:	2203      	movs	r2, #3
 8001c4c:	fa02 f303 	lsl.w	r3, r2, r3
 8001c50:	43db      	mvns	r3, r3
 8001c52:	69ba      	ldr	r2, [r7, #24]
 8001c54:	4013      	ands	r3, r2
 8001c56:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8001c58:	683b      	ldr	r3, [r7, #0]
 8001c5a:	689a      	ldr	r2, [r3, #8]
 8001c5c:	69fb      	ldr	r3, [r7, #28]
 8001c5e:	005b      	lsls	r3, r3, #1
 8001c60:	fa02 f303 	lsl.w	r3, r2, r3
 8001c64:	69ba      	ldr	r2, [r7, #24]
 8001c66:	4313      	orrs	r3, r2
 8001c68:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	69ba      	ldr	r2, [r7, #24]
 8001c6e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8001c70:	683b      	ldr	r3, [r7, #0]
 8001c72:	685b      	ldr	r3, [r3, #4]
 8001c74:	2b02      	cmp	r3, #2
 8001c76:	d003      	beq.n	8001c80 <HAL_GPIO_Init+0x100>
 8001c78:	683b      	ldr	r3, [r7, #0]
 8001c7a:	685b      	ldr	r3, [r3, #4]
 8001c7c:	2b12      	cmp	r3, #18
 8001c7e:	d123      	bne.n	8001cc8 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8001c80:	69fb      	ldr	r3, [r7, #28]
 8001c82:	08da      	lsrs	r2, r3, #3
 8001c84:	687b      	ldr	r3, [r7, #4]
 8001c86:	3208      	adds	r2, #8
 8001c88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001c8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8001c8e:	69fb      	ldr	r3, [r7, #28]
 8001c90:	f003 0307 	and.w	r3, r3, #7
 8001c94:	009b      	lsls	r3, r3, #2
 8001c96:	220f      	movs	r2, #15
 8001c98:	fa02 f303 	lsl.w	r3, r2, r3
 8001c9c:	43db      	mvns	r3, r3
 8001c9e:	69ba      	ldr	r2, [r7, #24]
 8001ca0:	4013      	ands	r3, r2
 8001ca2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8001ca4:	683b      	ldr	r3, [r7, #0]
 8001ca6:	691a      	ldr	r2, [r3, #16]
 8001ca8:	69fb      	ldr	r3, [r7, #28]
 8001caa:	f003 0307 	and.w	r3, r3, #7
 8001cae:	009b      	lsls	r3, r3, #2
 8001cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8001cb4:	69ba      	ldr	r2, [r7, #24]
 8001cb6:	4313      	orrs	r3, r2
 8001cb8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8001cba:	69fb      	ldr	r3, [r7, #28]
 8001cbc:	08da      	lsrs	r2, r3, #3
 8001cbe:	687b      	ldr	r3, [r7, #4]
 8001cc0:	3208      	adds	r2, #8
 8001cc2:	69b9      	ldr	r1, [r7, #24]
 8001cc4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8001cce:	69fb      	ldr	r3, [r7, #28]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	2203      	movs	r2, #3
 8001cd4:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd8:	43db      	mvns	r3, r3
 8001cda:	69ba      	ldr	r2, [r7, #24]
 8001cdc:	4013      	ands	r3, r2
 8001cde:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8001ce0:	683b      	ldr	r3, [r7, #0]
 8001ce2:	685b      	ldr	r3, [r3, #4]
 8001ce4:	f003 0203 	and.w	r2, r3, #3
 8001ce8:	69fb      	ldr	r3, [r7, #28]
 8001cea:	005b      	lsls	r3, r3, #1
 8001cec:	fa02 f303 	lsl.w	r3, r2, r3
 8001cf0:	69ba      	ldr	r2, [r7, #24]
 8001cf2:	4313      	orrs	r3, r2
 8001cf4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	69ba      	ldr	r2, [r7, #24]
 8001cfa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cfc:	683b      	ldr	r3, [r7, #0]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d04:	2b00      	cmp	r3, #0
 8001d06:	f000 80be 	beq.w	8001e86 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001d0a:	4b66      	ldr	r3, [pc, #408]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001d0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d0e:	4a65      	ldr	r2, [pc, #404]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001d10:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001d14:	6453      	str	r3, [r2, #68]	; 0x44
 8001d16:	4b63      	ldr	r3, [pc, #396]	; (8001ea4 <HAL_GPIO_Init+0x324>)
 8001d18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001d1a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001d1e:	60fb      	str	r3, [r7, #12]
 8001d20:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8001d22:	4a61      	ldr	r2, [pc, #388]	; (8001ea8 <HAL_GPIO_Init+0x328>)
 8001d24:	69fb      	ldr	r3, [r7, #28]
 8001d26:	089b      	lsrs	r3, r3, #2
 8001d28:	3302      	adds	r3, #2
 8001d2a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	f003 0303 	and.w	r3, r3, #3
 8001d36:	009b      	lsls	r3, r3, #2
 8001d38:	220f      	movs	r2, #15
 8001d3a:	fa02 f303 	lsl.w	r3, r2, r3
 8001d3e:	43db      	mvns	r3, r3
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	4013      	ands	r3, r2
 8001d44:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8001d46:	687b      	ldr	r3, [r7, #4]
 8001d48:	4a58      	ldr	r2, [pc, #352]	; (8001eac <HAL_GPIO_Init+0x32c>)
 8001d4a:	4293      	cmp	r3, r2
 8001d4c:	d037      	beq.n	8001dbe <HAL_GPIO_Init+0x23e>
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	4a57      	ldr	r2, [pc, #348]	; (8001eb0 <HAL_GPIO_Init+0x330>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d031      	beq.n	8001dba <HAL_GPIO_Init+0x23a>
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	4a56      	ldr	r2, [pc, #344]	; (8001eb4 <HAL_GPIO_Init+0x334>)
 8001d5a:	4293      	cmp	r3, r2
 8001d5c:	d02b      	beq.n	8001db6 <HAL_GPIO_Init+0x236>
 8001d5e:	687b      	ldr	r3, [r7, #4]
 8001d60:	4a55      	ldr	r2, [pc, #340]	; (8001eb8 <HAL_GPIO_Init+0x338>)
 8001d62:	4293      	cmp	r3, r2
 8001d64:	d025      	beq.n	8001db2 <HAL_GPIO_Init+0x232>
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	4a54      	ldr	r2, [pc, #336]	; (8001ebc <HAL_GPIO_Init+0x33c>)
 8001d6a:	4293      	cmp	r3, r2
 8001d6c:	d01f      	beq.n	8001dae <HAL_GPIO_Init+0x22e>
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	4a53      	ldr	r2, [pc, #332]	; (8001ec0 <HAL_GPIO_Init+0x340>)
 8001d72:	4293      	cmp	r3, r2
 8001d74:	d019      	beq.n	8001daa <HAL_GPIO_Init+0x22a>
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	4a52      	ldr	r2, [pc, #328]	; (8001ec4 <HAL_GPIO_Init+0x344>)
 8001d7a:	4293      	cmp	r3, r2
 8001d7c:	d013      	beq.n	8001da6 <HAL_GPIO_Init+0x226>
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4a51      	ldr	r2, [pc, #324]	; (8001ec8 <HAL_GPIO_Init+0x348>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d00d      	beq.n	8001da2 <HAL_GPIO_Init+0x222>
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	4a50      	ldr	r2, [pc, #320]	; (8001ecc <HAL_GPIO_Init+0x34c>)
 8001d8a:	4293      	cmp	r3, r2
 8001d8c:	d007      	beq.n	8001d9e <HAL_GPIO_Init+0x21e>
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	4a4f      	ldr	r2, [pc, #316]	; (8001ed0 <HAL_GPIO_Init+0x350>)
 8001d92:	4293      	cmp	r3, r2
 8001d94:	d101      	bne.n	8001d9a <HAL_GPIO_Init+0x21a>
 8001d96:	2309      	movs	r3, #9
 8001d98:	e012      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001d9a:	230a      	movs	r3, #10
 8001d9c:	e010      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001d9e:	2308      	movs	r3, #8
 8001da0:	e00e      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001da2:	2307      	movs	r3, #7
 8001da4:	e00c      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001da6:	2306      	movs	r3, #6
 8001da8:	e00a      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001daa:	2305      	movs	r3, #5
 8001dac:	e008      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001dae:	2304      	movs	r3, #4
 8001db0:	e006      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001db2:	2303      	movs	r3, #3
 8001db4:	e004      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001db6:	2302      	movs	r3, #2
 8001db8:	e002      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001dba:	2301      	movs	r3, #1
 8001dbc:	e000      	b.n	8001dc0 <HAL_GPIO_Init+0x240>
 8001dbe:	2300      	movs	r3, #0
 8001dc0:	69fa      	ldr	r2, [r7, #28]
 8001dc2:	f002 0203 	and.w	r2, r2, #3
 8001dc6:	0092      	lsls	r2, r2, #2
 8001dc8:	4093      	lsls	r3, r2
 8001dca:	69ba      	ldr	r2, [r7, #24]
 8001dcc:	4313      	orrs	r3, r2
 8001dce:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8001dd0:	4935      	ldr	r1, [pc, #212]	; (8001ea8 <HAL_GPIO_Init+0x328>)
 8001dd2:	69fb      	ldr	r3, [r7, #28]
 8001dd4:	089b      	lsrs	r3, r3, #2
 8001dd6:	3302      	adds	r3, #2
 8001dd8:	69ba      	ldr	r2, [r7, #24]
 8001dda:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001dde:	4b3d      	ldr	r3, [pc, #244]	; (8001ed4 <HAL_GPIO_Init+0x354>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001de4:	693b      	ldr	r3, [r7, #16]
 8001de6:	43db      	mvns	r3, r3
 8001de8:	69ba      	ldr	r2, [r7, #24]
 8001dea:	4013      	ands	r3, r2
 8001dec:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dee:	683b      	ldr	r3, [r7, #0]
 8001df0:	685b      	ldr	r3, [r3, #4]
 8001df2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001df6:	2b00      	cmp	r3, #0
 8001df8:	d003      	beq.n	8001e02 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8001dfa:	69ba      	ldr	r2, [r7, #24]
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	4313      	orrs	r3, r2
 8001e00:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001e02:	4a34      	ldr	r2, [pc, #208]	; (8001ed4 <HAL_GPIO_Init+0x354>)
 8001e04:	69bb      	ldr	r3, [r7, #24]
 8001e06:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8001e08:	4b32      	ldr	r3, [pc, #200]	; (8001ed4 <HAL_GPIO_Init+0x354>)
 8001e0a:	685b      	ldr	r3, [r3, #4]
 8001e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	43db      	mvns	r3, r3
 8001e12:	69ba      	ldr	r2, [r7, #24]
 8001e14:	4013      	ands	r3, r2
 8001e16:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001e18:	683b      	ldr	r3, [r7, #0]
 8001e1a:	685b      	ldr	r3, [r3, #4]
 8001e1c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e20:	2b00      	cmp	r3, #0
 8001e22:	d003      	beq.n	8001e2c <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8001e24:	69ba      	ldr	r2, [r7, #24]
 8001e26:	693b      	ldr	r3, [r7, #16]
 8001e28:	4313      	orrs	r3, r2
 8001e2a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8001e2c:	4a29      	ldr	r2, [pc, #164]	; (8001ed4 <HAL_GPIO_Init+0x354>)
 8001e2e:	69bb      	ldr	r3, [r7, #24]
 8001e30:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8001e32:	4b28      	ldr	r3, [pc, #160]	; (8001ed4 <HAL_GPIO_Init+0x354>)
 8001e34:	689b      	ldr	r3, [r3, #8]
 8001e36:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e38:	693b      	ldr	r3, [r7, #16]
 8001e3a:	43db      	mvns	r3, r3
 8001e3c:	69ba      	ldr	r2, [r7, #24]
 8001e3e:	4013      	ands	r3, r2
 8001e40:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001e42:	683b      	ldr	r3, [r7, #0]
 8001e44:	685b      	ldr	r3, [r3, #4]
 8001e46:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d003      	beq.n	8001e56 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8001e4e:	69ba      	ldr	r2, [r7, #24]
 8001e50:	693b      	ldr	r3, [r7, #16]
 8001e52:	4313      	orrs	r3, r2
 8001e54:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001e56:	4a1f      	ldr	r2, [pc, #124]	; (8001ed4 <HAL_GPIO_Init+0x354>)
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001e5c:	4b1d      	ldr	r3, [pc, #116]	; (8001ed4 <HAL_GPIO_Init+0x354>)
 8001e5e:	68db      	ldr	r3, [r3, #12]
 8001e60:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001e62:	693b      	ldr	r3, [r7, #16]
 8001e64:	43db      	mvns	r3, r3
 8001e66:	69ba      	ldr	r2, [r7, #24]
 8001e68:	4013      	ands	r3, r2
 8001e6a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001e6c:	683b      	ldr	r3, [r7, #0]
 8001e6e:	685b      	ldr	r3, [r3, #4]
 8001e70:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001e74:	2b00      	cmp	r3, #0
 8001e76:	d003      	beq.n	8001e80 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8001e78:	69ba      	ldr	r2, [r7, #24]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	4313      	orrs	r3, r2
 8001e7e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001e80:	4a14      	ldr	r2, [pc, #80]	; (8001ed4 <HAL_GPIO_Init+0x354>)
 8001e82:	69bb      	ldr	r3, [r7, #24]
 8001e84:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8001e86:	69fb      	ldr	r3, [r7, #28]
 8001e88:	3301      	adds	r3, #1
 8001e8a:	61fb      	str	r3, [r7, #28]
 8001e8c:	69fb      	ldr	r3, [r7, #28]
 8001e8e:	2b0f      	cmp	r3, #15
 8001e90:	f67f ae86 	bls.w	8001ba0 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8001e94:	bf00      	nop
 8001e96:	bf00      	nop
 8001e98:	3724      	adds	r7, #36	; 0x24
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ea0:	4770      	bx	lr
 8001ea2:	bf00      	nop
 8001ea4:	40023800 	.word	0x40023800
 8001ea8:	40013800 	.word	0x40013800
 8001eac:	40020000 	.word	0x40020000
 8001eb0:	40020400 	.word	0x40020400
 8001eb4:	40020800 	.word	0x40020800
 8001eb8:	40020c00 	.word	0x40020c00
 8001ebc:	40021000 	.word	0x40021000
 8001ec0:	40021400 	.word	0x40021400
 8001ec4:	40021800 	.word	0x40021800
 8001ec8:	40021c00 	.word	0x40021c00
 8001ecc:	40022000 	.word	0x40022000
 8001ed0:	40022400 	.word	0x40022400
 8001ed4:	40013c00 	.word	0x40013c00

08001ed8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001ed8:	b480      	push	{r7}
 8001eda:	b083      	sub	sp, #12
 8001edc:	af00      	add	r7, sp, #0
 8001ede:	6078      	str	r0, [r7, #4]
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	807b      	strh	r3, [r7, #2]
 8001ee4:	4613      	mov	r3, r2
 8001ee6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001ee8:	787b      	ldrb	r3, [r7, #1]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001eee:	887a      	ldrh	r2, [r7, #2]
 8001ef0:	687b      	ldr	r3, [r7, #4]
 8001ef2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8001ef4:	e003      	b.n	8001efe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8001ef6:	887b      	ldrh	r3, [r7, #2]
 8001ef8:	041a      	lsls	r2, r3, #16
 8001efa:	687b      	ldr	r3, [r7, #4]
 8001efc:	619a      	str	r2, [r3, #24]
}
 8001efe:	bf00      	nop
 8001f00:	370c      	adds	r7, #12
 8001f02:	46bd      	mov	sp, r7
 8001f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f08:	4770      	bx	lr

08001f0a <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 8001f0a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001f0c:	b08f      	sub	sp, #60	; 0x3c
 8001f0e:	af0a      	add	r7, sp, #40	; 0x28
 8001f10:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 8001f12:	687b      	ldr	r3, [r7, #4]
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d101      	bne.n	8001f1c <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 8001f18:	2301      	movs	r3, #1
 8001f1a:	e116      	b.n	800214a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 8001f1c:	687b      	ldr	r3, [r7, #4]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 8001f22:	687b      	ldr	r3, [r7, #4]
 8001f24:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 8001f28:	b2db      	uxtb	r3, r3
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d106      	bne.n	8001f3c <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	2200      	movs	r2, #0
 8001f32:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 8001f36:	6878      	ldr	r0, [r7, #4]
 8001f38:	f7fe ff40 	bl	8000dbc <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 8001f3c:	687b      	ldr	r3, [r7, #4]
 8001f3e:	2203      	movs	r2, #3
 8001f40:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001f44:	68bb      	ldr	r3, [r7, #8]
 8001f46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001f48:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001f4c:	2b00      	cmp	r3, #0
 8001f4e:	d102      	bne.n	8001f56 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2200      	movs	r2, #0
 8001f54:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	681b      	ldr	r3, [r3, #0]
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	f002 fae2 	bl	8004524 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	681b      	ldr	r3, [r3, #0]
 8001f64:	603b      	str	r3, [r7, #0]
 8001f66:	687e      	ldr	r6, [r7, #4]
 8001f68:	466d      	mov	r5, sp
 8001f6a:	f106 0410 	add.w	r4, r6, #16
 8001f6e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f70:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f72:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f74:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f76:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001f7a:	e885 0003 	stmia.w	r5, {r0, r1}
 8001f7e:	1d33      	adds	r3, r6, #4
 8001f80:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001f82:	6838      	ldr	r0, [r7, #0]
 8001f84:	f002 fa76 	bl	8004474 <USB_CoreInit>
 8001f88:	4603      	mov	r3, r0
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d005      	beq.n	8001f9a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8001f8e:	687b      	ldr	r3, [r7, #4]
 8001f90:	2202      	movs	r2, #2
 8001f92:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8001f96:	2301      	movs	r3, #1
 8001f98:	e0d7      	b.n	800214a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	2100      	movs	r1, #0
 8001fa0:	4618      	mov	r0, r3
 8001fa2:	f002 fad0 	bl	8004546 <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8001fa6:	2300      	movs	r3, #0
 8001fa8:	73fb      	strb	r3, [r7, #15]
 8001faa:	e04a      	b.n	8002042 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8001fac:	7bfa      	ldrb	r2, [r7, #15]
 8001fae:	6879      	ldr	r1, [r7, #4]
 8001fb0:	4613      	mov	r3, r2
 8001fb2:	00db      	lsls	r3, r3, #3
 8001fb4:	1a9b      	subs	r3, r3, r2
 8001fb6:	009b      	lsls	r3, r3, #2
 8001fb8:	440b      	add	r3, r1
 8001fba:	333d      	adds	r3, #61	; 0x3d
 8001fbc:	2201      	movs	r2, #1
 8001fbe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8001fc0:	7bfa      	ldrb	r2, [r7, #15]
 8001fc2:	6879      	ldr	r1, [r7, #4]
 8001fc4:	4613      	mov	r3, r2
 8001fc6:	00db      	lsls	r3, r3, #3
 8001fc8:	1a9b      	subs	r3, r3, r2
 8001fca:	009b      	lsls	r3, r3, #2
 8001fcc:	440b      	add	r3, r1
 8001fce:	333c      	adds	r3, #60	; 0x3c
 8001fd0:	7bfa      	ldrb	r2, [r7, #15]
 8001fd2:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8001fd4:	7bfa      	ldrb	r2, [r7, #15]
 8001fd6:	7bfb      	ldrb	r3, [r7, #15]
 8001fd8:	b298      	uxth	r0, r3
 8001fda:	6879      	ldr	r1, [r7, #4]
 8001fdc:	4613      	mov	r3, r2
 8001fde:	00db      	lsls	r3, r3, #3
 8001fe0:	1a9b      	subs	r3, r3, r2
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	440b      	add	r3, r1
 8001fe6:	3342      	adds	r3, #66	; 0x42
 8001fe8:	4602      	mov	r2, r0
 8001fea:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8001fec:	7bfa      	ldrb	r2, [r7, #15]
 8001fee:	6879      	ldr	r1, [r7, #4]
 8001ff0:	4613      	mov	r3, r2
 8001ff2:	00db      	lsls	r3, r3, #3
 8001ff4:	1a9b      	subs	r3, r3, r2
 8001ff6:	009b      	lsls	r3, r3, #2
 8001ff8:	440b      	add	r3, r1
 8001ffa:	333f      	adds	r3, #63	; 0x3f
 8001ffc:	2200      	movs	r2, #0
 8001ffe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002000:	7bfa      	ldrb	r2, [r7, #15]
 8002002:	6879      	ldr	r1, [r7, #4]
 8002004:	4613      	mov	r3, r2
 8002006:	00db      	lsls	r3, r3, #3
 8002008:	1a9b      	subs	r3, r3, r2
 800200a:	009b      	lsls	r3, r3, #2
 800200c:	440b      	add	r3, r1
 800200e:	3344      	adds	r3, #68	; 0x44
 8002010:	2200      	movs	r2, #0
 8002012:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002014:	7bfa      	ldrb	r2, [r7, #15]
 8002016:	6879      	ldr	r1, [r7, #4]
 8002018:	4613      	mov	r3, r2
 800201a:	00db      	lsls	r3, r3, #3
 800201c:	1a9b      	subs	r3, r3, r2
 800201e:	009b      	lsls	r3, r3, #2
 8002020:	440b      	add	r3, r1
 8002022:	3348      	adds	r3, #72	; 0x48
 8002024:	2200      	movs	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002028:	7bfa      	ldrb	r2, [r7, #15]
 800202a:	6879      	ldr	r1, [r7, #4]
 800202c:	4613      	mov	r3, r2
 800202e:	00db      	lsls	r3, r3, #3
 8002030:	1a9b      	subs	r3, r3, r2
 8002032:	009b      	lsls	r3, r3, #2
 8002034:	440b      	add	r3, r1
 8002036:	3350      	adds	r3, #80	; 0x50
 8002038:	2200      	movs	r2, #0
 800203a:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800203c:	7bfb      	ldrb	r3, [r7, #15]
 800203e:	3301      	adds	r3, #1
 8002040:	73fb      	strb	r3, [r7, #15]
 8002042:	7bfa      	ldrb	r2, [r7, #15]
 8002044:	687b      	ldr	r3, [r7, #4]
 8002046:	685b      	ldr	r3, [r3, #4]
 8002048:	429a      	cmp	r2, r3
 800204a:	d3af      	bcc.n	8001fac <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800204c:	2300      	movs	r3, #0
 800204e:	73fb      	strb	r3, [r7, #15]
 8002050:	e044      	b.n	80020dc <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002052:	7bfa      	ldrb	r2, [r7, #15]
 8002054:	6879      	ldr	r1, [r7, #4]
 8002056:	4613      	mov	r3, r2
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	1a9b      	subs	r3, r3, r2
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	440b      	add	r3, r1
 8002060:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002068:	7bfa      	ldrb	r2, [r7, #15]
 800206a:	6879      	ldr	r1, [r7, #4]
 800206c:	4613      	mov	r3, r2
 800206e:	00db      	lsls	r3, r3, #3
 8002070:	1a9b      	subs	r3, r3, r2
 8002072:	009b      	lsls	r3, r3, #2
 8002074:	440b      	add	r3, r1
 8002076:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 800207a:	7bfa      	ldrb	r2, [r7, #15]
 800207c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800207e:	7bfa      	ldrb	r2, [r7, #15]
 8002080:	6879      	ldr	r1, [r7, #4]
 8002082:	4613      	mov	r3, r2
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	1a9b      	subs	r3, r3, r2
 8002088:	009b      	lsls	r3, r3, #2
 800208a:	440b      	add	r3, r1
 800208c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002094:	7bfa      	ldrb	r2, [r7, #15]
 8002096:	6879      	ldr	r1, [r7, #4]
 8002098:	4613      	mov	r3, r2
 800209a:	00db      	lsls	r3, r3, #3
 800209c:	1a9b      	subs	r3, r3, r2
 800209e:	009b      	lsls	r3, r3, #2
 80020a0:	440b      	add	r3, r1
 80020a2:	f503 7301 	add.w	r3, r3, #516	; 0x204
 80020a6:	2200      	movs	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 80020aa:	7bfa      	ldrb	r2, [r7, #15]
 80020ac:	6879      	ldr	r1, [r7, #4]
 80020ae:	4613      	mov	r3, r2
 80020b0:	00db      	lsls	r3, r3, #3
 80020b2:	1a9b      	subs	r3, r3, r2
 80020b4:	009b      	lsls	r3, r3, #2
 80020b6:	440b      	add	r3, r1
 80020b8:	f503 7302 	add.w	r3, r3, #520	; 0x208
 80020bc:	2200      	movs	r2, #0
 80020be:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 80020c0:	7bfa      	ldrb	r2, [r7, #15]
 80020c2:	6879      	ldr	r1, [r7, #4]
 80020c4:	4613      	mov	r3, r2
 80020c6:	00db      	lsls	r3, r3, #3
 80020c8:	1a9b      	subs	r3, r3, r2
 80020ca:	009b      	lsls	r3, r3, #2
 80020cc:	440b      	add	r3, r1
 80020ce:	f503 7304 	add.w	r3, r3, #528	; 0x210
 80020d2:	2200      	movs	r2, #0
 80020d4:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 80020d6:	7bfb      	ldrb	r3, [r7, #15]
 80020d8:	3301      	adds	r3, #1
 80020da:	73fb      	strb	r3, [r7, #15]
 80020dc:	7bfa      	ldrb	r2, [r7, #15]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	685b      	ldr	r3, [r3, #4]
 80020e2:	429a      	cmp	r2, r3
 80020e4:	d3b5      	bcc.n	8002052 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	603b      	str	r3, [r7, #0]
 80020ec:	687e      	ldr	r6, [r7, #4]
 80020ee:	466d      	mov	r5, sp
 80020f0:	f106 0410 	add.w	r4, r6, #16
 80020f4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020f6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020f8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020fa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020fc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002100:	e885 0003 	stmia.w	r5, {r0, r1}
 8002104:	1d33      	adds	r3, r6, #4
 8002106:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002108:	6838      	ldr	r0, [r7, #0]
 800210a:	f002 fa47 	bl	800459c <USB_DevInit>
 800210e:	4603      	mov	r3, r0
 8002110:	2b00      	cmp	r3, #0
 8002112:	d005      	beq.n	8002120 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	2202      	movs	r2, #2
 8002118:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 800211c:	2301      	movs	r3, #1
 800211e:	e014      	b.n	800214a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002120:	687b      	ldr	r3, [r7, #4]
 8002122:	2200      	movs	r2, #0
 8002124:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	2201      	movs	r2, #1
 800212c:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002130:	687b      	ldr	r3, [r7, #4]
 8002132:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002134:	2b01      	cmp	r3, #1
 8002136:	d102      	bne.n	800213e <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002138:	6878      	ldr	r0, [r7, #4]
 800213a:	f000 f80b 	bl	8002154 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 800213e:	687b      	ldr	r3, [r7, #4]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4618      	mov	r0, r3
 8002144:	f002 fbf9 	bl	800493a <USB_DevDisconnect>

  return HAL_OK;
 8002148:	2300      	movs	r3, #0
}
 800214a:	4618      	mov	r0, r3
 800214c:	3714      	adds	r7, #20
 800214e:	46bd      	mov	sp, r7
 8002150:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002154 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002154:	b480      	push	{r7}
 8002156:	b085      	sub	sp, #20
 8002158:	af00      	add	r7, sp, #0
 800215a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002162:	687b      	ldr	r3, [r7, #4]
 8002164:	2201      	movs	r2, #1
 8002166:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	2200      	movs	r2, #0
 800216e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002172:	68fb      	ldr	r3, [r7, #12]
 8002174:	699b      	ldr	r3, [r3, #24]
 8002176:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 800217a:	68fb      	ldr	r3, [r7, #12]
 800217c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 800217e:	68fb      	ldr	r3, [r7, #12]
 8002180:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002182:	4b05      	ldr	r3, [pc, #20]	; (8002198 <HAL_PCDEx_ActivateLPM+0x44>)
 8002184:	4313      	orrs	r3, r2
 8002186:	68fa      	ldr	r2, [r7, #12]
 8002188:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 800218a:	2300      	movs	r3, #0
}
 800218c:	4618      	mov	r0, r3
 800218e:	3714      	adds	r7, #20
 8002190:	46bd      	mov	sp, r7
 8002192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002196:	4770      	bx	lr
 8002198:	10000003 	.word	0x10000003

0800219c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800219c:	b480      	push	{r7}
 800219e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80021a0:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	4a04      	ldr	r2, [pc, #16]	; (80021b8 <HAL_PWR_EnableBkUpAccess+0x1c>)
 80021a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80021aa:	6013      	str	r3, [r2, #0]
}
 80021ac:	bf00      	nop
 80021ae:	46bd      	mov	sp, r7
 80021b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021b4:	4770      	bx	lr
 80021b6:	bf00      	nop
 80021b8:	40007000 	.word	0x40007000

080021bc <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80021bc:	b580      	push	{r7, lr}
 80021be:	b086      	sub	sp, #24
 80021c0:	af00      	add	r7, sp, #0
 80021c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 80021c4:	2300      	movs	r3, #0
 80021c6:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80021c8:	687b      	ldr	r3, [r7, #4]
 80021ca:	2b00      	cmp	r3, #0
 80021cc:	d101      	bne.n	80021d2 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 80021ce:	2301      	movs	r3, #1
 80021d0:	e291      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f003 0301 	and.w	r3, r3, #1
 80021da:	2b00      	cmp	r3, #0
 80021dc:	f000 8087 	beq.w	80022ee <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80021e0:	4b96      	ldr	r3, [pc, #600]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	f003 030c 	and.w	r3, r3, #12
 80021e8:	2b04      	cmp	r3, #4
 80021ea:	d00c      	beq.n	8002206 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80021ec:	4b93      	ldr	r3, [pc, #588]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80021ee:	689b      	ldr	r3, [r3, #8]
 80021f0:	f003 030c 	and.w	r3, r3, #12
 80021f4:	2b08      	cmp	r3, #8
 80021f6:	d112      	bne.n	800221e <HAL_RCC_OscConfig+0x62>
 80021f8:	4b90      	ldr	r3, [pc, #576]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80021fa:	685b      	ldr	r3, [r3, #4]
 80021fc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002200:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002204:	d10b      	bne.n	800221e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002206:	4b8d      	ldr	r3, [pc, #564]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800220e:	2b00      	cmp	r3, #0
 8002210:	d06c      	beq.n	80022ec <HAL_RCC_OscConfig+0x130>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	685b      	ldr	r3, [r3, #4]
 8002216:	2b00      	cmp	r3, #0
 8002218:	d168      	bne.n	80022ec <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800221a:	2301      	movs	r3, #1
 800221c:	e26b      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	685b      	ldr	r3, [r3, #4]
 8002222:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002226:	d106      	bne.n	8002236 <HAL_RCC_OscConfig+0x7a>
 8002228:	4b84      	ldr	r3, [pc, #528]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800222a:	681b      	ldr	r3, [r3, #0]
 800222c:	4a83      	ldr	r2, [pc, #524]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800222e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002232:	6013      	str	r3, [r2, #0]
 8002234:	e02e      	b.n	8002294 <HAL_RCC_OscConfig+0xd8>
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	685b      	ldr	r3, [r3, #4]
 800223a:	2b00      	cmp	r3, #0
 800223c:	d10c      	bne.n	8002258 <HAL_RCC_OscConfig+0x9c>
 800223e:	4b7f      	ldr	r3, [pc, #508]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002240:	681b      	ldr	r3, [r3, #0]
 8002242:	4a7e      	ldr	r2, [pc, #504]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002244:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002248:	6013      	str	r3, [r2, #0]
 800224a:	4b7c      	ldr	r3, [pc, #496]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800224c:	681b      	ldr	r3, [r3, #0]
 800224e:	4a7b      	ldr	r2, [pc, #492]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002250:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002254:	6013      	str	r3, [r2, #0]
 8002256:	e01d      	b.n	8002294 <HAL_RCC_OscConfig+0xd8>
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	685b      	ldr	r3, [r3, #4]
 800225c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002260:	d10c      	bne.n	800227c <HAL_RCC_OscConfig+0xc0>
 8002262:	4b76      	ldr	r3, [pc, #472]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	4a75      	ldr	r2, [pc, #468]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002268:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800226c:	6013      	str	r3, [r2, #0]
 800226e:	4b73      	ldr	r3, [pc, #460]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4a72      	ldr	r2, [pc, #456]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002274:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002278:	6013      	str	r3, [r2, #0]
 800227a:	e00b      	b.n	8002294 <HAL_RCC_OscConfig+0xd8>
 800227c:	4b6f      	ldr	r3, [pc, #444]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	4a6e      	ldr	r2, [pc, #440]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002282:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002286:	6013      	str	r3, [r2, #0]
 8002288:	4b6c      	ldr	r3, [pc, #432]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800228a:	681b      	ldr	r3, [r3, #0]
 800228c:	4a6b      	ldr	r2, [pc, #428]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800228e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002292:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	685b      	ldr	r3, [r3, #4]
 8002298:	2b00      	cmp	r3, #0
 800229a:	d013      	beq.n	80022c4 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800229c:	f7fe feaa 	bl	8000ff4 <HAL_GetTick>
 80022a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022a2:	e008      	b.n	80022b6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022a4:	f7fe fea6 	bl	8000ff4 <HAL_GetTick>
 80022a8:	4602      	mov	r2, r0
 80022aa:	693b      	ldr	r3, [r7, #16]
 80022ac:	1ad3      	subs	r3, r2, r3
 80022ae:	2b64      	cmp	r3, #100	; 0x64
 80022b0:	d901      	bls.n	80022b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80022b2:	2303      	movs	r3, #3
 80022b4:	e21f      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022b6:	4b61      	ldr	r3, [pc, #388]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80022b8:	681b      	ldr	r3, [r3, #0]
 80022ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022be:	2b00      	cmp	r3, #0
 80022c0:	d0f0      	beq.n	80022a4 <HAL_RCC_OscConfig+0xe8>
 80022c2:	e014      	b.n	80022ee <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80022c4:	f7fe fe96 	bl	8000ff4 <HAL_GetTick>
 80022c8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022ca:	e008      	b.n	80022de <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80022cc:	f7fe fe92 	bl	8000ff4 <HAL_GetTick>
 80022d0:	4602      	mov	r2, r0
 80022d2:	693b      	ldr	r3, [r7, #16]
 80022d4:	1ad3      	subs	r3, r2, r3
 80022d6:	2b64      	cmp	r3, #100	; 0x64
 80022d8:	d901      	bls.n	80022de <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80022da:	2303      	movs	r3, #3
 80022dc:	e20b      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80022de:	4b57      	ldr	r3, [pc, #348]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022e6:	2b00      	cmp	r3, #0
 80022e8:	d1f0      	bne.n	80022cc <HAL_RCC_OscConfig+0x110>
 80022ea:	e000      	b.n	80022ee <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80022ec:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 0302 	and.w	r3, r3, #2
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d069      	beq.n	80023ce <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 80022fa:	4b50      	ldr	r3, [pc, #320]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80022fc:	689b      	ldr	r3, [r3, #8]
 80022fe:	f003 030c 	and.w	r3, r3, #12
 8002302:	2b00      	cmp	r3, #0
 8002304:	d00b      	beq.n	800231e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002306:	4b4d      	ldr	r3, [pc, #308]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002308:	689b      	ldr	r3, [r3, #8]
 800230a:	f003 030c 	and.w	r3, r3, #12
 800230e:	2b08      	cmp	r3, #8
 8002310:	d11c      	bne.n	800234c <HAL_RCC_OscConfig+0x190>
 8002312:	4b4a      	ldr	r3, [pc, #296]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002314:	685b      	ldr	r3, [r3, #4]
 8002316:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800231a:	2b00      	cmp	r3, #0
 800231c:	d116      	bne.n	800234c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800231e:	4b47      	ldr	r3, [pc, #284]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002320:	681b      	ldr	r3, [r3, #0]
 8002322:	f003 0302 	and.w	r3, r3, #2
 8002326:	2b00      	cmp	r3, #0
 8002328:	d005      	beq.n	8002336 <HAL_RCC_OscConfig+0x17a>
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	68db      	ldr	r3, [r3, #12]
 800232e:	2b01      	cmp	r3, #1
 8002330:	d001      	beq.n	8002336 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002332:	2301      	movs	r3, #1
 8002334:	e1df      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002336:	4b41      	ldr	r3, [pc, #260]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	691b      	ldr	r3, [r3, #16]
 8002342:	00db      	lsls	r3, r3, #3
 8002344:	493d      	ldr	r1, [pc, #244]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002346:	4313      	orrs	r3, r2
 8002348:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800234a:	e040      	b.n	80023ce <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	68db      	ldr	r3, [r3, #12]
 8002350:	2b00      	cmp	r3, #0
 8002352:	d023      	beq.n	800239c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	4a38      	ldr	r2, [pc, #224]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800235a:	f043 0301 	orr.w	r3, r3, #1
 800235e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002360:	f7fe fe48 	bl	8000ff4 <HAL_GetTick>
 8002364:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002366:	e008      	b.n	800237a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002368:	f7fe fe44 	bl	8000ff4 <HAL_GetTick>
 800236c:	4602      	mov	r2, r0
 800236e:	693b      	ldr	r3, [r7, #16]
 8002370:	1ad3      	subs	r3, r2, r3
 8002372:	2b02      	cmp	r3, #2
 8002374:	d901      	bls.n	800237a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002376:	2303      	movs	r3, #3
 8002378:	e1bd      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800237a:	4b30      	ldr	r3, [pc, #192]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800237c:	681b      	ldr	r3, [r3, #0]
 800237e:	f003 0302 	and.w	r3, r3, #2
 8002382:	2b00      	cmp	r3, #0
 8002384:	d0f0      	beq.n	8002368 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002386:	4b2d      	ldr	r3, [pc, #180]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800238e:	687b      	ldr	r3, [r7, #4]
 8002390:	691b      	ldr	r3, [r3, #16]
 8002392:	00db      	lsls	r3, r3, #3
 8002394:	4929      	ldr	r1, [pc, #164]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002396:	4313      	orrs	r3, r2
 8002398:	600b      	str	r3, [r1, #0]
 800239a:	e018      	b.n	80023ce <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800239c:	4b27      	ldr	r3, [pc, #156]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800239e:	681b      	ldr	r3, [r3, #0]
 80023a0:	4a26      	ldr	r2, [pc, #152]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80023a2:	f023 0301 	bic.w	r3, r3, #1
 80023a6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80023a8:	f7fe fe24 	bl	8000ff4 <HAL_GetTick>
 80023ac:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023ae:	e008      	b.n	80023c2 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80023b0:	f7fe fe20 	bl	8000ff4 <HAL_GetTick>
 80023b4:	4602      	mov	r2, r0
 80023b6:	693b      	ldr	r3, [r7, #16]
 80023b8:	1ad3      	subs	r3, r2, r3
 80023ba:	2b02      	cmp	r3, #2
 80023bc:	d901      	bls.n	80023c2 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 80023be:	2303      	movs	r3, #3
 80023c0:	e199      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80023c2:	4b1e      	ldr	r3, [pc, #120]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	f003 0302 	and.w	r3, r3, #2
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	d1f0      	bne.n	80023b0 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f003 0308 	and.w	r3, r3, #8
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d038      	beq.n	800244c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	695b      	ldr	r3, [r3, #20]
 80023de:	2b00      	cmp	r3, #0
 80023e0:	d019      	beq.n	8002416 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80023e2:	4b16      	ldr	r3, [pc, #88]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80023e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80023e6:	4a15      	ldr	r2, [pc, #84]	; (800243c <HAL_RCC_OscConfig+0x280>)
 80023e8:	f043 0301 	orr.w	r3, r3, #1
 80023ec:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80023ee:	f7fe fe01 	bl	8000ff4 <HAL_GetTick>
 80023f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80023f4:	e008      	b.n	8002408 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80023f6:	f7fe fdfd 	bl	8000ff4 <HAL_GetTick>
 80023fa:	4602      	mov	r2, r0
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	1ad3      	subs	r3, r2, r3
 8002400:	2b02      	cmp	r3, #2
 8002402:	d901      	bls.n	8002408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002404:	2303      	movs	r3, #3
 8002406:	e176      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002408:	4b0c      	ldr	r3, [pc, #48]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800240a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800240c:	f003 0302 	and.w	r3, r3, #2
 8002410:	2b00      	cmp	r3, #0
 8002412:	d0f0      	beq.n	80023f6 <HAL_RCC_OscConfig+0x23a>
 8002414:	e01a      	b.n	800244c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002416:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_RCC_OscConfig+0x280>)
 8002418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800241a:	4a08      	ldr	r2, [pc, #32]	; (800243c <HAL_RCC_OscConfig+0x280>)
 800241c:	f023 0301 	bic.w	r3, r3, #1
 8002420:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002422:	f7fe fde7 	bl	8000ff4 <HAL_GetTick>
 8002426:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002428:	e00a      	b.n	8002440 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800242a:	f7fe fde3 	bl	8000ff4 <HAL_GetTick>
 800242e:	4602      	mov	r2, r0
 8002430:	693b      	ldr	r3, [r7, #16]
 8002432:	1ad3      	subs	r3, r2, r3
 8002434:	2b02      	cmp	r3, #2
 8002436:	d903      	bls.n	8002440 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002438:	2303      	movs	r3, #3
 800243a:	e15c      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
 800243c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002440:	4b91      	ldr	r3, [pc, #580]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002442:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002444:	f003 0302 	and.w	r3, r3, #2
 8002448:	2b00      	cmp	r3, #0
 800244a:	d1ee      	bne.n	800242a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800244c:	687b      	ldr	r3, [r7, #4]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	f003 0304 	and.w	r3, r3, #4
 8002454:	2b00      	cmp	r3, #0
 8002456:	f000 80a4 	beq.w	80025a2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800245a:	4b8b      	ldr	r3, [pc, #556]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800245c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800245e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d10d      	bne.n	8002482 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002466:	4b88      	ldr	r3, [pc, #544]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800246a:	4a87      	ldr	r2, [pc, #540]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800246c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002470:	6413      	str	r3, [r2, #64]	; 0x40
 8002472:	4b85      	ldr	r3, [pc, #532]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002476:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800247a:	60bb      	str	r3, [r7, #8]
 800247c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800247e:	2301      	movs	r3, #1
 8002480:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002482:	4b82      	ldr	r3, [pc, #520]	; (800268c <HAL_RCC_OscConfig+0x4d0>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800248a:	2b00      	cmp	r3, #0
 800248c:	d118      	bne.n	80024c0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 800248e:	4b7f      	ldr	r3, [pc, #508]	; (800268c <HAL_RCC_OscConfig+0x4d0>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4a7e      	ldr	r2, [pc, #504]	; (800268c <HAL_RCC_OscConfig+0x4d0>)
 8002494:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002498:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800249a:	f7fe fdab 	bl	8000ff4 <HAL_GetTick>
 800249e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024a0:	e008      	b.n	80024b4 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80024a2:	f7fe fda7 	bl	8000ff4 <HAL_GetTick>
 80024a6:	4602      	mov	r2, r0
 80024a8:	693b      	ldr	r3, [r7, #16]
 80024aa:	1ad3      	subs	r3, r2, r3
 80024ac:	2b64      	cmp	r3, #100	; 0x64
 80024ae:	d901      	bls.n	80024b4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80024b0:	2303      	movs	r3, #3
 80024b2:	e120      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80024b4:	4b75      	ldr	r3, [pc, #468]	; (800268c <HAL_RCC_OscConfig+0x4d0>)
 80024b6:	681b      	ldr	r3, [r3, #0]
 80024b8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80024bc:	2b00      	cmp	r3, #0
 80024be:	d0f0      	beq.n	80024a2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80024c0:	687b      	ldr	r3, [r7, #4]
 80024c2:	689b      	ldr	r3, [r3, #8]
 80024c4:	2b01      	cmp	r3, #1
 80024c6:	d106      	bne.n	80024d6 <HAL_RCC_OscConfig+0x31a>
 80024c8:	4b6f      	ldr	r3, [pc, #444]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80024ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024cc:	4a6e      	ldr	r2, [pc, #440]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80024ce:	f043 0301 	orr.w	r3, r3, #1
 80024d2:	6713      	str	r3, [r2, #112]	; 0x70
 80024d4:	e02d      	b.n	8002532 <HAL_RCC_OscConfig+0x376>
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	689b      	ldr	r3, [r3, #8]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d10c      	bne.n	80024f8 <HAL_RCC_OscConfig+0x33c>
 80024de:	4b6a      	ldr	r3, [pc, #424]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80024e0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024e2:	4a69      	ldr	r2, [pc, #420]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80024e4:	f023 0301 	bic.w	r3, r3, #1
 80024e8:	6713      	str	r3, [r2, #112]	; 0x70
 80024ea:	4b67      	ldr	r3, [pc, #412]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80024ec:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80024ee:	4a66      	ldr	r2, [pc, #408]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80024f0:	f023 0304 	bic.w	r3, r3, #4
 80024f4:	6713      	str	r3, [r2, #112]	; 0x70
 80024f6:	e01c      	b.n	8002532 <HAL_RCC_OscConfig+0x376>
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	689b      	ldr	r3, [r3, #8]
 80024fc:	2b05      	cmp	r3, #5
 80024fe:	d10c      	bne.n	800251a <HAL_RCC_OscConfig+0x35e>
 8002500:	4b61      	ldr	r3, [pc, #388]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002502:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002504:	4a60      	ldr	r2, [pc, #384]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002506:	f043 0304 	orr.w	r3, r3, #4
 800250a:	6713      	str	r3, [r2, #112]	; 0x70
 800250c:	4b5e      	ldr	r3, [pc, #376]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800250e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002510:	4a5d      	ldr	r2, [pc, #372]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002512:	f043 0301 	orr.w	r3, r3, #1
 8002516:	6713      	str	r3, [r2, #112]	; 0x70
 8002518:	e00b      	b.n	8002532 <HAL_RCC_OscConfig+0x376>
 800251a:	4b5b      	ldr	r3, [pc, #364]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800251c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800251e:	4a5a      	ldr	r2, [pc, #360]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002520:	f023 0301 	bic.w	r3, r3, #1
 8002524:	6713      	str	r3, [r2, #112]	; 0x70
 8002526:	4b58      	ldr	r3, [pc, #352]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002528:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800252a:	4a57      	ldr	r2, [pc, #348]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800252c:	f023 0304 	bic.w	r3, r3, #4
 8002530:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	689b      	ldr	r3, [r3, #8]
 8002536:	2b00      	cmp	r3, #0
 8002538:	d015      	beq.n	8002566 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800253a:	f7fe fd5b 	bl	8000ff4 <HAL_GetTick>
 800253e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002540:	e00a      	b.n	8002558 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002542:	f7fe fd57 	bl	8000ff4 <HAL_GetTick>
 8002546:	4602      	mov	r2, r0
 8002548:	693b      	ldr	r3, [r7, #16]
 800254a:	1ad3      	subs	r3, r2, r3
 800254c:	f241 3288 	movw	r2, #5000	; 0x1388
 8002550:	4293      	cmp	r3, r2
 8002552:	d901      	bls.n	8002558 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8002554:	2303      	movs	r3, #3
 8002556:	e0ce      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002558:	4b4b      	ldr	r3, [pc, #300]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800255a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800255c:	f003 0302 	and.w	r3, r3, #2
 8002560:	2b00      	cmp	r3, #0
 8002562:	d0ee      	beq.n	8002542 <HAL_RCC_OscConfig+0x386>
 8002564:	e014      	b.n	8002590 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002566:	f7fe fd45 	bl	8000ff4 <HAL_GetTick>
 800256a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800256c:	e00a      	b.n	8002584 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800256e:	f7fe fd41 	bl	8000ff4 <HAL_GetTick>
 8002572:	4602      	mov	r2, r0
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	1ad3      	subs	r3, r2, r3
 8002578:	f241 3288 	movw	r2, #5000	; 0x1388
 800257c:	4293      	cmp	r3, r2
 800257e:	d901      	bls.n	8002584 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8002580:	2303      	movs	r3, #3
 8002582:	e0b8      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002584:	4b40      	ldr	r3, [pc, #256]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002586:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002588:	f003 0302 	and.w	r3, r3, #2
 800258c:	2b00      	cmp	r3, #0
 800258e:	d1ee      	bne.n	800256e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8002590:	7dfb      	ldrb	r3, [r7, #23]
 8002592:	2b01      	cmp	r3, #1
 8002594:	d105      	bne.n	80025a2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002596:	4b3c      	ldr	r3, [pc, #240]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800259a:	4a3b      	ldr	r2, [pc, #236]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800259c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80025a0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	f000 80a4 	beq.w	80026f4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80025ac:	4b36      	ldr	r3, [pc, #216]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025ae:	689b      	ldr	r3, [r3, #8]
 80025b0:	f003 030c 	and.w	r3, r3, #12
 80025b4:	2b08      	cmp	r3, #8
 80025b6:	d06b      	beq.n	8002690 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80025b8:	687b      	ldr	r3, [r7, #4]
 80025ba:	699b      	ldr	r3, [r3, #24]
 80025bc:	2b02      	cmp	r3, #2
 80025be:	d149      	bne.n	8002654 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80025c0:	4b31      	ldr	r3, [pc, #196]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025c2:	681b      	ldr	r3, [r3, #0]
 80025c4:	4a30      	ldr	r2, [pc, #192]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80025ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80025cc:	f7fe fd12 	bl	8000ff4 <HAL_GetTick>
 80025d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025d2:	e008      	b.n	80025e6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80025d4:	f7fe fd0e 	bl	8000ff4 <HAL_GetTick>
 80025d8:	4602      	mov	r2, r0
 80025da:	693b      	ldr	r3, [r7, #16]
 80025dc:	1ad3      	subs	r3, r2, r3
 80025de:	2b02      	cmp	r3, #2
 80025e0:	d901      	bls.n	80025e6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80025e2:	2303      	movs	r3, #3
 80025e4:	e087      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80025e6:	4b28      	ldr	r3, [pc, #160]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 80025e8:	681b      	ldr	r3, [r3, #0]
 80025ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	d1f0      	bne.n	80025d4 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	69da      	ldr	r2, [r3, #28]
 80025f6:	687b      	ldr	r3, [r7, #4]
 80025f8:	6a1b      	ldr	r3, [r3, #32]
 80025fa:	431a      	orrs	r2, r3
 80025fc:	687b      	ldr	r3, [r7, #4]
 80025fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002600:	019b      	lsls	r3, r3, #6
 8002602:	431a      	orrs	r2, r3
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002608:	085b      	lsrs	r3, r3, #1
 800260a:	3b01      	subs	r3, #1
 800260c:	041b      	lsls	r3, r3, #16
 800260e:	431a      	orrs	r2, r3
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002614:	061b      	lsls	r3, r3, #24
 8002616:	4313      	orrs	r3, r2
 8002618:	4a1b      	ldr	r2, [pc, #108]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800261a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800261e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002620:	4b19      	ldr	r3, [pc, #100]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	4a18      	ldr	r2, [pc, #96]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002626:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800262a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800262c:	f7fe fce2 	bl	8000ff4 <HAL_GetTick>
 8002630:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002632:	e008      	b.n	8002646 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002634:	f7fe fcde 	bl	8000ff4 <HAL_GetTick>
 8002638:	4602      	mov	r2, r0
 800263a:	693b      	ldr	r3, [r7, #16]
 800263c:	1ad3      	subs	r3, r2, r3
 800263e:	2b02      	cmp	r3, #2
 8002640:	d901      	bls.n	8002646 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8002642:	2303      	movs	r3, #3
 8002644:	e057      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002646:	4b10      	ldr	r3, [pc, #64]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800264e:	2b00      	cmp	r3, #0
 8002650:	d0f0      	beq.n	8002634 <HAL_RCC_OscConfig+0x478>
 8002652:	e04f      	b.n	80026f4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002654:	4b0c      	ldr	r3, [pc, #48]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	4a0b      	ldr	r2, [pc, #44]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800265a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800265e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002660:	f7fe fcc8 	bl	8000ff4 <HAL_GetTick>
 8002664:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002666:	e008      	b.n	800267a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002668:	f7fe fcc4 	bl	8000ff4 <HAL_GetTick>
 800266c:	4602      	mov	r2, r0
 800266e:	693b      	ldr	r3, [r7, #16]
 8002670:	1ad3      	subs	r3, r2, r3
 8002672:	2b02      	cmp	r3, #2
 8002674:	d901      	bls.n	800267a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8002676:	2303      	movs	r3, #3
 8002678:	e03d      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800267a:	4b03      	ldr	r3, [pc, #12]	; (8002688 <HAL_RCC_OscConfig+0x4cc>)
 800267c:	681b      	ldr	r3, [r3, #0]
 800267e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002682:	2b00      	cmp	r3, #0
 8002684:	d1f0      	bne.n	8002668 <HAL_RCC_OscConfig+0x4ac>
 8002686:	e035      	b.n	80026f4 <HAL_RCC_OscConfig+0x538>
 8002688:	40023800 	.word	0x40023800
 800268c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8002690:	4b1b      	ldr	r3, [pc, #108]	; (8002700 <HAL_RCC_OscConfig+0x544>)
 8002692:	685b      	ldr	r3, [r3, #4]
 8002694:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b01      	cmp	r3, #1
 800269c:	d028      	beq.n	80026f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800269e:	68fb      	ldr	r3, [r7, #12]
 80026a0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80026a8:	429a      	cmp	r2, r3
 80026aa:	d121      	bne.n	80026f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026ac:	68fb      	ldr	r3, [r7, #12]
 80026ae:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80026b2:	687b      	ldr	r3, [r7, #4]
 80026b4:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80026b6:	429a      	cmp	r2, r3
 80026b8:	d11a      	bne.n	80026f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026ba:	68fa      	ldr	r2, [r7, #12]
 80026bc:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80026c0:	4013      	ands	r3, r2
 80026c2:	687a      	ldr	r2, [r7, #4]
 80026c4:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80026c6:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d111      	bne.n	80026f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026cc:	68fb      	ldr	r3, [r7, #12]
 80026ce:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80026d6:	085b      	lsrs	r3, r3, #1
 80026d8:	3b01      	subs	r3, #1
 80026da:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 80026dc:	429a      	cmp	r2, r3
 80026de:	d107      	bne.n	80026f0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80026e0:	68fb      	ldr	r3, [r7, #12]
 80026e2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80026ea:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80026ec:	429a      	cmp	r2, r3
 80026ee:	d001      	beq.n	80026f4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80026f0:	2301      	movs	r3, #1
 80026f2:	e000      	b.n	80026f6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80026f4:	2300      	movs	r3, #0
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}
 80026fe:	bf00      	nop
 8002700:	40023800 	.word	0x40023800

08002704 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	b084      	sub	sp, #16
 8002708:	af00      	add	r7, sp, #0
 800270a:	6078      	str	r0, [r7, #4]
 800270c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800270e:	2300      	movs	r3, #0
 8002710:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	2b00      	cmp	r3, #0
 8002716:	d101      	bne.n	800271c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8002718:	2301      	movs	r3, #1
 800271a:	e0d0      	b.n	80028be <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800271c:	4b6a      	ldr	r3, [pc, #424]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800271e:	681b      	ldr	r3, [r3, #0]
 8002720:	f003 030f 	and.w	r3, r3, #15
 8002724:	683a      	ldr	r2, [r7, #0]
 8002726:	429a      	cmp	r2, r3
 8002728:	d910      	bls.n	800274c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800272a:	4b67      	ldr	r3, [pc, #412]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800272c:	681b      	ldr	r3, [r3, #0]
 800272e:	f023 020f 	bic.w	r2, r3, #15
 8002732:	4965      	ldr	r1, [pc, #404]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002734:	683b      	ldr	r3, [r7, #0]
 8002736:	4313      	orrs	r3, r2
 8002738:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800273a:	4b63      	ldr	r3, [pc, #396]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800273c:	681b      	ldr	r3, [r3, #0]
 800273e:	f003 030f 	and.w	r3, r3, #15
 8002742:	683a      	ldr	r2, [r7, #0]
 8002744:	429a      	cmp	r2, r3
 8002746:	d001      	beq.n	800274c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8002748:	2301      	movs	r3, #1
 800274a:	e0b8      	b.n	80028be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	f003 0302 	and.w	r3, r3, #2
 8002754:	2b00      	cmp	r3, #0
 8002756:	d020      	beq.n	800279a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	681b      	ldr	r3, [r3, #0]
 800275c:	f003 0304 	and.w	r3, r3, #4
 8002760:	2b00      	cmp	r3, #0
 8002762:	d005      	beq.n	8002770 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002764:	4b59      	ldr	r3, [pc, #356]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	4a58      	ldr	r2, [pc, #352]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 800276a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800276e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	681b      	ldr	r3, [r3, #0]
 8002774:	f003 0308 	and.w	r3, r3, #8
 8002778:	2b00      	cmp	r3, #0
 800277a:	d005      	beq.n	8002788 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800277c:	4b53      	ldr	r3, [pc, #332]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 800277e:	689b      	ldr	r3, [r3, #8]
 8002780:	4a52      	ldr	r2, [pc, #328]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 8002782:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8002786:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002788:	4b50      	ldr	r3, [pc, #320]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 800278a:	689b      	ldr	r3, [r3, #8]
 800278c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002790:	687b      	ldr	r3, [r7, #4]
 8002792:	689b      	ldr	r3, [r3, #8]
 8002794:	494d      	ldr	r1, [pc, #308]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 8002796:	4313      	orrs	r3, r2
 8002798:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	f003 0301 	and.w	r3, r3, #1
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	d040      	beq.n	8002828 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	2b01      	cmp	r3, #1
 80027ac:	d107      	bne.n	80027be <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80027ae:	4b47      	ldr	r3, [pc, #284]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80027b6:	2b00      	cmp	r3, #0
 80027b8:	d115      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027ba:	2301      	movs	r3, #1
 80027bc:	e07f      	b.n	80028be <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b02      	cmp	r3, #2
 80027c4:	d107      	bne.n	80027d6 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80027c6:	4b41      	ldr	r3, [pc, #260]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	d109      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027d2:	2301      	movs	r3, #1
 80027d4:	e073      	b.n	80028be <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80027d6:	4b3d      	ldr	r3, [pc, #244]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	f003 0302 	and.w	r3, r3, #2
 80027de:	2b00      	cmp	r3, #0
 80027e0:	d101      	bne.n	80027e6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80027e2:	2301      	movs	r3, #1
 80027e4:	e06b      	b.n	80028be <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80027e6:	4b39      	ldr	r3, [pc, #228]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80027e8:	689b      	ldr	r3, [r3, #8]
 80027ea:	f023 0203 	bic.w	r2, r3, #3
 80027ee:	687b      	ldr	r3, [r7, #4]
 80027f0:	685b      	ldr	r3, [r3, #4]
 80027f2:	4936      	ldr	r1, [pc, #216]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 80027f4:	4313      	orrs	r3, r2
 80027f6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80027f8:	f7fe fbfc 	bl	8000ff4 <HAL_GetTick>
 80027fc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80027fe:	e00a      	b.n	8002816 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002800:	f7fe fbf8 	bl	8000ff4 <HAL_GetTick>
 8002804:	4602      	mov	r2, r0
 8002806:	68fb      	ldr	r3, [r7, #12]
 8002808:	1ad3      	subs	r3, r2, r3
 800280a:	f241 3288 	movw	r2, #5000	; 0x1388
 800280e:	4293      	cmp	r3, r2
 8002810:	d901      	bls.n	8002816 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8002812:	2303      	movs	r3, #3
 8002814:	e053      	b.n	80028be <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002816:	4b2d      	ldr	r3, [pc, #180]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 8002818:	689b      	ldr	r3, [r3, #8]
 800281a:	f003 020c 	and.w	r2, r3, #12
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	009b      	lsls	r3, r3, #2
 8002824:	429a      	cmp	r2, r3
 8002826:	d1eb      	bne.n	8002800 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002828:	4b27      	ldr	r3, [pc, #156]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	f003 030f 	and.w	r3, r3, #15
 8002830:	683a      	ldr	r2, [r7, #0]
 8002832:	429a      	cmp	r2, r3
 8002834:	d210      	bcs.n	8002858 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002836:	4b24      	ldr	r3, [pc, #144]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f023 020f 	bic.w	r2, r3, #15
 800283e:	4922      	ldr	r1, [pc, #136]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002840:	683b      	ldr	r3, [r7, #0]
 8002842:	4313      	orrs	r3, r2
 8002844:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002846:	4b20      	ldr	r3, [pc, #128]	; (80028c8 <HAL_RCC_ClockConfig+0x1c4>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	f003 030f 	and.w	r3, r3, #15
 800284e:	683a      	ldr	r2, [r7, #0]
 8002850:	429a      	cmp	r2, r3
 8002852:	d001      	beq.n	8002858 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8002854:	2301      	movs	r3, #1
 8002856:	e032      	b.n	80028be <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	f003 0304 	and.w	r3, r3, #4
 8002860:	2b00      	cmp	r3, #0
 8002862:	d008      	beq.n	8002876 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002864:	4b19      	ldr	r3, [pc, #100]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 8002866:	689b      	ldr	r3, [r3, #8]
 8002868:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	68db      	ldr	r3, [r3, #12]
 8002870:	4916      	ldr	r1, [pc, #88]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 8002872:	4313      	orrs	r3, r2
 8002874:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0308 	and.w	r3, r3, #8
 800287e:	2b00      	cmp	r3, #0
 8002880:	d009      	beq.n	8002896 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002882:	4b12      	ldr	r3, [pc, #72]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 8002884:	689b      	ldr	r3, [r3, #8]
 8002886:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	691b      	ldr	r3, [r3, #16]
 800288e:	00db      	lsls	r3, r3, #3
 8002890:	490e      	ldr	r1, [pc, #56]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 8002892:	4313      	orrs	r3, r2
 8002894:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002896:	f000 f821 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800289a:	4602      	mov	r2, r0
 800289c:	4b0b      	ldr	r3, [pc, #44]	; (80028cc <HAL_RCC_ClockConfig+0x1c8>)
 800289e:	689b      	ldr	r3, [r3, #8]
 80028a0:	091b      	lsrs	r3, r3, #4
 80028a2:	f003 030f 	and.w	r3, r3, #15
 80028a6:	490a      	ldr	r1, [pc, #40]	; (80028d0 <HAL_RCC_ClockConfig+0x1cc>)
 80028a8:	5ccb      	ldrb	r3, [r1, r3]
 80028aa:	fa22 f303 	lsr.w	r3, r2, r3
 80028ae:	4a09      	ldr	r2, [pc, #36]	; (80028d4 <HAL_RCC_ClockConfig+0x1d0>)
 80028b0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80028b2:	4b09      	ldr	r3, [pc, #36]	; (80028d8 <HAL_RCC_ClockConfig+0x1d4>)
 80028b4:	681b      	ldr	r3, [r3, #0]
 80028b6:	4618      	mov	r0, r3
 80028b8:	f7fe fb58 	bl	8000f6c <HAL_InitTick>

  return HAL_OK;
 80028bc:	2300      	movs	r3, #0
}
 80028be:	4618      	mov	r0, r3
 80028c0:	3710      	adds	r7, #16
 80028c2:	46bd      	mov	sp, r7
 80028c4:	bd80      	pop	{r7, pc}
 80028c6:	bf00      	nop
 80028c8:	40023c00 	.word	0x40023c00
 80028cc:	40023800 	.word	0x40023800
 80028d0:	08004a54 	.word	0x08004a54
 80028d4:	20000014 	.word	0x20000014
 80028d8:	20000018 	.word	0x20000018

080028dc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80028dc:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80028e0:	b084      	sub	sp, #16
 80028e2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80028e4:	2300      	movs	r3, #0
 80028e6:	607b      	str	r3, [r7, #4]
 80028e8:	2300      	movs	r3, #0
 80028ea:	60fb      	str	r3, [r7, #12]
 80028ec:	2300      	movs	r3, #0
 80028ee:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80028f0:	2300      	movs	r3, #0
 80028f2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80028f4:	4b67      	ldr	r3, [pc, #412]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80028f6:	689b      	ldr	r3, [r3, #8]
 80028f8:	f003 030c 	and.w	r3, r3, #12
 80028fc:	2b08      	cmp	r3, #8
 80028fe:	d00d      	beq.n	800291c <HAL_RCC_GetSysClockFreq+0x40>
 8002900:	2b08      	cmp	r3, #8
 8002902:	f200 80bd 	bhi.w	8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>
 8002906:	2b00      	cmp	r3, #0
 8002908:	d002      	beq.n	8002910 <HAL_RCC_GetSysClockFreq+0x34>
 800290a:	2b04      	cmp	r3, #4
 800290c:	d003      	beq.n	8002916 <HAL_RCC_GetSysClockFreq+0x3a>
 800290e:	e0b7      	b.n	8002a80 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8002910:	4b61      	ldr	r3, [pc, #388]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002912:	60bb      	str	r3, [r7, #8]
      break;
 8002914:	e0b7      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8002916:	4b61      	ldr	r3, [pc, #388]	; (8002a9c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8002918:	60bb      	str	r3, [r7, #8]
      break;
 800291a:	e0b4      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800291c:	4b5d      	ldr	r3, [pc, #372]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800291e:	685b      	ldr	r3, [r3, #4]
 8002920:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8002924:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8002926:	4b5b      	ldr	r3, [pc, #364]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002928:	685b      	ldr	r3, [r3, #4]
 800292a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800292e:	2b00      	cmp	r3, #0
 8002930:	d04d      	beq.n	80029ce <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002932:	4b58      	ldr	r3, [pc, #352]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002934:	685b      	ldr	r3, [r3, #4]
 8002936:	099b      	lsrs	r3, r3, #6
 8002938:	461a      	mov	r2, r3
 800293a:	f04f 0300 	mov.w	r3, #0
 800293e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8002942:	f04f 0100 	mov.w	r1, #0
 8002946:	ea02 0800 	and.w	r8, r2, r0
 800294a:	ea03 0901 	and.w	r9, r3, r1
 800294e:	4640      	mov	r0, r8
 8002950:	4649      	mov	r1, r9
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	f04f 0300 	mov.w	r3, #0
 800295a:	014b      	lsls	r3, r1, #5
 800295c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8002960:	0142      	lsls	r2, r0, #5
 8002962:	4610      	mov	r0, r2
 8002964:	4619      	mov	r1, r3
 8002966:	ebb0 0008 	subs.w	r0, r0, r8
 800296a:	eb61 0109 	sbc.w	r1, r1, r9
 800296e:	f04f 0200 	mov.w	r2, #0
 8002972:	f04f 0300 	mov.w	r3, #0
 8002976:	018b      	lsls	r3, r1, #6
 8002978:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800297c:	0182      	lsls	r2, r0, #6
 800297e:	1a12      	subs	r2, r2, r0
 8002980:	eb63 0301 	sbc.w	r3, r3, r1
 8002984:	f04f 0000 	mov.w	r0, #0
 8002988:	f04f 0100 	mov.w	r1, #0
 800298c:	00d9      	lsls	r1, r3, #3
 800298e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002992:	00d0      	lsls	r0, r2, #3
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	eb12 0208 	adds.w	r2, r2, r8
 800299c:	eb43 0309 	adc.w	r3, r3, r9
 80029a0:	f04f 0000 	mov.w	r0, #0
 80029a4:	f04f 0100 	mov.w	r1, #0
 80029a8:	0259      	lsls	r1, r3, #9
 80029aa:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80029ae:	0250      	lsls	r0, r2, #9
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4610      	mov	r0, r2
 80029b6:	4619      	mov	r1, r3
 80029b8:	687b      	ldr	r3, [r7, #4]
 80029ba:	461a      	mov	r2, r3
 80029bc:	f04f 0300 	mov.w	r3, #0
 80029c0:	f7fd fc22 	bl	8000208 <__aeabi_uldivmod>
 80029c4:	4602      	mov	r2, r0
 80029c6:	460b      	mov	r3, r1
 80029c8:	4613      	mov	r3, r2
 80029ca:	60fb      	str	r3, [r7, #12]
 80029cc:	e04a      	b.n	8002a64 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029ce:	4b31      	ldr	r3, [pc, #196]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80029d0:	685b      	ldr	r3, [r3, #4]
 80029d2:	099b      	lsrs	r3, r3, #6
 80029d4:	461a      	mov	r2, r3
 80029d6:	f04f 0300 	mov.w	r3, #0
 80029da:	f240 10ff 	movw	r0, #511	; 0x1ff
 80029de:	f04f 0100 	mov.w	r1, #0
 80029e2:	ea02 0400 	and.w	r4, r2, r0
 80029e6:	ea03 0501 	and.w	r5, r3, r1
 80029ea:	4620      	mov	r0, r4
 80029ec:	4629      	mov	r1, r5
 80029ee:	f04f 0200 	mov.w	r2, #0
 80029f2:	f04f 0300 	mov.w	r3, #0
 80029f6:	014b      	lsls	r3, r1, #5
 80029f8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80029fc:	0142      	lsls	r2, r0, #5
 80029fe:	4610      	mov	r0, r2
 8002a00:	4619      	mov	r1, r3
 8002a02:	1b00      	subs	r0, r0, r4
 8002a04:	eb61 0105 	sbc.w	r1, r1, r5
 8002a08:	f04f 0200 	mov.w	r2, #0
 8002a0c:	f04f 0300 	mov.w	r3, #0
 8002a10:	018b      	lsls	r3, r1, #6
 8002a12:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8002a16:	0182      	lsls	r2, r0, #6
 8002a18:	1a12      	subs	r2, r2, r0
 8002a1a:	eb63 0301 	sbc.w	r3, r3, r1
 8002a1e:	f04f 0000 	mov.w	r0, #0
 8002a22:	f04f 0100 	mov.w	r1, #0
 8002a26:	00d9      	lsls	r1, r3, #3
 8002a28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8002a2c:	00d0      	lsls	r0, r2, #3
 8002a2e:	4602      	mov	r2, r0
 8002a30:	460b      	mov	r3, r1
 8002a32:	1912      	adds	r2, r2, r4
 8002a34:	eb45 0303 	adc.w	r3, r5, r3
 8002a38:	f04f 0000 	mov.w	r0, #0
 8002a3c:	f04f 0100 	mov.w	r1, #0
 8002a40:	0299      	lsls	r1, r3, #10
 8002a42:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8002a46:	0290      	lsls	r0, r2, #10
 8002a48:	4602      	mov	r2, r0
 8002a4a:	460b      	mov	r3, r1
 8002a4c:	4610      	mov	r0, r2
 8002a4e:	4619      	mov	r1, r3
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	461a      	mov	r2, r3
 8002a54:	f04f 0300 	mov.w	r3, #0
 8002a58:	f7fd fbd6 	bl	8000208 <__aeabi_uldivmod>
 8002a5c:	4602      	mov	r2, r0
 8002a5e:	460b      	mov	r3, r1
 8002a60:	4613      	mov	r3, r2
 8002a62:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8002a64:	4b0b      	ldr	r3, [pc, #44]	; (8002a94 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8002a66:	685b      	ldr	r3, [r3, #4]
 8002a68:	0c1b      	lsrs	r3, r3, #16
 8002a6a:	f003 0303 	and.w	r3, r3, #3
 8002a6e:	3301      	adds	r3, #1
 8002a70:	005b      	lsls	r3, r3, #1
 8002a72:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8002a74:	68fa      	ldr	r2, [r7, #12]
 8002a76:	683b      	ldr	r3, [r7, #0]
 8002a78:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a7c:	60bb      	str	r3, [r7, #8]
      break;
 8002a7e:	e002      	b.n	8002a86 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002a80:	4b05      	ldr	r3, [pc, #20]	; (8002a98 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8002a82:	60bb      	str	r3, [r7, #8]
      break;
 8002a84:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002a86:	68bb      	ldr	r3, [r7, #8]
}
 8002a88:	4618      	mov	r0, r3
 8002a8a:	3710      	adds	r7, #16
 8002a8c:	46bd      	mov	sp, r7
 8002a8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a92:	bf00      	nop
 8002a94:	40023800 	.word	0x40023800
 8002a98:	00f42400 	.word	0x00f42400
 8002a9c:	007a1200 	.word	0x007a1200

08002aa0 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002aa0:	b480      	push	{r7}
 8002aa2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002aa4:	4b03      	ldr	r3, [pc, #12]	; (8002ab4 <HAL_RCC_GetHCLKFreq+0x14>)
 8002aa6:	681b      	ldr	r3, [r3, #0]
}
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ab0:	4770      	bx	lr
 8002ab2:	bf00      	nop
 8002ab4:	20000014 	.word	0x20000014

08002ab8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002abc:	f7ff fff0 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	4b05      	ldr	r3, [pc, #20]	; (8002ad8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002ac4:	689b      	ldr	r3, [r3, #8]
 8002ac6:	0a9b      	lsrs	r3, r3, #10
 8002ac8:	f003 0307 	and.w	r3, r3, #7
 8002acc:	4903      	ldr	r1, [pc, #12]	; (8002adc <HAL_RCC_GetPCLK1Freq+0x24>)
 8002ace:	5ccb      	ldrb	r3, [r1, r3]
 8002ad0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40023800 	.word	0x40023800
 8002adc:	08004a64 	.word	0x08004a64

08002ae0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002ae0:	b580      	push	{r7, lr}
 8002ae2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002ae4:	f7ff ffdc 	bl	8002aa0 <HAL_RCC_GetHCLKFreq>
 8002ae8:	4602      	mov	r2, r0
 8002aea:	4b05      	ldr	r3, [pc, #20]	; (8002b00 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002aec:	689b      	ldr	r3, [r3, #8]
 8002aee:	0b5b      	lsrs	r3, r3, #13
 8002af0:	f003 0307 	and.w	r3, r3, #7
 8002af4:	4903      	ldr	r1, [pc, #12]	; (8002b04 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002af6:	5ccb      	ldrb	r3, [r1, r3]
 8002af8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002afc:	4618      	mov	r0, r3
 8002afe:	bd80      	pop	{r7, pc}
 8002b00:	40023800 	.word	0x40023800
 8002b04:	08004a64 	.word	0x08004a64

08002b08 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002b08:	b580      	push	{r7, lr}
 8002b0a:	b088      	sub	sp, #32
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8002b10:	2300      	movs	r3, #0
 8002b12:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8002b14:	2300      	movs	r3, #0
 8002b16:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8002b1c:	2300      	movs	r3, #0
 8002b1e:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8002b20:	2300      	movs	r3, #0
 8002b22:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f003 0301 	and.w	r3, r3, #1
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d012      	beq.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8002b30:	4b69      	ldr	r3, [pc, #420]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b32:	689b      	ldr	r3, [r3, #8]
 8002b34:	4a68      	ldr	r2, [pc, #416]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b36:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8002b3a:	6093      	str	r3, [r2, #8]
 8002b3c:	4b66      	ldr	r3, [pc, #408]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b3e:	689a      	ldr	r2, [r3, #8]
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b44:	4964      	ldr	r1, [pc, #400]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b46:	4313      	orrs	r3, r2
 8002b48:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002b4e:	2b00      	cmp	r3, #0
 8002b50:	d101      	bne.n	8002b56 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8002b52:	2301      	movs	r3, #1
 8002b54:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	681b      	ldr	r3, [r3, #0]
 8002b5a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002b5e:	2b00      	cmp	r3, #0
 8002b60:	d017      	beq.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8002b62:	4b5d      	ldr	r3, [pc, #372]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b64:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002b68:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b70:	4959      	ldr	r1, [pc, #356]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002b72:	4313      	orrs	r3, r2
 8002b74:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b7c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002b80:	d101      	bne.n	8002b86 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8002b82:	2301      	movs	r3, #1
 8002b84:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8002b86:	687b      	ldr	r3, [r7, #4]
 8002b88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002b8a:	2b00      	cmp	r3, #0
 8002b8c:	d101      	bne.n	8002b92 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8002b8e:	2301      	movs	r3, #1
 8002b90:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8002b92:	687b      	ldr	r3, [r7, #4]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d017      	beq.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8002b9e:	4b4e      	ldr	r3, [pc, #312]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ba0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002ba4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bac:	494a      	ldr	r1, [pc, #296]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bae:	4313      	orrs	r3, r2
 8002bb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8002bb4:	687b      	ldr	r3, [r7, #4]
 8002bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bb8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002bbc:	d101      	bne.n	8002bc2 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8002bbe:	2301      	movs	r3, #1
 8002bc0:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bc6:	2b00      	cmp	r3, #0
 8002bc8:	d101      	bne.n	8002bce <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8002bca:	2301      	movs	r3, #1
 8002bcc:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002bd6:	2b00      	cmp	r3, #0
 8002bd8:	d001      	beq.n	8002bde <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8002bda:	2301      	movs	r3, #1
 8002bdc:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	681b      	ldr	r3, [r3, #0]
 8002be2:	f003 0320 	and.w	r3, r3, #32
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	f000 808b 	beq.w	8002d02 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8002bec:	4b3a      	ldr	r3, [pc, #232]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf0:	4a39      	ldr	r2, [pc, #228]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bf2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002bf6:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf8:	4b37      	ldr	r3, [pc, #220]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002bfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002c00:	60bb      	str	r3, [r7, #8]
 8002c02:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8002c04:	4b35      	ldr	r3, [pc, #212]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	4a34      	ldr	r2, [pc, #208]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c0a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c0e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002c10:	f7fe f9f0 	bl	8000ff4 <HAL_GetTick>
 8002c14:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c16:	e008      	b.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002c18:	f7fe f9ec 	bl	8000ff4 <HAL_GetTick>
 8002c1c:	4602      	mov	r2, r0
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	1ad3      	subs	r3, r2, r3
 8002c22:	2b64      	cmp	r3, #100	; 0x64
 8002c24:	d901      	bls.n	8002c2a <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8002c26:	2303      	movs	r3, #3
 8002c28:	e357      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8002c2a:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8002c2c:	681b      	ldr	r3, [r3, #0]
 8002c2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002c32:	2b00      	cmp	r3, #0
 8002c34:	d0f0      	beq.n	8002c18 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8002c36:	4b28      	ldr	r3, [pc, #160]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c38:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c3a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c3e:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d035      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c4a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002c4e:	693a      	ldr	r2, [r7, #16]
 8002c50:	429a      	cmp	r2, r3
 8002c52:	d02e      	beq.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8002c54:	4b20      	ldr	r3, [pc, #128]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8002c5c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8002c5e:	4b1e      	ldr	r3, [pc, #120]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c60:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c62:	4a1d      	ldr	r2, [pc, #116]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c64:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002c68:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8002c6a:	4b1b      	ldr	r3, [pc, #108]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c6c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c6e:	4a1a      	ldr	r2, [pc, #104]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c70:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002c74:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8002c76:	4a18      	ldr	r2, [pc, #96]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c78:	693b      	ldr	r3, [r7, #16]
 8002c7a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8002c7c:	4b16      	ldr	r3, [pc, #88]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002c7e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002c80:	f003 0301 	and.w	r3, r3, #1
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d114      	bne.n	8002cb2 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002c88:	f7fe f9b4 	bl	8000ff4 <HAL_GetTick>
 8002c8c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002c8e:	e00a      	b.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002c90:	f7fe f9b0 	bl	8000ff4 <HAL_GetTick>
 8002c94:	4602      	mov	r2, r0
 8002c96:	697b      	ldr	r3, [r7, #20]
 8002c98:	1ad3      	subs	r3, r2, r3
 8002c9a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002c9e:	4293      	cmp	r3, r2
 8002ca0:	d901      	bls.n	8002ca6 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8002ca2:	2303      	movs	r3, #3
 8002ca4:	e319      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ca6:	4b0c      	ldr	r3, [pc, #48]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002ca8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002caa:	f003 0302 	and.w	r3, r3, #2
 8002cae:	2b00      	cmp	r3, #0
 8002cb0:	d0ee      	beq.n	8002c90 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8002cba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8002cbe:	d111      	bne.n	8002ce4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8002cc0:	4b05      	ldr	r3, [pc, #20]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cc2:	689b      	ldr	r3, [r3, #8]
 8002cc4:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8002ccc:	4b04      	ldr	r3, [pc, #16]	; (8002ce0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 8002cce:	400b      	ands	r3, r1
 8002cd0:	4901      	ldr	r1, [pc, #4]	; (8002cd8 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8002cd2:	4313      	orrs	r3, r2
 8002cd4:	608b      	str	r3, [r1, #8]
 8002cd6:	e00b      	b.n	8002cf0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8002cd8:	40023800 	.word	0x40023800
 8002cdc:	40007000 	.word	0x40007000
 8002ce0:	0ffffcff 	.word	0x0ffffcff
 8002ce4:	4bb1      	ldr	r3, [pc, #708]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ce6:	689b      	ldr	r3, [r3, #8]
 8002ce8:	4ab0      	ldr	r2, [pc, #704]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cea:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8002cee:	6093      	str	r3, [r2, #8]
 8002cf0:	4bae      	ldr	r3, [pc, #696]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cf2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002cf8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002cfc:	49ab      	ldr	r1, [pc, #684]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002cfe:	4313      	orrs	r3, r2
 8002d00:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 8002d02:	687b      	ldr	r3, [r7, #4]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f003 0310 	and.w	r3, r3, #16
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d010      	beq.n	8002d30 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8002d0e:	4ba7      	ldr	r3, [pc, #668]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d10:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8002d14:	4aa5      	ldr	r2, [pc, #660]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d16:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8002d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8002d1e:	4ba3      	ldr	r3, [pc, #652]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d20:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8002d24:	687b      	ldr	r3, [r7, #4]
 8002d26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8002d28:	49a0      	ldr	r1, [pc, #640]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d2a:	4313      	orrs	r3, r2
 8002d2c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002d38:	2b00      	cmp	r3, #0
 8002d3a:	d00a      	beq.n	8002d52 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8002d3c:	4b9b      	ldr	r3, [pc, #620]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d3e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d42:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8002d4a:	4998      	ldr	r1, [pc, #608]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d4c:	4313      	orrs	r3, r2
 8002d4e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8002d52:	687b      	ldr	r3, [r7, #4]
 8002d54:	681b      	ldr	r3, [r3, #0]
 8002d56:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	d00a      	beq.n	8002d74 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8002d5e:	4b93      	ldr	r3, [pc, #588]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d60:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d64:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8002d6c:	498f      	ldr	r1, [pc, #572]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8002d74:	687b      	ldr	r3, [r7, #4]
 8002d76:	681b      	ldr	r3, [r3, #0]
 8002d78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	d00a      	beq.n	8002d96 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8002d80:	4b8a      	ldr	r3, [pc, #552]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002d86:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8002d8a:	687b      	ldr	r3, [r7, #4]
 8002d8c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8002d8e:	4987      	ldr	r1, [pc, #540]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002d90:	4313      	orrs	r3, r2
 8002d92:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d00a      	beq.n	8002db8 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8002da2:	4b82      	ldr	r3, [pc, #520]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002da4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002da8:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002db0:	497e      	ldr	r1, [pc, #504]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002dc0:	2b00      	cmp	r3, #0
 8002dc2:	d00a      	beq.n	8002dda <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8002dc4:	4b79      	ldr	r3, [pc, #484]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dc6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dca:	f023 0203 	bic.w	r2, r3, #3
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002dd2:	4976      	ldr	r1, [pc, #472]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 8002dda:	687b      	ldr	r3, [r7, #4]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002de2:	2b00      	cmp	r3, #0
 8002de4:	d00a      	beq.n	8002dfc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8002de6:	4b71      	ldr	r3, [pc, #452]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002de8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002dec:	f023 020c 	bic.w	r2, r3, #12
 8002df0:	687b      	ldr	r3, [r7, #4]
 8002df2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002df4:	496d      	ldr	r1, [pc, #436]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002df6:	4313      	orrs	r3, r2
 8002df8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d00a      	beq.n	8002e1e <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8002e08:	4b68      	ldr	r3, [pc, #416]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e0a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e0e:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002e16:	4965      	ldr	r1, [pc, #404]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e18:	4313      	orrs	r3, r2
 8002e1a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8002e1e:	687b      	ldr	r3, [r7, #4]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d00a      	beq.n	8002e40 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8002e2a:	4b60      	ldr	r3, [pc, #384]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e2c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e30:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8002e34:	687b      	ldr	r3, [r7, #4]
 8002e36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002e38:	495c      	ldr	r1, [pc, #368]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e3a:	4313      	orrs	r3, r2
 8002e3c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8002e40:	687b      	ldr	r3, [r7, #4]
 8002e42:	681b      	ldr	r3, [r3, #0]
 8002e44:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d00a      	beq.n	8002e62 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8002e4c:	4b57      	ldr	r3, [pc, #348]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e4e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e52:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002e56:	687b      	ldr	r3, [r7, #4]
 8002e58:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002e5a:	4954      	ldr	r1, [pc, #336]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e5c:	4313      	orrs	r3, r2
 8002e5e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8002e62:	687b      	ldr	r3, [r7, #4]
 8002e64:	681b      	ldr	r3, [r3, #0]
 8002e66:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	d00a      	beq.n	8002e84 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8002e6e:	4b4f      	ldr	r3, [pc, #316]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e74:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8002e78:	687b      	ldr	r3, [r7, #4]
 8002e7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002e7c:	494b      	ldr	r1, [pc, #300]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d00a      	beq.n	8002ea6 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8002e90:	4b46      	ldr	r3, [pc, #280]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002e96:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002e9e:	4943      	ldr	r1, [pc, #268]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ea0:	4313      	orrs	r3, r2
 8002ea2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8002ea6:	687b      	ldr	r3, [r7, #4]
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d00a      	beq.n	8002ec8 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8002eb2:	4b3e      	ldr	r3, [pc, #248]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002eb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eb8:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002ec0:	493a      	ldr	r1, [pc, #232]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ec2:	4313      	orrs	r3, r2
 8002ec4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8002ec8:	687b      	ldr	r3, [r7, #4]
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d00a      	beq.n	8002eea <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8002ed4:	4b35      	ldr	r3, [pc, #212]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002eda:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8002ee2:	4932      	ldr	r1, [pc, #200]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ee4:	4313      	orrs	r3, r2
 8002ee6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8002eea:	687b      	ldr	r3, [r7, #4]
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d011      	beq.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8002ef6:	4b2d      	ldr	r3, [pc, #180]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002efc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f04:	4929      	ldr	r1, [pc, #164]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f06:	4313      	orrs	r3, r2
 8002f08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8002f10:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8002f14:	d101      	bne.n	8002f1a <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8002f16:	2301      	movs	r3, #1
 8002f18:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	f003 0308 	and.w	r3, r3, #8
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d001      	beq.n	8002f2a <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8002f26:	2301      	movs	r3, #1
 8002f28:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002f32:	2b00      	cmp	r3, #0
 8002f34:	d00a      	beq.n	8002f4c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8002f36:	4b1d      	ldr	r3, [pc, #116]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f3c:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8002f40:	687b      	ldr	r3, [r7, #4]
 8002f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f44:	4919      	ldr	r1, [pc, #100]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f46:	4313      	orrs	r3, r2
 8002f48:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002f54:	2b00      	cmp	r3, #0
 8002f56:	d00b      	beq.n	8002f70 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8002f58:	4b14      	ldr	r3, [pc, #80]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f5a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8002f5e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002f62:	687b      	ldr	r3, [r7, #4]
 8002f64:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8002f68:	4910      	ldr	r1, [pc, #64]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f6a:	4313      	orrs	r3, r2
 8002f6c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8002f70:	69fb      	ldr	r3, [r7, #28]
 8002f72:	2b01      	cmp	r3, #1
 8002f74:	d006      	beq.n	8002f84 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8002f76:	687b      	ldr	r3, [r7, #4]
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002f7e:	2b00      	cmp	r3, #0
 8002f80:	f000 80d9 	beq.w	8003136 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8002f84:	4b09      	ldr	r3, [pc, #36]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4a08      	ldr	r2, [pc, #32]	; (8002fac <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8002f8a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8002f8e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8002f90:	f7fe f830 	bl	8000ff4 <HAL_GetTick>
 8002f94:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002f96:	e00b      	b.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8002f98:	f7fe f82c 	bl	8000ff4 <HAL_GetTick>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	697b      	ldr	r3, [r7, #20]
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	2b64      	cmp	r3, #100	; 0x64
 8002fa4:	d904      	bls.n	8002fb0 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8002fa6:	2303      	movs	r3, #3
 8002fa8:	e197      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8002faa:	bf00      	nop
 8002fac:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8002fb0:	4b6c      	ldr	r3, [pc, #432]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d1ed      	bne.n	8002f98 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	f003 0301 	and.w	r3, r3, #1
 8002fc4:	2b00      	cmp	r3, #0
 8002fc6:	d021      	beq.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x504>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d11d      	bne.n	800300c <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8002fd0:	4b64      	ldr	r3, [pc, #400]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fd2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fd6:	0c1b      	lsrs	r3, r3, #16
 8002fd8:	f003 0303 	and.w	r3, r3, #3
 8002fdc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8002fde:	4b61      	ldr	r3, [pc, #388]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8002fe0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8002fe4:	0e1b      	lsrs	r3, r3, #24
 8002fe6:	f003 030f 	and.w	r3, r3, #15
 8002fea:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8002fec:	687b      	ldr	r3, [r7, #4]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	019a      	lsls	r2, r3, #6
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	041b      	lsls	r3, r3, #16
 8002ff6:	431a      	orrs	r2, r3
 8002ff8:	68fb      	ldr	r3, [r7, #12]
 8002ffa:	061b      	lsls	r3, r3, #24
 8002ffc:	431a      	orrs	r2, r3
 8002ffe:	687b      	ldr	r3, [r7, #4]
 8003000:	689b      	ldr	r3, [r3, #8]
 8003002:	071b      	lsls	r3, r3, #28
 8003004:	4957      	ldr	r1, [pc, #348]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003006:	4313      	orrs	r3, r2
 8003008:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	681b      	ldr	r3, [r3, #0]
 8003010:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d004      	beq.n	8003022 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003018:	687b      	ldr	r3, [r7, #4]
 800301a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800301c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003020:	d00a      	beq.n	8003038 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	681b      	ldr	r3, [r3, #0]
 8003026:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 800302a:	2b00      	cmp	r3, #0
 800302c:	d02e      	beq.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800302e:	687b      	ldr	r3, [r7, #4]
 8003030:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003032:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003036:	d129      	bne.n	800308c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003038:	4b4a      	ldr	r3, [pc, #296]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800303a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800303e:	0c1b      	lsrs	r3, r3, #16
 8003040:	f003 0303 	and.w	r3, r3, #3
 8003044:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003046:	4b47      	ldr	r3, [pc, #284]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003048:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800304c:	0f1b      	lsrs	r3, r3, #28
 800304e:	f003 0307 	and.w	r3, r3, #7
 8003052:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003054:	687b      	ldr	r3, [r7, #4]
 8003056:	685b      	ldr	r3, [r3, #4]
 8003058:	019a      	lsls	r2, r3, #6
 800305a:	693b      	ldr	r3, [r7, #16]
 800305c:	041b      	lsls	r3, r3, #16
 800305e:	431a      	orrs	r2, r3
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	68db      	ldr	r3, [r3, #12]
 8003064:	061b      	lsls	r3, r3, #24
 8003066:	431a      	orrs	r2, r3
 8003068:	68fb      	ldr	r3, [r7, #12]
 800306a:	071b      	lsls	r3, r3, #28
 800306c:	493d      	ldr	r1, [pc, #244]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800306e:	4313      	orrs	r3, r2
 8003070:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003074:	4b3b      	ldr	r3, [pc, #236]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003076:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800307a:	f023 021f 	bic.w	r2, r3, #31
 800307e:	687b      	ldr	r3, [r7, #4]
 8003080:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003082:	3b01      	subs	r3, #1
 8003084:	4937      	ldr	r1, [pc, #220]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003086:	4313      	orrs	r3, r2
 8003088:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800308c:	687b      	ldr	r3, [r7, #4]
 800308e:	681b      	ldr	r3, [r3, #0]
 8003090:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003094:	2b00      	cmp	r3, #0
 8003096:	d01d      	beq.n	80030d4 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003098:	4b32      	ldr	r3, [pc, #200]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800309a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800309e:	0e1b      	lsrs	r3, r3, #24
 80030a0:	f003 030f 	and.w	r3, r3, #15
 80030a4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80030a6:	4b2f      	ldr	r3, [pc, #188]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030a8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80030ac:	0f1b      	lsrs	r3, r3, #28
 80030ae:	f003 0307 	and.w	r3, r3, #7
 80030b2:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	019a      	lsls	r2, r3, #6
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	691b      	ldr	r3, [r3, #16]
 80030be:	041b      	lsls	r3, r3, #16
 80030c0:	431a      	orrs	r2, r3
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	061b      	lsls	r3, r3, #24
 80030c6:	431a      	orrs	r2, r3
 80030c8:	68fb      	ldr	r3, [r7, #12]
 80030ca:	071b      	lsls	r3, r3, #28
 80030cc:	4925      	ldr	r1, [pc, #148]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030ce:	4313      	orrs	r3, r2
 80030d0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	681b      	ldr	r3, [r3, #0]
 80030d8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030dc:	2b00      	cmp	r3, #0
 80030de:	d011      	beq.n	8003104 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80030e0:	687b      	ldr	r3, [r7, #4]
 80030e2:	685b      	ldr	r3, [r3, #4]
 80030e4:	019a      	lsls	r2, r3, #6
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	691b      	ldr	r3, [r3, #16]
 80030ea:	041b      	lsls	r3, r3, #16
 80030ec:	431a      	orrs	r2, r3
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	68db      	ldr	r3, [r3, #12]
 80030f2:	061b      	lsls	r3, r3, #24
 80030f4:	431a      	orrs	r2, r3
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	689b      	ldr	r3, [r3, #8]
 80030fa:	071b      	lsls	r3, r3, #28
 80030fc:	4919      	ldr	r1, [pc, #100]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80030fe:	4313      	orrs	r3, r2
 8003100:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003104:	4b17      	ldr	r3, [pc, #92]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003106:	681b      	ldr	r3, [r3, #0]
 8003108:	4a16      	ldr	r2, [pc, #88]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800310a:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800310e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003110:	f7fd ff70 	bl	8000ff4 <HAL_GetTick>
 8003114:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003118:	f7fd ff6c 	bl	8000ff4 <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e0d7      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 800312a:	4b0e      	ldr	r3, [pc, #56]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003136:	69bb      	ldr	r3, [r7, #24]
 8003138:	2b01      	cmp	r3, #1
 800313a:	f040 80cd 	bne.w	80032d8 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800313e:	4b09      	ldr	r3, [pc, #36]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	4a08      	ldr	r2, [pc, #32]	; (8003164 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003144:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003148:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800314a:	f7fd ff53 	bl	8000ff4 <HAL_GetTick>
 800314e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003150:	e00a      	b.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003152:	f7fd ff4f 	bl	8000ff4 <HAL_GetTick>
 8003156:	4602      	mov	r2, r0
 8003158:	697b      	ldr	r3, [r7, #20]
 800315a:	1ad3      	subs	r3, r2, r3
 800315c:	2b64      	cmp	r3, #100	; 0x64
 800315e:	d903      	bls.n	8003168 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e0ba      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003164:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003168:	4b5e      	ldr	r3, [pc, #376]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800316a:	681b      	ldr	r3, [r3, #0]
 800316c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003170:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003174:	d0ed      	beq.n	8003152 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003176:	687b      	ldr	r3, [r7, #4]
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d003      	beq.n	800318a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003182:	687b      	ldr	r3, [r7, #4]
 8003184:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003186:	2b00      	cmp	r3, #0
 8003188:	d009      	beq.n	800319e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	681b      	ldr	r3, [r3, #0]
 800318e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003192:	2b00      	cmp	r3, #0
 8003194:	d02e      	beq.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003196:	687b      	ldr	r3, [r7, #4]
 8003198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800319a:	2b00      	cmp	r3, #0
 800319c:	d12a      	bne.n	80031f4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800319e:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031a0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031a4:	0c1b      	lsrs	r3, r3, #16
 80031a6:	f003 0303 	and.w	r3, r3, #3
 80031aa:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80031ac:	4b4d      	ldr	r3, [pc, #308]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80031b2:	0f1b      	lsrs	r3, r3, #28
 80031b4:	f003 0307 	and.w	r3, r3, #7
 80031b8:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	695b      	ldr	r3, [r3, #20]
 80031be:	019a      	lsls	r2, r3, #6
 80031c0:	693b      	ldr	r3, [r7, #16]
 80031c2:	041b      	lsls	r3, r3, #16
 80031c4:	431a      	orrs	r2, r3
 80031c6:	687b      	ldr	r3, [r7, #4]
 80031c8:	699b      	ldr	r3, [r3, #24]
 80031ca:	061b      	lsls	r3, r3, #24
 80031cc:	431a      	orrs	r2, r3
 80031ce:	68fb      	ldr	r3, [r7, #12]
 80031d0:	071b      	lsls	r3, r3, #28
 80031d2:	4944      	ldr	r1, [pc, #272]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031d4:	4313      	orrs	r3, r2
 80031d6:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80031da:	4b42      	ldr	r3, [pc, #264]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031dc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80031e0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031e8:	3b01      	subs	r3, #1
 80031ea:	021b      	lsls	r3, r3, #8
 80031ec:	493d      	ldr	r1, [pc, #244]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80031ee:	4313      	orrs	r3, r2
 80031f0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d022      	beq.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003200:	687b      	ldr	r3, [r7, #4]
 8003202:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003204:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003208:	d11d      	bne.n	8003246 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800320a:	4b36      	ldr	r3, [pc, #216]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800320c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003210:	0e1b      	lsrs	r3, r3, #24
 8003212:	f003 030f 	and.w	r3, r3, #15
 8003216:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003218:	4b32      	ldr	r3, [pc, #200]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800321a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800321e:	0f1b      	lsrs	r3, r3, #28
 8003220:	f003 0307 	and.w	r3, r3, #7
 8003224:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	695b      	ldr	r3, [r3, #20]
 800322a:	019a      	lsls	r2, r3, #6
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	6a1b      	ldr	r3, [r3, #32]
 8003230:	041b      	lsls	r3, r3, #16
 8003232:	431a      	orrs	r2, r3
 8003234:	693b      	ldr	r3, [r7, #16]
 8003236:	061b      	lsls	r3, r3, #24
 8003238:	431a      	orrs	r2, r3
 800323a:	68fb      	ldr	r3, [r7, #12]
 800323c:	071b      	lsls	r3, r3, #28
 800323e:	4929      	ldr	r1, [pc, #164]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003240:	4313      	orrs	r3, r2
 8003242:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003246:	687b      	ldr	r3, [r7, #4]
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	f003 0308 	and.w	r3, r3, #8
 800324e:	2b00      	cmp	r3, #0
 8003250:	d028      	beq.n	80032a4 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003252:	4b24      	ldr	r3, [pc, #144]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003254:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003258:	0e1b      	lsrs	r3, r3, #24
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003260:	4b20      	ldr	r3, [pc, #128]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003262:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003266:	0c1b      	lsrs	r3, r3, #16
 8003268:	f003 0303 	and.w	r3, r3, #3
 800326c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	695b      	ldr	r3, [r3, #20]
 8003272:	019a      	lsls	r2, r3, #6
 8003274:	68fb      	ldr	r3, [r7, #12]
 8003276:	041b      	lsls	r3, r3, #16
 8003278:	431a      	orrs	r2, r3
 800327a:	693b      	ldr	r3, [r7, #16]
 800327c:	061b      	lsls	r3, r3, #24
 800327e:	431a      	orrs	r2, r3
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	69db      	ldr	r3, [r3, #28]
 8003284:	071b      	lsls	r3, r3, #28
 8003286:	4917      	ldr	r1, [pc, #92]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003288:	4313      	orrs	r3, r2
 800328a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800328e:	4b15      	ldr	r3, [pc, #84]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003290:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003294:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800329c:	4911      	ldr	r1, [pc, #68]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800329e:	4313      	orrs	r3, r2
 80032a0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80032a4:	4b0f      	ldr	r3, [pc, #60]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	4a0e      	ldr	r2, [pc, #56]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032aa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032ae:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b0:	f7fd fea0 	bl	8000ff4 <HAL_GetTick>
 80032b4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032b6:	e008      	b.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80032b8:	f7fd fe9c 	bl	8000ff4 <HAL_GetTick>
 80032bc:	4602      	mov	r2, r0
 80032be:	697b      	ldr	r3, [r7, #20]
 80032c0:	1ad3      	subs	r3, r2, r3
 80032c2:	2b64      	cmp	r3, #100	; 0x64
 80032c4:	d901      	bls.n	80032ca <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80032c6:	2303      	movs	r3, #3
 80032c8:	e007      	b.n	80032da <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80032ca:	4b06      	ldr	r3, [pc, #24]	; (80032e4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80032d2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80032d6:	d1ef      	bne.n	80032b8 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	40023800 	.word	0x40023800

080032e8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b082      	sub	sp, #8
 80032ec:	af00      	add	r7, sp, #0
 80032ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d101      	bne.n	80032fa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80032f6:	2301      	movs	r3, #1
 80032f8:	e049      	b.n	800338e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003300:	b2db      	uxtb	r3, r3
 8003302:	2b00      	cmp	r3, #0
 8003304:	d106      	bne.n	8003314 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	2200      	movs	r2, #0
 800330a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800330e:	6878      	ldr	r0, [r7, #4]
 8003310:	f7fd fcea 	bl	8000ce8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	2202      	movs	r2, #2
 8003318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800331c:	687b      	ldr	r3, [r7, #4]
 800331e:	681a      	ldr	r2, [r3, #0]
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	3304      	adds	r3, #4
 8003324:	4619      	mov	r1, r3
 8003326:	4610      	mov	r0, r2
 8003328:	f000 fabc 	bl	80038a4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	2201      	movs	r2, #1
 8003330:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	2201      	movs	r2, #1
 8003338:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003344:	687b      	ldr	r3, [r7, #4]
 8003346:	2201      	movs	r2, #1
 8003348:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	2201      	movs	r2, #1
 8003350:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	2201      	movs	r2, #1
 8003358:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	2201      	movs	r2, #1
 8003360:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	2201      	movs	r2, #1
 8003368:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2201      	movs	r2, #1
 8003370:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003374:	687b      	ldr	r3, [r7, #4]
 8003376:	2201      	movs	r2, #1
 8003378:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003384:	687b      	ldr	r3, [r7, #4]
 8003386:	2201      	movs	r2, #1
 8003388:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800338c:	2300      	movs	r3, #0
}
 800338e:	4618      	mov	r0, r3
 8003390:	3708      	adds	r7, #8
 8003392:	46bd      	mov	sp, r7
 8003394:	bd80      	pop	{r7, pc}
	...

08003398 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003398:	b480      	push	{r7}
 800339a:	b085      	sub	sp, #20
 800339c:	af00      	add	r7, sp, #0
 800339e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	2b01      	cmp	r3, #1
 80033aa:	d001      	beq.n	80033b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80033ac:	2301      	movs	r3, #1
 80033ae:	e054      	b.n	800345a <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	2202      	movs	r2, #2
 80033b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	681b      	ldr	r3, [r3, #0]
 80033bc:	68da      	ldr	r2, [r3, #12]
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	f042 0201 	orr.w	r2, r2, #1
 80033c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4a26      	ldr	r2, [pc, #152]	; (8003468 <HAL_TIM_Base_Start_IT+0xd0>)
 80033ce:	4293      	cmp	r3, r2
 80033d0:	d022      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033d2:	687b      	ldr	r3, [r7, #4]
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80033da:	d01d      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	4a22      	ldr	r2, [pc, #136]	; (800346c <HAL_TIM_Base_Start_IT+0xd4>)
 80033e2:	4293      	cmp	r3, r2
 80033e4:	d018      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033e6:	687b      	ldr	r3, [r7, #4]
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a21      	ldr	r2, [pc, #132]	; (8003470 <HAL_TIM_Base_Start_IT+0xd8>)
 80033ec:	4293      	cmp	r3, r2
 80033ee:	d013      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033f0:	687b      	ldr	r3, [r7, #4]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	4a1f      	ldr	r2, [pc, #124]	; (8003474 <HAL_TIM_Base_Start_IT+0xdc>)
 80033f6:	4293      	cmp	r3, r2
 80033f8:	d00e      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	4a1e      	ldr	r2, [pc, #120]	; (8003478 <HAL_TIM_Base_Start_IT+0xe0>)
 8003400:	4293      	cmp	r3, r2
 8003402:	d009      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	4a1c      	ldr	r2, [pc, #112]	; (800347c <HAL_TIM_Base_Start_IT+0xe4>)
 800340a:	4293      	cmp	r3, r2
 800340c:	d004      	beq.n	8003418 <HAL_TIM_Base_Start_IT+0x80>
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	4a1b      	ldr	r2, [pc, #108]	; (8003480 <HAL_TIM_Base_Start_IT+0xe8>)
 8003414:	4293      	cmp	r3, r2
 8003416:	d115      	bne.n	8003444 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003418:	687b      	ldr	r3, [r7, #4]
 800341a:	681b      	ldr	r3, [r3, #0]
 800341c:	689a      	ldr	r2, [r3, #8]
 800341e:	4b19      	ldr	r3, [pc, #100]	; (8003484 <HAL_TIM_Base_Start_IT+0xec>)
 8003420:	4013      	ands	r3, r2
 8003422:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	2b06      	cmp	r3, #6
 8003428:	d015      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0xbe>
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003430:	d011      	beq.n	8003456 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 8003432:	687b      	ldr	r3, [r7, #4]
 8003434:	681b      	ldr	r3, [r3, #0]
 8003436:	681a      	ldr	r2, [r3, #0]
 8003438:	687b      	ldr	r3, [r7, #4]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	f042 0201 	orr.w	r2, r2, #1
 8003440:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003442:	e008      	b.n	8003456 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	681a      	ldr	r2, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	f042 0201 	orr.w	r2, r2, #1
 8003452:	601a      	str	r2, [r3, #0]
 8003454:	e000      	b.n	8003458 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003456:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	40010000 	.word	0x40010000
 800346c:	40000400 	.word	0x40000400
 8003470:	40000800 	.word	0x40000800
 8003474:	40000c00 	.word	0x40000c00
 8003478:	40010400 	.word	0x40010400
 800347c:	40014000 	.word	0x40014000
 8003480:	40001800 	.word	0x40001800
 8003484:	00010007 	.word	0x00010007

08003488 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003488:	b580      	push	{r7, lr}
 800348a:	b082      	sub	sp, #8
 800348c:	af00      	add	r7, sp, #0
 800348e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	691b      	ldr	r3, [r3, #16]
 8003496:	f003 0302 	and.w	r3, r3, #2
 800349a:	2b02      	cmp	r3, #2
 800349c:	d122      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	68db      	ldr	r3, [r3, #12]
 80034a4:	f003 0302 	and.w	r3, r3, #2
 80034a8:	2b02      	cmp	r3, #2
 80034aa:	d11b      	bne.n	80034e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	f06f 0202 	mvn.w	r2, #2
 80034b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	2201      	movs	r2, #1
 80034ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	699b      	ldr	r3, [r3, #24]
 80034c2:	f003 0303 	and.w	r3, r3, #3
 80034c6:	2b00      	cmp	r3, #0
 80034c8:	d003      	beq.n	80034d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80034ca:	6878      	ldr	r0, [r7, #4]
 80034cc:	f000 f9cc 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 80034d0:	e005      	b.n	80034de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80034d2:	6878      	ldr	r0, [r7, #4]
 80034d4:	f000 f9be 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80034d8:	6878      	ldr	r0, [r7, #4]
 80034da:	f000 f9cf 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	2200      	movs	r2, #0
 80034e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	691b      	ldr	r3, [r3, #16]
 80034ea:	f003 0304 	and.w	r3, r3, #4
 80034ee:	2b04      	cmp	r3, #4
 80034f0:	d122      	bne.n	8003538 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	68db      	ldr	r3, [r3, #12]
 80034f8:	f003 0304 	and.w	r3, r3, #4
 80034fc:	2b04      	cmp	r3, #4
 80034fe:	d11b      	bne.n	8003538 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f06f 0204 	mvn.w	r2, #4
 8003508:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2202      	movs	r2, #2
 800350e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	699b      	ldr	r3, [r3, #24]
 8003516:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800351a:	2b00      	cmp	r3, #0
 800351c:	d003      	beq.n	8003526 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800351e:	6878      	ldr	r0, [r7, #4]
 8003520:	f000 f9a2 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003524:	e005      	b.n	8003532 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003526:	6878      	ldr	r0, [r7, #4]
 8003528:	f000 f994 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800352c:	6878      	ldr	r0, [r7, #4]
 800352e:	f000 f9a5 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	2200      	movs	r2, #0
 8003536:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	691b      	ldr	r3, [r3, #16]
 800353e:	f003 0308 	and.w	r3, r3, #8
 8003542:	2b08      	cmp	r3, #8
 8003544:	d122      	bne.n	800358c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	f003 0308 	and.w	r3, r3, #8
 8003550:	2b08      	cmp	r3, #8
 8003552:	d11b      	bne.n	800358c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f06f 0208 	mvn.w	r2, #8
 800355c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800355e:	687b      	ldr	r3, [r7, #4]
 8003560:	2204      	movs	r2, #4
 8003562:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 0303 	and.w	r3, r3, #3
 800356e:	2b00      	cmp	r3, #0
 8003570:	d003      	beq.n	800357a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003572:	6878      	ldr	r0, [r7, #4]
 8003574:	f000 f978 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 8003578:	e005      	b.n	8003586 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800357a:	6878      	ldr	r0, [r7, #4]
 800357c:	f000 f96a 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003580:	6878      	ldr	r0, [r7, #4]
 8003582:	f000 f97b 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003586:	687b      	ldr	r3, [r7, #4]
 8003588:	2200      	movs	r2, #0
 800358a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	691b      	ldr	r3, [r3, #16]
 8003592:	f003 0310 	and.w	r3, r3, #16
 8003596:	2b10      	cmp	r3, #16
 8003598:	d122      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	68db      	ldr	r3, [r3, #12]
 80035a0:	f003 0310 	and.w	r3, r3, #16
 80035a4:	2b10      	cmp	r3, #16
 80035a6:	d11b      	bne.n	80035e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80035a8:	687b      	ldr	r3, [r7, #4]
 80035aa:	681b      	ldr	r3, [r3, #0]
 80035ac:	f06f 0210 	mvn.w	r2, #16
 80035b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	2208      	movs	r2, #8
 80035b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80035c2:	2b00      	cmp	r3, #0
 80035c4:	d003      	beq.n	80035ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80035c6:	6878      	ldr	r0, [r7, #4]
 80035c8:	f000 f94e 	bl	8003868 <HAL_TIM_IC_CaptureCallback>
 80035cc:	e005      	b.n	80035da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80035ce:	6878      	ldr	r0, [r7, #4]
 80035d0:	f000 f940 	bl	8003854 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80035d4:	6878      	ldr	r0, [r7, #4]
 80035d6:	f000 f951 	bl	800387c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	2200      	movs	r2, #0
 80035de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	691b      	ldr	r3, [r3, #16]
 80035e6:	f003 0301 	and.w	r3, r3, #1
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d10e      	bne.n	800360c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	68db      	ldr	r3, [r3, #12]
 80035f4:	f003 0301 	and.w	r3, r3, #1
 80035f8:	2b01      	cmp	r3, #1
 80035fa:	d107      	bne.n	800360c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	f06f 0201 	mvn.w	r2, #1
 8003604:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003606:	6878      	ldr	r0, [r7, #4]
 8003608:	f7fd fa30 	bl	8000a6c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	691b      	ldr	r3, [r3, #16]
 8003612:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003616:	2b80      	cmp	r3, #128	; 0x80
 8003618:	d10e      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	68db      	ldr	r3, [r3, #12]
 8003620:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003624:	2b80      	cmp	r3, #128	; 0x80
 8003626:	d107      	bne.n	8003638 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003630:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003632:	6878      	ldr	r0, [r7, #4]
 8003634:	f000 fb08 	bl	8003c48 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK2) != RESET)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	691b      	ldr	r3, [r3, #16]
 800363e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003642:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003646:	d10e      	bne.n	8003666 <HAL_TIM_IRQHandler+0x1de>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003648:	687b      	ldr	r3, [r7, #4]
 800364a:	681b      	ldr	r3, [r3, #0]
 800364c:	68db      	ldr	r3, [r3, #12]
 800364e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003652:	2b80      	cmp	r3, #128	; 0x80
 8003654:	d107      	bne.n	8003666 <HAL_TIM_IRQHandler+0x1de>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 8003656:	687b      	ldr	r3, [r7, #4]
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800365e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 8003660:	6878      	ldr	r0, [r7, #4]
 8003662:	f000 fafb 	bl	8003c5c <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003666:	687b      	ldr	r3, [r7, #4]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	691b      	ldr	r3, [r3, #16]
 800366c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003670:	2b40      	cmp	r3, #64	; 0x40
 8003672:	d10e      	bne.n	8003692 <HAL_TIM_IRQHandler+0x20a>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800367e:	2b40      	cmp	r3, #64	; 0x40
 8003680:	d107      	bne.n	8003692 <HAL_TIM_IRQHandler+0x20a>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800368a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800368c:	6878      	ldr	r0, [r7, #4]
 800368e:	f000 f8ff 	bl	8003890 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	681b      	ldr	r3, [r3, #0]
 8003696:	691b      	ldr	r3, [r3, #16]
 8003698:	f003 0320 	and.w	r3, r3, #32
 800369c:	2b20      	cmp	r3, #32
 800369e:	d10e      	bne.n	80036be <HAL_TIM_IRQHandler+0x236>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	68db      	ldr	r3, [r3, #12]
 80036a6:	f003 0320 	and.w	r3, r3, #32
 80036aa:	2b20      	cmp	r3, #32
 80036ac:	d107      	bne.n	80036be <HAL_TIM_IRQHandler+0x236>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f06f 0220 	mvn.w	r2, #32
 80036b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80036b8:	6878      	ldr	r0, [r7, #4]
 80036ba:	f000 fabb 	bl	8003c34 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80036be:	bf00      	nop
 80036c0:	3708      	adds	r7, #8
 80036c2:	46bd      	mov	sp, r7
 80036c4:	bd80      	pop	{r7, pc}
	...

080036c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80036c8:	b580      	push	{r7, lr}
 80036ca:	b084      	sub	sp, #16
 80036cc:	af00      	add	r7, sp, #0
 80036ce:	6078      	str	r0, [r7, #4]
 80036d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80036d2:	687b      	ldr	r3, [r7, #4]
 80036d4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80036d8:	2b01      	cmp	r3, #1
 80036da:	d101      	bne.n	80036e0 <HAL_TIM_ConfigClockSource+0x18>
 80036dc:	2302      	movs	r3, #2
 80036de:	e0b3      	b.n	8003848 <HAL_TIM_ConfigClockSource+0x180>
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	2201      	movs	r2, #1
 80036e4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	2202      	movs	r2, #2
 80036ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80036f8:	68fa      	ldr	r2, [r7, #12]
 80036fa:	4b55      	ldr	r3, [pc, #340]	; (8003850 <HAL_TIM_ConfigClockSource+0x188>)
 80036fc:	4013      	ands	r3, r2
 80036fe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003700:	68fb      	ldr	r3, [r7, #12]
 8003702:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003706:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003708:	687b      	ldr	r3, [r7, #4]
 800370a:	681b      	ldr	r3, [r3, #0]
 800370c:	68fa      	ldr	r2, [r7, #12]
 800370e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003710:	683b      	ldr	r3, [r7, #0]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003718:	d03e      	beq.n	8003798 <HAL_TIM_ConfigClockSource+0xd0>
 800371a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800371e:	f200 8087 	bhi.w	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003722:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003726:	f000 8085 	beq.w	8003834 <HAL_TIM_ConfigClockSource+0x16c>
 800372a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800372e:	d87f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003730:	2b70      	cmp	r3, #112	; 0x70
 8003732:	d01a      	beq.n	800376a <HAL_TIM_ConfigClockSource+0xa2>
 8003734:	2b70      	cmp	r3, #112	; 0x70
 8003736:	d87b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003738:	2b60      	cmp	r3, #96	; 0x60
 800373a:	d050      	beq.n	80037de <HAL_TIM_ConfigClockSource+0x116>
 800373c:	2b60      	cmp	r3, #96	; 0x60
 800373e:	d877      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003740:	2b50      	cmp	r3, #80	; 0x50
 8003742:	d03c      	beq.n	80037be <HAL_TIM_ConfigClockSource+0xf6>
 8003744:	2b50      	cmp	r3, #80	; 0x50
 8003746:	d873      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003748:	2b40      	cmp	r3, #64	; 0x40
 800374a:	d058      	beq.n	80037fe <HAL_TIM_ConfigClockSource+0x136>
 800374c:	2b40      	cmp	r3, #64	; 0x40
 800374e:	d86f      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003750:	2b30      	cmp	r3, #48	; 0x30
 8003752:	d064      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
 8003754:	2b30      	cmp	r3, #48	; 0x30
 8003756:	d86b      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003758:	2b20      	cmp	r3, #32
 800375a:	d060      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
 800375c:	2b20      	cmp	r3, #32
 800375e:	d867      	bhi.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
 8003760:	2b00      	cmp	r3, #0
 8003762:	d05c      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
 8003764:	2b10      	cmp	r3, #16
 8003766:	d05a      	beq.n	800381e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003768:	e062      	b.n	8003830 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	6818      	ldr	r0, [r3, #0]
 800376e:	683b      	ldr	r3, [r7, #0]
 8003770:	6899      	ldr	r1, [r3, #8]
 8003772:	683b      	ldr	r3, [r7, #0]
 8003774:	685a      	ldr	r2, [r3, #4]
 8003776:	683b      	ldr	r3, [r7, #0]
 8003778:	68db      	ldr	r3, [r3, #12]
 800377a:	f000 f9ad 	bl	8003ad8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800377e:	687b      	ldr	r3, [r7, #4]
 8003780:	681b      	ldr	r3, [r3, #0]
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003786:	68fb      	ldr	r3, [r7, #12]
 8003788:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800378c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	68fa      	ldr	r2, [r7, #12]
 8003794:	609a      	str	r2, [r3, #8]
      break;
 8003796:	e04e      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8003798:	687b      	ldr	r3, [r7, #4]
 800379a:	6818      	ldr	r0, [r3, #0]
 800379c:	683b      	ldr	r3, [r7, #0]
 800379e:	6899      	ldr	r1, [r3, #8]
 80037a0:	683b      	ldr	r3, [r7, #0]
 80037a2:	685a      	ldr	r2, [r3, #4]
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	68db      	ldr	r3, [r3, #12]
 80037a8:	f000 f996 	bl	8003ad8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	689a      	ldr	r2, [r3, #8]
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	681b      	ldr	r3, [r3, #0]
 80037b6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80037ba:	609a      	str	r2, [r3, #8]
      break;
 80037bc:	e03b      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037be:	687b      	ldr	r3, [r7, #4]
 80037c0:	6818      	ldr	r0, [r3, #0]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	6859      	ldr	r1, [r3, #4]
 80037c6:	683b      	ldr	r3, [r7, #0]
 80037c8:	68db      	ldr	r3, [r3, #12]
 80037ca:	461a      	mov	r2, r3
 80037cc:	f000 f90a 	bl	80039e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	681b      	ldr	r3, [r3, #0]
 80037d4:	2150      	movs	r1, #80	; 0x50
 80037d6:	4618      	mov	r0, r3
 80037d8:	f000 f963 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 80037dc:	e02b      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	6818      	ldr	r0, [r3, #0]
 80037e2:	683b      	ldr	r3, [r7, #0]
 80037e4:	6859      	ldr	r1, [r3, #4]
 80037e6:	683b      	ldr	r3, [r7, #0]
 80037e8:	68db      	ldr	r3, [r3, #12]
 80037ea:	461a      	mov	r2, r3
 80037ec:	f000 f929 	bl	8003a42 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	2160      	movs	r1, #96	; 0x60
 80037f6:	4618      	mov	r0, r3
 80037f8:	f000 f953 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 80037fc:	e01b      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	6818      	ldr	r0, [r3, #0]
 8003802:	683b      	ldr	r3, [r7, #0]
 8003804:	6859      	ldr	r1, [r3, #4]
 8003806:	683b      	ldr	r3, [r7, #0]
 8003808:	68db      	ldr	r3, [r3, #12]
 800380a:	461a      	mov	r2, r3
 800380c:	f000 f8ea 	bl	80039e4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	2140      	movs	r1, #64	; 0x40
 8003816:	4618      	mov	r0, r3
 8003818:	f000 f943 	bl	8003aa2 <TIM_ITRx_SetConfig>
      break;
 800381c:	e00b      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	683b      	ldr	r3, [r7, #0]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	4619      	mov	r1, r3
 8003828:	4610      	mov	r0, r2
 800382a:	f000 f93a 	bl	8003aa2 <TIM_ITRx_SetConfig>
        break;
 800382e:	e002      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003830:	bf00      	nop
 8003832:	e000      	b.n	8003836 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8003834:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003836:	687b      	ldr	r3, [r7, #4]
 8003838:	2201      	movs	r2, #1
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003846:	2300      	movs	r3, #0
}
 8003848:	4618      	mov	r0, r3
 800384a:	3710      	adds	r7, #16
 800384c:	46bd      	mov	sp, r7
 800384e:	bd80      	pop	{r7, pc}
 8003850:	fffeff88 	.word	0xfffeff88

08003854 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003854:	b480      	push	{r7}
 8003856:	b083      	sub	sp, #12
 8003858:	af00      	add	r7, sp, #0
 800385a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800385c:	bf00      	nop
 800385e:	370c      	adds	r7, #12
 8003860:	46bd      	mov	sp, r7
 8003862:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003866:	4770      	bx	lr

08003868 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003868:	b480      	push	{r7}
 800386a:	b083      	sub	sp, #12
 800386c:	af00      	add	r7, sp, #0
 800386e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003870:	bf00      	nop
 8003872:	370c      	adds	r7, #12
 8003874:	46bd      	mov	sp, r7
 8003876:	f85d 7b04 	ldr.w	r7, [sp], #4
 800387a:	4770      	bx	lr

0800387c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800387c:	b480      	push	{r7}
 800387e:	b083      	sub	sp, #12
 8003880:	af00      	add	r7, sp, #0
 8003882:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003884:	bf00      	nop
 8003886:	370c      	adds	r7, #12
 8003888:	46bd      	mov	sp, r7
 800388a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800388e:	4770      	bx	lr

08003890 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003890:	b480      	push	{r7}
 8003892:	b083      	sub	sp, #12
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003898:	bf00      	nop
 800389a:	370c      	adds	r7, #12
 800389c:	46bd      	mov	sp, r7
 800389e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038a2:	4770      	bx	lr

080038a4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80038a4:	b480      	push	{r7}
 80038a6:	b085      	sub	sp, #20
 80038a8:	af00      	add	r7, sp, #0
 80038aa:	6078      	str	r0, [r7, #4]
 80038ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	4a40      	ldr	r2, [pc, #256]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 80038b8:	4293      	cmp	r3, r2
 80038ba:	d013      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80038c2:	d00f      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	4a3d      	ldr	r2, [pc, #244]	; (80039bc <TIM_Base_SetConfig+0x118>)
 80038c8:	4293      	cmp	r3, r2
 80038ca:	d00b      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	4a3c      	ldr	r2, [pc, #240]	; (80039c0 <TIM_Base_SetConfig+0x11c>)
 80038d0:	4293      	cmp	r3, r2
 80038d2:	d007      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	4a3b      	ldr	r2, [pc, #236]	; (80039c4 <TIM_Base_SetConfig+0x120>)
 80038d8:	4293      	cmp	r3, r2
 80038da:	d003      	beq.n	80038e4 <TIM_Base_SetConfig+0x40>
 80038dc:	687b      	ldr	r3, [r7, #4]
 80038de:	4a3a      	ldr	r2, [pc, #232]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 80038e0:	4293      	cmp	r3, r2
 80038e2:	d108      	bne.n	80038f6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80038e4:	68fb      	ldr	r3, [r7, #12]
 80038e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80038ea:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80038ec:	683b      	ldr	r3, [r7, #0]
 80038ee:	685b      	ldr	r3, [r3, #4]
 80038f0:	68fa      	ldr	r2, [r7, #12]
 80038f2:	4313      	orrs	r3, r2
 80038f4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80038f6:	687b      	ldr	r3, [r7, #4]
 80038f8:	4a2f      	ldr	r2, [pc, #188]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 80038fa:	4293      	cmp	r3, r2
 80038fc:	d02b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003904:	d027      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a2c      	ldr	r2, [pc, #176]	; (80039bc <TIM_Base_SetConfig+0x118>)
 800390a:	4293      	cmp	r3, r2
 800390c:	d023      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	4a2b      	ldr	r2, [pc, #172]	; (80039c0 <TIM_Base_SetConfig+0x11c>)
 8003912:	4293      	cmp	r3, r2
 8003914:	d01f      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4a2a      	ldr	r2, [pc, #168]	; (80039c4 <TIM_Base_SetConfig+0x120>)
 800391a:	4293      	cmp	r3, r2
 800391c:	d01b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800391e:	687b      	ldr	r3, [r7, #4]
 8003920:	4a29      	ldr	r2, [pc, #164]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 8003922:	4293      	cmp	r3, r2
 8003924:	d017      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	4a28      	ldr	r2, [pc, #160]	; (80039cc <TIM_Base_SetConfig+0x128>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d013      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800392e:	687b      	ldr	r3, [r7, #4]
 8003930:	4a27      	ldr	r2, [pc, #156]	; (80039d0 <TIM_Base_SetConfig+0x12c>)
 8003932:	4293      	cmp	r3, r2
 8003934:	d00f      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003936:	687b      	ldr	r3, [r7, #4]
 8003938:	4a26      	ldr	r2, [pc, #152]	; (80039d4 <TIM_Base_SetConfig+0x130>)
 800393a:	4293      	cmp	r3, r2
 800393c:	d00b      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800393e:	687b      	ldr	r3, [r7, #4]
 8003940:	4a25      	ldr	r2, [pc, #148]	; (80039d8 <TIM_Base_SetConfig+0x134>)
 8003942:	4293      	cmp	r3, r2
 8003944:	d007      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a24      	ldr	r2, [pc, #144]	; (80039dc <TIM_Base_SetConfig+0x138>)
 800394a:	4293      	cmp	r3, r2
 800394c:	d003      	beq.n	8003956 <TIM_Base_SetConfig+0xb2>
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	4a23      	ldr	r2, [pc, #140]	; (80039e0 <TIM_Base_SetConfig+0x13c>)
 8003952:	4293      	cmp	r3, r2
 8003954:	d108      	bne.n	8003968 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800395c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800395e:	683b      	ldr	r3, [r7, #0]
 8003960:	68db      	ldr	r3, [r3, #12]
 8003962:	68fa      	ldr	r2, [r7, #12]
 8003964:	4313      	orrs	r3, r2
 8003966:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003968:	68fb      	ldr	r3, [r7, #12]
 800396a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	695b      	ldr	r3, [r3, #20]
 8003972:	4313      	orrs	r3, r2
 8003974:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	68fa      	ldr	r2, [r7, #12]
 800397a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800397c:	683b      	ldr	r3, [r7, #0]
 800397e:	689a      	ldr	r2, [r3, #8]
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003984:	683b      	ldr	r3, [r7, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800398c:	687b      	ldr	r3, [r7, #4]
 800398e:	4a0a      	ldr	r2, [pc, #40]	; (80039b8 <TIM_Base_SetConfig+0x114>)
 8003990:	4293      	cmp	r3, r2
 8003992:	d003      	beq.n	800399c <TIM_Base_SetConfig+0xf8>
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	4a0c      	ldr	r2, [pc, #48]	; (80039c8 <TIM_Base_SetConfig+0x124>)
 8003998:	4293      	cmp	r3, r2
 800399a:	d103      	bne.n	80039a4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800399c:	683b      	ldr	r3, [r7, #0]
 800399e:	691a      	ldr	r2, [r3, #16]
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80039a4:	687b      	ldr	r3, [r7, #4]
 80039a6:	2201      	movs	r2, #1
 80039a8:	615a      	str	r2, [r3, #20]
}
 80039aa:	bf00      	nop
 80039ac:	3714      	adds	r7, #20
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr
 80039b6:	bf00      	nop
 80039b8:	40010000 	.word	0x40010000
 80039bc:	40000400 	.word	0x40000400
 80039c0:	40000800 	.word	0x40000800
 80039c4:	40000c00 	.word	0x40000c00
 80039c8:	40010400 	.word	0x40010400
 80039cc:	40014000 	.word	0x40014000
 80039d0:	40014400 	.word	0x40014400
 80039d4:	40014800 	.word	0x40014800
 80039d8:	40001800 	.word	0x40001800
 80039dc:	40001c00 	.word	0x40001c00
 80039e0:	40002000 	.word	0x40002000

080039e4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e4:	b480      	push	{r7}
 80039e6:	b087      	sub	sp, #28
 80039e8:	af00      	add	r7, sp, #0
 80039ea:	60f8      	str	r0, [r7, #12]
 80039ec:	60b9      	str	r1, [r7, #8]
 80039ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80039f0:	68fb      	ldr	r3, [r7, #12]
 80039f2:	6a1b      	ldr	r3, [r3, #32]
 80039f4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80039f6:	68fb      	ldr	r3, [r7, #12]
 80039f8:	6a1b      	ldr	r3, [r3, #32]
 80039fa:	f023 0201 	bic.w	r2, r3, #1
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	699b      	ldr	r3, [r3, #24]
 8003a06:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003a08:	693b      	ldr	r3, [r7, #16]
 8003a0a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003a0e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	011b      	lsls	r3, r3, #4
 8003a14:	693a      	ldr	r2, [r7, #16]
 8003a16:	4313      	orrs	r3, r2
 8003a18:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003a1a:	697b      	ldr	r3, [r7, #20]
 8003a1c:	f023 030a 	bic.w	r3, r3, #10
 8003a20:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003a22:	697a      	ldr	r2, [r7, #20]
 8003a24:	68bb      	ldr	r3, [r7, #8]
 8003a26:	4313      	orrs	r3, r2
 8003a28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003a2a:	68fb      	ldr	r3, [r7, #12]
 8003a2c:	693a      	ldr	r2, [r7, #16]
 8003a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	697a      	ldr	r2, [r7, #20]
 8003a34:	621a      	str	r2, [r3, #32]
}
 8003a36:	bf00      	nop
 8003a38:	371c      	adds	r7, #28
 8003a3a:	46bd      	mov	sp, r7
 8003a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a40:	4770      	bx	lr

08003a42 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003a42:	b480      	push	{r7}
 8003a44:	b087      	sub	sp, #28
 8003a46:	af00      	add	r7, sp, #0
 8003a48:	60f8      	str	r0, [r7, #12]
 8003a4a:	60b9      	str	r1, [r7, #8]
 8003a4c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003a4e:	68fb      	ldr	r3, [r7, #12]
 8003a50:	6a1b      	ldr	r3, [r3, #32]
 8003a52:	f023 0210 	bic.w	r2, r3, #16
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a5a:	68fb      	ldr	r3, [r7, #12]
 8003a5c:	699b      	ldr	r3, [r3, #24]
 8003a5e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	6a1b      	ldr	r3, [r3, #32]
 8003a64:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a66:	697b      	ldr	r3, [r7, #20]
 8003a68:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003a6c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	031b      	lsls	r3, r3, #12
 8003a72:	697a      	ldr	r2, [r7, #20]
 8003a74:	4313      	orrs	r3, r2
 8003a76:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a78:	693b      	ldr	r3, [r7, #16]
 8003a7a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8003a7e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a80:	68bb      	ldr	r3, [r7, #8]
 8003a82:	011b      	lsls	r3, r3, #4
 8003a84:	693a      	ldr	r2, [r7, #16]
 8003a86:	4313      	orrs	r3, r2
 8003a88:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a8a:	68fb      	ldr	r3, [r7, #12]
 8003a8c:	697a      	ldr	r2, [r7, #20]
 8003a8e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a90:	68fb      	ldr	r3, [r7, #12]
 8003a92:	693a      	ldr	r2, [r7, #16]
 8003a94:	621a      	str	r2, [r3, #32]
}
 8003a96:	bf00      	nop
 8003a98:	371c      	adds	r7, #28
 8003a9a:	46bd      	mov	sp, r7
 8003a9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa0:	4770      	bx	lr

08003aa2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003aa2:	b480      	push	{r7}
 8003aa4:	b085      	sub	sp, #20
 8003aa6:	af00      	add	r7, sp, #0
 8003aa8:	6078      	str	r0, [r7, #4]
 8003aaa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	689b      	ldr	r3, [r3, #8]
 8003ab0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003ab8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003aba:	683a      	ldr	r2, [r7, #0]
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4313      	orrs	r3, r2
 8003ac0:	f043 0307 	orr.w	r3, r3, #7
 8003ac4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	68fa      	ldr	r2, [r7, #12]
 8003aca:	609a      	str	r2, [r3, #8]
}
 8003acc:	bf00      	nop
 8003ace:	3714      	adds	r7, #20
 8003ad0:	46bd      	mov	sp, r7
 8003ad2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ad6:	4770      	bx	lr

08003ad8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003ad8:	b480      	push	{r7}
 8003ada:	b087      	sub	sp, #28
 8003adc:	af00      	add	r7, sp, #0
 8003ade:	60f8      	str	r0, [r7, #12]
 8003ae0:	60b9      	str	r1, [r7, #8]
 8003ae2:	607a      	str	r2, [r7, #4]
 8003ae4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003ae6:	68fb      	ldr	r3, [r7, #12]
 8003ae8:	689b      	ldr	r3, [r3, #8]
 8003aea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003aec:	697b      	ldr	r3, [r7, #20]
 8003aee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003af2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003af4:	683b      	ldr	r3, [r7, #0]
 8003af6:	021a      	lsls	r2, r3, #8
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	431a      	orrs	r2, r3
 8003afc:	68bb      	ldr	r3, [r7, #8]
 8003afe:	4313      	orrs	r3, r2
 8003b00:	697a      	ldr	r2, [r7, #20]
 8003b02:	4313      	orrs	r3, r2
 8003b04:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	697a      	ldr	r2, [r7, #20]
 8003b0a:	609a      	str	r2, [r3, #8]
}
 8003b0c:	bf00      	nop
 8003b0e:	371c      	adds	r7, #28
 8003b10:	46bd      	mov	sp, r7
 8003b12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b16:	4770      	bx	lr

08003b18 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b18:	b480      	push	{r7}
 8003b1a:	b085      	sub	sp, #20
 8003b1c:	af00      	add	r7, sp, #0
 8003b1e:	6078      	str	r0, [r7, #4]
 8003b20:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003b28:	2b01      	cmp	r3, #1
 8003b2a:	d101      	bne.n	8003b30 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b2c:	2302      	movs	r3, #2
 8003b2e:	e06d      	b.n	8003c0c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2201      	movs	r2, #1
 8003b34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	2202      	movs	r2, #2
 8003b3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	685b      	ldr	r3, [r3, #4]
 8003b46:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	689b      	ldr	r3, [r3, #8]
 8003b4e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a30      	ldr	r2, [pc, #192]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d004      	beq.n	8003b64 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	681b      	ldr	r3, [r3, #0]
 8003b5e:	4a2f      	ldr	r2, [pc, #188]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003b60:	4293      	cmp	r3, r2
 8003b62:	d108      	bne.n	8003b76 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8003b64:	68fb      	ldr	r3, [r7, #12]
 8003b66:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 8003b6a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	685b      	ldr	r3, [r3, #4]
 8003b70:	68fa      	ldr	r2, [r7, #12]
 8003b72:	4313      	orrs	r3, r2
 8003b74:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8003b7c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b7e:	683b      	ldr	r3, [r7, #0]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	68fa      	ldr	r2, [r7, #12]
 8003b84:	4313      	orrs	r3, r2
 8003b86:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	681b      	ldr	r3, [r3, #0]
 8003b8c:	68fa      	ldr	r2, [r7, #12]
 8003b8e:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a20      	ldr	r2, [pc, #128]	; (8003c18 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d022      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba2:	d01d      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a1d      	ldr	r2, [pc, #116]	; (8003c20 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d018      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a1c      	ldr	r2, [pc, #112]	; (8003c24 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d013      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	4a1a      	ldr	r2, [pc, #104]	; (8003c28 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 8003bbe:	4293      	cmp	r3, r2
 8003bc0:	d00e      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	4a15      	ldr	r2, [pc, #84]	; (8003c1c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8003bc8:	4293      	cmp	r3, r2
 8003bca:	d009      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	4a16      	ldr	r2, [pc, #88]	; (8003c2c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 8003bd2:	4293      	cmp	r3, r2
 8003bd4:	d004      	beq.n	8003be0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	4a15      	ldr	r2, [pc, #84]	; (8003c30 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 8003bdc:	4293      	cmp	r3, r2
 8003bde:	d10c      	bne.n	8003bfa <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003be0:	68bb      	ldr	r3, [r7, #8]
 8003be2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8003be6:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003be8:	683b      	ldr	r3, [r7, #0]
 8003bea:	689b      	ldr	r3, [r3, #8]
 8003bec:	68ba      	ldr	r2, [r7, #8]
 8003bee:	4313      	orrs	r3, r2
 8003bf0:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	68ba      	ldr	r2, [r7, #8]
 8003bf8:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2201      	movs	r2, #1
 8003bfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	2200      	movs	r2, #0
 8003c06:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8003c0a:	2300      	movs	r3, #0
}
 8003c0c:	4618      	mov	r0, r3
 8003c0e:	3714      	adds	r7, #20
 8003c10:	46bd      	mov	sp, r7
 8003c12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c16:	4770      	bx	lr
 8003c18:	40010000 	.word	0x40010000
 8003c1c:	40010400 	.word	0x40010400
 8003c20:	40000400 	.word	0x40000400
 8003c24:	40000800 	.word	0x40000800
 8003c28:	40000c00 	.word	0x40000c00
 8003c2c:	40014000 	.word	0x40014000
 8003c30:	40001800 	.word	0x40001800

08003c34 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b083      	sub	sp, #12
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003c3c:	bf00      	nop
 8003c3e:	370c      	adds	r7, #12
 8003c40:	46bd      	mov	sp, r7
 8003c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c46:	4770      	bx	lr

08003c48 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003c48:	b480      	push	{r7}
 8003c4a:	b083      	sub	sp, #12
 8003c4c:	af00      	add	r7, sp, #0
 8003c4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003c50:	bf00      	nop
 8003c52:	370c      	adds	r7, #12
 8003c54:	46bd      	mov	sp, r7
 8003c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c5a:	4770      	bx	lr

08003c5c <HAL_TIMEx_Break2Callback>:
  * @brief  Hall Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 8003c5c:	b480      	push	{r7}
 8003c5e:	b083      	sub	sp, #12
 8003c60:	af00      	add	r7, sp, #0
 8003c62:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 8003c64:	bf00      	nop
 8003c66:	370c      	adds	r7, #12
 8003c68:	46bd      	mov	sp, r7
 8003c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c6e:	4770      	bx	lr

08003c70 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003c70:	b580      	push	{r7, lr}
 8003c72:	b082      	sub	sp, #8
 8003c74:	af00      	add	r7, sp, #0
 8003c76:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d101      	bne.n	8003c82 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003c7e:	2301      	movs	r3, #1
 8003c80:	e040      	b.n	8003d04 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8003c86:	2b00      	cmp	r3, #0
 8003c88:	d106      	bne.n	8003c98 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	2200      	movs	r2, #0
 8003c8e:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f7fd f84e 	bl	8000d34 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	2224      	movs	r2, #36	; 0x24
 8003c9c:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f022 0201 	bic.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8003cae:	6878      	ldr	r0, [r7, #4]
 8003cb0:	f000 f82c 	bl	8003d0c <UART_SetConfig>
 8003cb4:	4603      	mov	r3, r0
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d101      	bne.n	8003cbe <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8003cba:	2301      	movs	r3, #1
 8003cbc:	e022      	b.n	8003d04 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cc2:	2b00      	cmp	r3, #0
 8003cc4:	d002      	beq.n	8003ccc <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8003cc6:	6878      	ldr	r0, [r7, #4]
 8003cc8:	f000 fa82 	bl	80041d0 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003ccc:	687b      	ldr	r3, [r7, #4]
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	685a      	ldr	r2, [r3, #4]
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003cda:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	689a      	ldr	r2, [r3, #8]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003cea:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	681a      	ldr	r2, [r3, #0]
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	681b      	ldr	r3, [r3, #0]
 8003cf6:	f042 0201 	orr.w	r2, r2, #1
 8003cfa:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8003cfc:	6878      	ldr	r0, [r7, #4]
 8003cfe:	f000 fb09 	bl	8004314 <UART_CheckIdleState>
 8003d02:	4603      	mov	r3, r0
}
 8003d04:	4618      	mov	r0, r3
 8003d06:	3708      	adds	r7, #8
 8003d08:	46bd      	mov	sp, r7
 8003d0a:	bd80      	pop	{r7, pc}

08003d0c <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8003d0c:	b580      	push	{r7, lr}
 8003d0e:	b088      	sub	sp, #32
 8003d10:	af00      	add	r7, sp, #0
 8003d12:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8003d14:	2300      	movs	r3, #0
 8003d16:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	689a      	ldr	r2, [r3, #8]
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	691b      	ldr	r3, [r3, #16]
 8003d20:	431a      	orrs	r2, r3
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	695b      	ldr	r3, [r3, #20]
 8003d26:	431a      	orrs	r2, r3
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	69db      	ldr	r3, [r3, #28]
 8003d2c:	4313      	orrs	r3, r2
 8003d2e:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	4ba7      	ldr	r3, [pc, #668]	; (8003fd4 <UART_SetConfig+0x2c8>)
 8003d38:	4013      	ands	r3, r2
 8003d3a:	687a      	ldr	r2, [r7, #4]
 8003d3c:	6812      	ldr	r2, [r2, #0]
 8003d3e:	6979      	ldr	r1, [r7, #20]
 8003d40:	430b      	orrs	r3, r1
 8003d42:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	685b      	ldr	r3, [r3, #4]
 8003d4a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	68da      	ldr	r2, [r3, #12]
 8003d52:	687b      	ldr	r3, [r7, #4]
 8003d54:	681b      	ldr	r3, [r3, #0]
 8003d56:	430a      	orrs	r2, r1
 8003d58:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	699b      	ldr	r3, [r3, #24]
 8003d5e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6a1b      	ldr	r3, [r3, #32]
 8003d64:	697a      	ldr	r2, [r7, #20]
 8003d66:	4313      	orrs	r3, r2
 8003d68:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	689b      	ldr	r3, [r3, #8]
 8003d70:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	697a      	ldr	r2, [r7, #20]
 8003d7a:	430a      	orrs	r2, r1
 8003d7c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	681b      	ldr	r3, [r3, #0]
 8003d82:	4a95      	ldr	r2, [pc, #596]	; (8003fd8 <UART_SetConfig+0x2cc>)
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d120      	bne.n	8003dca <UART_SetConfig+0xbe>
 8003d88:	4b94      	ldr	r3, [pc, #592]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003d8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d8e:	f003 0303 	and.w	r3, r3, #3
 8003d92:	2b03      	cmp	r3, #3
 8003d94:	d816      	bhi.n	8003dc4 <UART_SetConfig+0xb8>
 8003d96:	a201      	add	r2, pc, #4	; (adr r2, 8003d9c <UART_SetConfig+0x90>)
 8003d98:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d9c:	08003dad 	.word	0x08003dad
 8003da0:	08003db9 	.word	0x08003db9
 8003da4:	08003db3 	.word	0x08003db3
 8003da8:	08003dbf 	.word	0x08003dbf
 8003dac:	2301      	movs	r3, #1
 8003dae:	77fb      	strb	r3, [r7, #31]
 8003db0:	e14f      	b.n	8004052 <UART_SetConfig+0x346>
 8003db2:	2302      	movs	r3, #2
 8003db4:	77fb      	strb	r3, [r7, #31]
 8003db6:	e14c      	b.n	8004052 <UART_SetConfig+0x346>
 8003db8:	2304      	movs	r3, #4
 8003dba:	77fb      	strb	r3, [r7, #31]
 8003dbc:	e149      	b.n	8004052 <UART_SetConfig+0x346>
 8003dbe:	2308      	movs	r3, #8
 8003dc0:	77fb      	strb	r3, [r7, #31]
 8003dc2:	e146      	b.n	8004052 <UART_SetConfig+0x346>
 8003dc4:	2310      	movs	r3, #16
 8003dc6:	77fb      	strb	r3, [r7, #31]
 8003dc8:	e143      	b.n	8004052 <UART_SetConfig+0x346>
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	681b      	ldr	r3, [r3, #0]
 8003dce:	4a84      	ldr	r2, [pc, #528]	; (8003fe0 <UART_SetConfig+0x2d4>)
 8003dd0:	4293      	cmp	r3, r2
 8003dd2:	d132      	bne.n	8003e3a <UART_SetConfig+0x12e>
 8003dd4:	4b81      	ldr	r3, [pc, #516]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003dd6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003dda:	f003 030c 	and.w	r3, r3, #12
 8003dde:	2b0c      	cmp	r3, #12
 8003de0:	d828      	bhi.n	8003e34 <UART_SetConfig+0x128>
 8003de2:	a201      	add	r2, pc, #4	; (adr r2, 8003de8 <UART_SetConfig+0xdc>)
 8003de4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003de8:	08003e1d 	.word	0x08003e1d
 8003dec:	08003e35 	.word	0x08003e35
 8003df0:	08003e35 	.word	0x08003e35
 8003df4:	08003e35 	.word	0x08003e35
 8003df8:	08003e29 	.word	0x08003e29
 8003dfc:	08003e35 	.word	0x08003e35
 8003e00:	08003e35 	.word	0x08003e35
 8003e04:	08003e35 	.word	0x08003e35
 8003e08:	08003e23 	.word	0x08003e23
 8003e0c:	08003e35 	.word	0x08003e35
 8003e10:	08003e35 	.word	0x08003e35
 8003e14:	08003e35 	.word	0x08003e35
 8003e18:	08003e2f 	.word	0x08003e2f
 8003e1c:	2300      	movs	r3, #0
 8003e1e:	77fb      	strb	r3, [r7, #31]
 8003e20:	e117      	b.n	8004052 <UART_SetConfig+0x346>
 8003e22:	2302      	movs	r3, #2
 8003e24:	77fb      	strb	r3, [r7, #31]
 8003e26:	e114      	b.n	8004052 <UART_SetConfig+0x346>
 8003e28:	2304      	movs	r3, #4
 8003e2a:	77fb      	strb	r3, [r7, #31]
 8003e2c:	e111      	b.n	8004052 <UART_SetConfig+0x346>
 8003e2e:	2308      	movs	r3, #8
 8003e30:	77fb      	strb	r3, [r7, #31]
 8003e32:	e10e      	b.n	8004052 <UART_SetConfig+0x346>
 8003e34:	2310      	movs	r3, #16
 8003e36:	77fb      	strb	r3, [r7, #31]
 8003e38:	e10b      	b.n	8004052 <UART_SetConfig+0x346>
 8003e3a:	687b      	ldr	r3, [r7, #4]
 8003e3c:	681b      	ldr	r3, [r3, #0]
 8003e3e:	4a69      	ldr	r2, [pc, #420]	; (8003fe4 <UART_SetConfig+0x2d8>)
 8003e40:	4293      	cmp	r3, r2
 8003e42:	d120      	bne.n	8003e86 <UART_SetConfig+0x17a>
 8003e44:	4b65      	ldr	r3, [pc, #404]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003e46:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e4a:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8003e4e:	2b30      	cmp	r3, #48	; 0x30
 8003e50:	d013      	beq.n	8003e7a <UART_SetConfig+0x16e>
 8003e52:	2b30      	cmp	r3, #48	; 0x30
 8003e54:	d814      	bhi.n	8003e80 <UART_SetConfig+0x174>
 8003e56:	2b20      	cmp	r3, #32
 8003e58:	d009      	beq.n	8003e6e <UART_SetConfig+0x162>
 8003e5a:	2b20      	cmp	r3, #32
 8003e5c:	d810      	bhi.n	8003e80 <UART_SetConfig+0x174>
 8003e5e:	2b00      	cmp	r3, #0
 8003e60:	d002      	beq.n	8003e68 <UART_SetConfig+0x15c>
 8003e62:	2b10      	cmp	r3, #16
 8003e64:	d006      	beq.n	8003e74 <UART_SetConfig+0x168>
 8003e66:	e00b      	b.n	8003e80 <UART_SetConfig+0x174>
 8003e68:	2300      	movs	r3, #0
 8003e6a:	77fb      	strb	r3, [r7, #31]
 8003e6c:	e0f1      	b.n	8004052 <UART_SetConfig+0x346>
 8003e6e:	2302      	movs	r3, #2
 8003e70:	77fb      	strb	r3, [r7, #31]
 8003e72:	e0ee      	b.n	8004052 <UART_SetConfig+0x346>
 8003e74:	2304      	movs	r3, #4
 8003e76:	77fb      	strb	r3, [r7, #31]
 8003e78:	e0eb      	b.n	8004052 <UART_SetConfig+0x346>
 8003e7a:	2308      	movs	r3, #8
 8003e7c:	77fb      	strb	r3, [r7, #31]
 8003e7e:	e0e8      	b.n	8004052 <UART_SetConfig+0x346>
 8003e80:	2310      	movs	r3, #16
 8003e82:	77fb      	strb	r3, [r7, #31]
 8003e84:	e0e5      	b.n	8004052 <UART_SetConfig+0x346>
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	4a57      	ldr	r2, [pc, #348]	; (8003fe8 <UART_SetConfig+0x2dc>)
 8003e8c:	4293      	cmp	r3, r2
 8003e8e:	d120      	bne.n	8003ed2 <UART_SetConfig+0x1c6>
 8003e90:	4b52      	ldr	r3, [pc, #328]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003e92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003e96:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8003e9a:	2bc0      	cmp	r3, #192	; 0xc0
 8003e9c:	d013      	beq.n	8003ec6 <UART_SetConfig+0x1ba>
 8003e9e:	2bc0      	cmp	r3, #192	; 0xc0
 8003ea0:	d814      	bhi.n	8003ecc <UART_SetConfig+0x1c0>
 8003ea2:	2b80      	cmp	r3, #128	; 0x80
 8003ea4:	d009      	beq.n	8003eba <UART_SetConfig+0x1ae>
 8003ea6:	2b80      	cmp	r3, #128	; 0x80
 8003ea8:	d810      	bhi.n	8003ecc <UART_SetConfig+0x1c0>
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d002      	beq.n	8003eb4 <UART_SetConfig+0x1a8>
 8003eae:	2b40      	cmp	r3, #64	; 0x40
 8003eb0:	d006      	beq.n	8003ec0 <UART_SetConfig+0x1b4>
 8003eb2:	e00b      	b.n	8003ecc <UART_SetConfig+0x1c0>
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	77fb      	strb	r3, [r7, #31]
 8003eb8:	e0cb      	b.n	8004052 <UART_SetConfig+0x346>
 8003eba:	2302      	movs	r3, #2
 8003ebc:	77fb      	strb	r3, [r7, #31]
 8003ebe:	e0c8      	b.n	8004052 <UART_SetConfig+0x346>
 8003ec0:	2304      	movs	r3, #4
 8003ec2:	77fb      	strb	r3, [r7, #31]
 8003ec4:	e0c5      	b.n	8004052 <UART_SetConfig+0x346>
 8003ec6:	2308      	movs	r3, #8
 8003ec8:	77fb      	strb	r3, [r7, #31]
 8003eca:	e0c2      	b.n	8004052 <UART_SetConfig+0x346>
 8003ecc:	2310      	movs	r3, #16
 8003ece:	77fb      	strb	r3, [r7, #31]
 8003ed0:	e0bf      	b.n	8004052 <UART_SetConfig+0x346>
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	681b      	ldr	r3, [r3, #0]
 8003ed6:	4a45      	ldr	r2, [pc, #276]	; (8003fec <UART_SetConfig+0x2e0>)
 8003ed8:	4293      	cmp	r3, r2
 8003eda:	d125      	bne.n	8003f28 <UART_SetConfig+0x21c>
 8003edc:	4b3f      	ldr	r3, [pc, #252]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003ede:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ee2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003ee6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003eea:	d017      	beq.n	8003f1c <UART_SetConfig+0x210>
 8003eec:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003ef0:	d817      	bhi.n	8003f22 <UART_SetConfig+0x216>
 8003ef2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003ef6:	d00b      	beq.n	8003f10 <UART_SetConfig+0x204>
 8003ef8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003efc:	d811      	bhi.n	8003f22 <UART_SetConfig+0x216>
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d003      	beq.n	8003f0a <UART_SetConfig+0x1fe>
 8003f02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8003f06:	d006      	beq.n	8003f16 <UART_SetConfig+0x20a>
 8003f08:	e00b      	b.n	8003f22 <UART_SetConfig+0x216>
 8003f0a:	2300      	movs	r3, #0
 8003f0c:	77fb      	strb	r3, [r7, #31]
 8003f0e:	e0a0      	b.n	8004052 <UART_SetConfig+0x346>
 8003f10:	2302      	movs	r3, #2
 8003f12:	77fb      	strb	r3, [r7, #31]
 8003f14:	e09d      	b.n	8004052 <UART_SetConfig+0x346>
 8003f16:	2304      	movs	r3, #4
 8003f18:	77fb      	strb	r3, [r7, #31]
 8003f1a:	e09a      	b.n	8004052 <UART_SetConfig+0x346>
 8003f1c:	2308      	movs	r3, #8
 8003f1e:	77fb      	strb	r3, [r7, #31]
 8003f20:	e097      	b.n	8004052 <UART_SetConfig+0x346>
 8003f22:	2310      	movs	r3, #16
 8003f24:	77fb      	strb	r3, [r7, #31]
 8003f26:	e094      	b.n	8004052 <UART_SetConfig+0x346>
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	4a30      	ldr	r2, [pc, #192]	; (8003ff0 <UART_SetConfig+0x2e4>)
 8003f2e:	4293      	cmp	r3, r2
 8003f30:	d125      	bne.n	8003f7e <UART_SetConfig+0x272>
 8003f32:	4b2a      	ldr	r3, [pc, #168]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003f34:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f38:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8003f3c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f40:	d017      	beq.n	8003f72 <UART_SetConfig+0x266>
 8003f42:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8003f46:	d817      	bhi.n	8003f78 <UART_SetConfig+0x26c>
 8003f48:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f4c:	d00b      	beq.n	8003f66 <UART_SetConfig+0x25a>
 8003f4e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003f52:	d811      	bhi.n	8003f78 <UART_SetConfig+0x26c>
 8003f54:	2b00      	cmp	r3, #0
 8003f56:	d003      	beq.n	8003f60 <UART_SetConfig+0x254>
 8003f58:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8003f5c:	d006      	beq.n	8003f6c <UART_SetConfig+0x260>
 8003f5e:	e00b      	b.n	8003f78 <UART_SetConfig+0x26c>
 8003f60:	2301      	movs	r3, #1
 8003f62:	77fb      	strb	r3, [r7, #31]
 8003f64:	e075      	b.n	8004052 <UART_SetConfig+0x346>
 8003f66:	2302      	movs	r3, #2
 8003f68:	77fb      	strb	r3, [r7, #31]
 8003f6a:	e072      	b.n	8004052 <UART_SetConfig+0x346>
 8003f6c:	2304      	movs	r3, #4
 8003f6e:	77fb      	strb	r3, [r7, #31]
 8003f70:	e06f      	b.n	8004052 <UART_SetConfig+0x346>
 8003f72:	2308      	movs	r3, #8
 8003f74:	77fb      	strb	r3, [r7, #31]
 8003f76:	e06c      	b.n	8004052 <UART_SetConfig+0x346>
 8003f78:	2310      	movs	r3, #16
 8003f7a:	77fb      	strb	r3, [r7, #31]
 8003f7c:	e069      	b.n	8004052 <UART_SetConfig+0x346>
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	4a1c      	ldr	r2, [pc, #112]	; (8003ff4 <UART_SetConfig+0x2e8>)
 8003f84:	4293      	cmp	r3, r2
 8003f86:	d137      	bne.n	8003ff8 <UART_SetConfig+0x2ec>
 8003f88:	4b14      	ldr	r3, [pc, #80]	; (8003fdc <UART_SetConfig+0x2d0>)
 8003f8a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003f8e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8003f92:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f96:	d017      	beq.n	8003fc8 <UART_SetConfig+0x2bc>
 8003f98:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8003f9c:	d817      	bhi.n	8003fce <UART_SetConfig+0x2c2>
 8003f9e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa2:	d00b      	beq.n	8003fbc <UART_SetConfig+0x2b0>
 8003fa4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003fa8:	d811      	bhi.n	8003fce <UART_SetConfig+0x2c2>
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d003      	beq.n	8003fb6 <UART_SetConfig+0x2aa>
 8003fae:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003fb2:	d006      	beq.n	8003fc2 <UART_SetConfig+0x2b6>
 8003fb4:	e00b      	b.n	8003fce <UART_SetConfig+0x2c2>
 8003fb6:	2300      	movs	r3, #0
 8003fb8:	77fb      	strb	r3, [r7, #31]
 8003fba:	e04a      	b.n	8004052 <UART_SetConfig+0x346>
 8003fbc:	2302      	movs	r3, #2
 8003fbe:	77fb      	strb	r3, [r7, #31]
 8003fc0:	e047      	b.n	8004052 <UART_SetConfig+0x346>
 8003fc2:	2304      	movs	r3, #4
 8003fc4:	77fb      	strb	r3, [r7, #31]
 8003fc6:	e044      	b.n	8004052 <UART_SetConfig+0x346>
 8003fc8:	2308      	movs	r3, #8
 8003fca:	77fb      	strb	r3, [r7, #31]
 8003fcc:	e041      	b.n	8004052 <UART_SetConfig+0x346>
 8003fce:	2310      	movs	r3, #16
 8003fd0:	77fb      	strb	r3, [r7, #31]
 8003fd2:	e03e      	b.n	8004052 <UART_SetConfig+0x346>
 8003fd4:	efff69f3 	.word	0xefff69f3
 8003fd8:	40011000 	.word	0x40011000
 8003fdc:	40023800 	.word	0x40023800
 8003fe0:	40004400 	.word	0x40004400
 8003fe4:	40004800 	.word	0x40004800
 8003fe8:	40004c00 	.word	0x40004c00
 8003fec:	40005000 	.word	0x40005000
 8003ff0:	40011400 	.word	0x40011400
 8003ff4:	40007800 	.word	0x40007800
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	4a71      	ldr	r2, [pc, #452]	; (80041c4 <UART_SetConfig+0x4b8>)
 8003ffe:	4293      	cmp	r3, r2
 8004000:	d125      	bne.n	800404e <UART_SetConfig+0x342>
 8004002:	4b71      	ldr	r3, [pc, #452]	; (80041c8 <UART_SetConfig+0x4bc>)
 8004004:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004008:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800400c:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004010:	d017      	beq.n	8004042 <UART_SetConfig+0x336>
 8004012:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004016:	d817      	bhi.n	8004048 <UART_SetConfig+0x33c>
 8004018:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800401c:	d00b      	beq.n	8004036 <UART_SetConfig+0x32a>
 800401e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004022:	d811      	bhi.n	8004048 <UART_SetConfig+0x33c>
 8004024:	2b00      	cmp	r3, #0
 8004026:	d003      	beq.n	8004030 <UART_SetConfig+0x324>
 8004028:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800402c:	d006      	beq.n	800403c <UART_SetConfig+0x330>
 800402e:	e00b      	b.n	8004048 <UART_SetConfig+0x33c>
 8004030:	2300      	movs	r3, #0
 8004032:	77fb      	strb	r3, [r7, #31]
 8004034:	e00d      	b.n	8004052 <UART_SetConfig+0x346>
 8004036:	2302      	movs	r3, #2
 8004038:	77fb      	strb	r3, [r7, #31]
 800403a:	e00a      	b.n	8004052 <UART_SetConfig+0x346>
 800403c:	2304      	movs	r3, #4
 800403e:	77fb      	strb	r3, [r7, #31]
 8004040:	e007      	b.n	8004052 <UART_SetConfig+0x346>
 8004042:	2308      	movs	r3, #8
 8004044:	77fb      	strb	r3, [r7, #31]
 8004046:	e004      	b.n	8004052 <UART_SetConfig+0x346>
 8004048:	2310      	movs	r3, #16
 800404a:	77fb      	strb	r3, [r7, #31]
 800404c:	e001      	b.n	8004052 <UART_SetConfig+0x346>
 800404e:	2310      	movs	r3, #16
 8004050:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	69db      	ldr	r3, [r3, #28]
 8004056:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800405a:	d15b      	bne.n	8004114 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 800405c:	7ffb      	ldrb	r3, [r7, #31]
 800405e:	2b08      	cmp	r3, #8
 8004060:	d827      	bhi.n	80040b2 <UART_SetConfig+0x3a6>
 8004062:	a201      	add	r2, pc, #4	; (adr r2, 8004068 <UART_SetConfig+0x35c>)
 8004064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004068:	0800408d 	.word	0x0800408d
 800406c:	08004095 	.word	0x08004095
 8004070:	0800409d 	.word	0x0800409d
 8004074:	080040b3 	.word	0x080040b3
 8004078:	080040a3 	.word	0x080040a3
 800407c:	080040b3 	.word	0x080040b3
 8004080:	080040b3 	.word	0x080040b3
 8004084:	080040b3 	.word	0x080040b3
 8004088:	080040ab 	.word	0x080040ab
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800408c:	f7fe fd14 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004090:	61b8      	str	r0, [r7, #24]
        break;
 8004092:	e013      	b.n	80040bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004094:	f7fe fd24 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8004098:	61b8      	str	r0, [r7, #24]
        break;
 800409a:	e00f      	b.n	80040bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800409c:	4b4b      	ldr	r3, [pc, #300]	; (80041cc <UART_SetConfig+0x4c0>)
 800409e:	61bb      	str	r3, [r7, #24]
        break;
 80040a0:	e00c      	b.n	80040bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80040a2:	f7fe fc1b 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 80040a6:	61b8      	str	r0, [r7, #24]
        break;
 80040a8:	e008      	b.n	80040bc <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80040aa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80040ae:	61bb      	str	r3, [r7, #24]
        break;
 80040b0:	e004      	b.n	80040bc <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 80040b2:	2300      	movs	r3, #0
 80040b4:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 80040b6:	2301      	movs	r3, #1
 80040b8:	77bb      	strb	r3, [r7, #30]
        break;
 80040ba:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80040bc:	69bb      	ldr	r3, [r7, #24]
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d074      	beq.n	80041ac <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80040c2:	69bb      	ldr	r3, [r7, #24]
 80040c4:	005a      	lsls	r2, r3, #1
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	685b      	ldr	r3, [r3, #4]
 80040ca:	085b      	lsrs	r3, r3, #1
 80040cc:	441a      	add	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	685b      	ldr	r3, [r3, #4]
 80040d2:	fbb2 f3f3 	udiv	r3, r2, r3
 80040d6:	b29b      	uxth	r3, r3
 80040d8:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80040da:	693b      	ldr	r3, [r7, #16]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d916      	bls.n	800410e <UART_SetConfig+0x402>
 80040e0:	693b      	ldr	r3, [r7, #16]
 80040e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80040e6:	d212      	bcs.n	800410e <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80040e8:	693b      	ldr	r3, [r7, #16]
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	f023 030f 	bic.w	r3, r3, #15
 80040f0:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80040f2:	693b      	ldr	r3, [r7, #16]
 80040f4:	085b      	lsrs	r3, r3, #1
 80040f6:	b29b      	uxth	r3, r3
 80040f8:	f003 0307 	and.w	r3, r3, #7
 80040fc:	b29a      	uxth	r2, r3
 80040fe:	89fb      	ldrh	r3, [r7, #14]
 8004100:	4313      	orrs	r3, r2
 8004102:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	681b      	ldr	r3, [r3, #0]
 8004108:	89fa      	ldrh	r2, [r7, #14]
 800410a:	60da      	str	r2, [r3, #12]
 800410c:	e04e      	b.n	80041ac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800410e:	2301      	movs	r3, #1
 8004110:	77bb      	strb	r3, [r7, #30]
 8004112:	e04b      	b.n	80041ac <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 8004114:	7ffb      	ldrb	r3, [r7, #31]
 8004116:	2b08      	cmp	r3, #8
 8004118:	d827      	bhi.n	800416a <UART_SetConfig+0x45e>
 800411a:	a201      	add	r2, pc, #4	; (adr r2, 8004120 <UART_SetConfig+0x414>)
 800411c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004120:	08004145 	.word	0x08004145
 8004124:	0800414d 	.word	0x0800414d
 8004128:	08004155 	.word	0x08004155
 800412c:	0800416b 	.word	0x0800416b
 8004130:	0800415b 	.word	0x0800415b
 8004134:	0800416b 	.word	0x0800416b
 8004138:	0800416b 	.word	0x0800416b
 800413c:	0800416b 	.word	0x0800416b
 8004140:	08004163 	.word	0x08004163
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004144:	f7fe fcb8 	bl	8002ab8 <HAL_RCC_GetPCLK1Freq>
 8004148:	61b8      	str	r0, [r7, #24]
        break;
 800414a:	e013      	b.n	8004174 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800414c:	f7fe fcc8 	bl	8002ae0 <HAL_RCC_GetPCLK2Freq>
 8004150:	61b8      	str	r0, [r7, #24]
        break;
 8004152:	e00f      	b.n	8004174 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004154:	4b1d      	ldr	r3, [pc, #116]	; (80041cc <UART_SetConfig+0x4c0>)
 8004156:	61bb      	str	r3, [r7, #24]
        break;
 8004158:	e00c      	b.n	8004174 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800415a:	f7fe fbbf 	bl	80028dc <HAL_RCC_GetSysClockFreq>
 800415e:	61b8      	str	r0, [r7, #24]
        break;
 8004160:	e008      	b.n	8004174 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004162:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004166:	61bb      	str	r3, [r7, #24]
        break;
 8004168:	e004      	b.n	8004174 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800416a:	2300      	movs	r3, #0
 800416c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800416e:	2301      	movs	r3, #1
 8004170:	77bb      	strb	r3, [r7, #30]
        break;
 8004172:	bf00      	nop
    }

    if (pclk != 0U)
 8004174:	69bb      	ldr	r3, [r7, #24]
 8004176:	2b00      	cmp	r3, #0
 8004178:	d018      	beq.n	80041ac <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	685b      	ldr	r3, [r3, #4]
 800417e:	085a      	lsrs	r2, r3, #1
 8004180:	69bb      	ldr	r3, [r7, #24]
 8004182:	441a      	add	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	685b      	ldr	r3, [r3, #4]
 8004188:	fbb2 f3f3 	udiv	r3, r2, r3
 800418c:	b29b      	uxth	r3, r3
 800418e:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004190:	693b      	ldr	r3, [r7, #16]
 8004192:	2b0f      	cmp	r3, #15
 8004194:	d908      	bls.n	80041a8 <UART_SetConfig+0x49c>
 8004196:	693b      	ldr	r3, [r7, #16]
 8004198:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800419c:	d204      	bcs.n	80041a8 <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	693a      	ldr	r2, [r7, #16]
 80041a4:	60da      	str	r2, [r3, #12]
 80041a6:	e001      	b.n	80041ac <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80041a8:	2301      	movs	r3, #1
 80041aa:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	2200      	movs	r2, #0
 80041b0:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	2200      	movs	r2, #0
 80041b6:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 80041b8:	7fbb      	ldrb	r3, [r7, #30]
}
 80041ba:	4618      	mov	r0, r3
 80041bc:	3720      	adds	r7, #32
 80041be:	46bd      	mov	sp, r7
 80041c0:	bd80      	pop	{r7, pc}
 80041c2:	bf00      	nop
 80041c4:	40007c00 	.word	0x40007c00
 80041c8:	40023800 	.word	0x40023800
 80041cc:	00f42400 	.word	0x00f42400

080041d0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80041d0:	b480      	push	{r7}
 80041d2:	b083      	sub	sp, #12
 80041d4:	af00      	add	r7, sp, #0
 80041d6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041dc:	f003 0301 	and.w	r3, r3, #1
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d00a      	beq.n	80041fa <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	685b      	ldr	r3, [r3, #4]
 80041ea:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	430a      	orrs	r2, r1
 80041f8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041fe:	f003 0302 	and.w	r3, r3, #2
 8004202:	2b00      	cmp	r3, #0
 8004204:	d00a      	beq.n	800421c <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8004206:	687b      	ldr	r3, [r7, #4]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	685b      	ldr	r3, [r3, #4]
 800420c:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	430a      	orrs	r2, r1
 800421a:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004220:	f003 0304 	and.w	r3, r3, #4
 8004224:	2b00      	cmp	r3, #0
 8004226:	d00a      	beq.n	800423e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	685b      	ldr	r3, [r3, #4]
 800422e:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	430a      	orrs	r2, r1
 800423c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004242:	f003 0308 	and.w	r3, r3, #8
 8004246:	2b00      	cmp	r3, #0
 8004248:	d00a      	beq.n	8004260 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800424a:	687b      	ldr	r3, [r7, #4]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	685b      	ldr	r3, [r3, #4]
 8004250:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	430a      	orrs	r2, r1
 800425e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004260:	687b      	ldr	r3, [r7, #4]
 8004262:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004264:	f003 0310 	and.w	r3, r3, #16
 8004268:	2b00      	cmp	r3, #0
 800426a:	d00a      	beq.n	8004282 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	689b      	ldr	r3, [r3, #8]
 8004272:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004276:	687b      	ldr	r3, [r7, #4]
 8004278:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800427a:	687b      	ldr	r3, [r7, #4]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	430a      	orrs	r2, r1
 8004280:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004282:	687b      	ldr	r3, [r7, #4]
 8004284:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004286:	f003 0320 	and.w	r3, r3, #32
 800428a:	2b00      	cmp	r3, #0
 800428c:	d00a      	beq.n	80042a4 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	681b      	ldr	r3, [r3, #0]
 8004292:	689b      	ldr	r3, [r3, #8]
 8004294:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	430a      	orrs	r2, r1
 80042a2:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d01a      	beq.n	80042e6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	685b      	ldr	r3, [r3, #4]
 80042b6:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	681b      	ldr	r3, [r3, #0]
 80042c2:	430a      	orrs	r2, r1
 80042c4:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80042ca:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80042ce:	d10a      	bne.n	80042e6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	685b      	ldr	r3, [r3, #4]
 80042d6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	681b      	ldr	r3, [r3, #0]
 80042e2:	430a      	orrs	r2, r1
 80042e4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80042ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042ee:	2b00      	cmp	r3, #0
 80042f0:	d00a      	beq.n	8004308 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	681b      	ldr	r3, [r3, #0]
 80042f6:	685b      	ldr	r3, [r3, #4]
 80042f8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004300:	687b      	ldr	r3, [r7, #4]
 8004302:	681b      	ldr	r3, [r3, #0]
 8004304:	430a      	orrs	r2, r1
 8004306:	605a      	str	r2, [r3, #4]
  }
}
 8004308:	bf00      	nop
 800430a:	370c      	adds	r7, #12
 800430c:	46bd      	mov	sp, r7
 800430e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004312:	4770      	bx	lr

08004314 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004314:	b580      	push	{r7, lr}
 8004316:	b086      	sub	sp, #24
 8004318:	af02      	add	r7, sp, #8
 800431a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	2200      	movs	r2, #0
 8004320:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004324:	f7fc fe66 	bl	8000ff4 <HAL_GetTick>
 8004328:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	681b      	ldr	r3, [r3, #0]
 8004330:	f003 0308 	and.w	r3, r3, #8
 8004334:	2b08      	cmp	r3, #8
 8004336:	d10e      	bne.n	8004356 <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004338:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800433c:	9300      	str	r3, [sp, #0]
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2200      	movs	r2, #0
 8004342:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004346:	6878      	ldr	r0, [r7, #4]
 8004348:	f000 f817 	bl	800437a <UART_WaitOnFlagUntilTimeout>
 800434c:	4603      	mov	r3, r0
 800434e:	2b00      	cmp	r3, #0
 8004350:	d001      	beq.n	8004356 <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004352:	2303      	movs	r3, #3
 8004354:	e00d      	b.n	8004372 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004356:	687b      	ldr	r3, [r7, #4]
 8004358:	2220      	movs	r2, #32
 800435a:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 800435c:	687b      	ldr	r3, [r7, #4]
 800435e:	2220      	movs	r2, #32
 8004360:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	2200      	movs	r2, #0
 8004366:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	2200      	movs	r2, #0
 800436c:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004370:	2300      	movs	r3, #0
}
 8004372:	4618      	mov	r0, r3
 8004374:	3710      	adds	r7, #16
 8004376:	46bd      	mov	sp, r7
 8004378:	bd80      	pop	{r7, pc}

0800437a <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800437a:	b580      	push	{r7, lr}
 800437c:	b084      	sub	sp, #16
 800437e:	af00      	add	r7, sp, #0
 8004380:	60f8      	str	r0, [r7, #12]
 8004382:	60b9      	str	r1, [r7, #8]
 8004384:	603b      	str	r3, [r7, #0]
 8004386:	4613      	mov	r3, r2
 8004388:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800438a:	e05e      	b.n	800444a <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800438c:	69bb      	ldr	r3, [r7, #24]
 800438e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004392:	d05a      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004394:	f7fc fe2e 	bl	8000ff4 <HAL_GetTick>
 8004398:	4602      	mov	r2, r0
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	1ad3      	subs	r3, r2, r3
 800439e:	69ba      	ldr	r2, [r7, #24]
 80043a0:	429a      	cmp	r2, r3
 80043a2:	d302      	bcc.n	80043aa <UART_WaitOnFlagUntilTimeout+0x30>
 80043a4:	69bb      	ldr	r3, [r7, #24]
 80043a6:	2b00      	cmp	r3, #0
 80043a8:	d11b      	bne.n	80043e2 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	681a      	ldr	r2, [r3, #0]
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 80043b8:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	689a      	ldr	r2, [r3, #8]
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	f022 0201 	bic.w	r2, r2, #1
 80043c8:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	2220      	movs	r2, #32
 80043ce:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80043d0:	68fb      	ldr	r3, [r7, #12]
 80043d2:	2220      	movs	r2, #32
 80043d4:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80043d6:	68fb      	ldr	r3, [r7, #12]
 80043d8:	2200      	movs	r2, #0
 80043da:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80043de:	2303      	movs	r3, #3
 80043e0:	e043      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f003 0304 	and.w	r3, r3, #4
 80043ec:	2b00      	cmp	r3, #0
 80043ee:	d02c      	beq.n	800444a <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80043f0:	68fb      	ldr	r3, [r7, #12]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	69db      	ldr	r3, [r3, #28]
 80043f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80043fe:	d124      	bne.n	800444a <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	681b      	ldr	r3, [r3, #0]
 8004404:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004408:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004418:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	689a      	ldr	r2, [r3, #8]
 8004420:	68fb      	ldr	r3, [r7, #12]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f022 0201 	bic.w	r2, r2, #1
 8004428:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	2220      	movs	r2, #32
 800442e:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004430:	68fb      	ldr	r3, [r7, #12]
 8004432:	2220      	movs	r2, #32
 8004434:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	2220      	movs	r2, #32
 800443a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	2200      	movs	r2, #0
 8004442:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004446:	2303      	movs	r3, #3
 8004448:	e00f      	b.n	800446a <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	681b      	ldr	r3, [r3, #0]
 800444e:	69da      	ldr	r2, [r3, #28]
 8004450:	68bb      	ldr	r3, [r7, #8]
 8004452:	4013      	ands	r3, r2
 8004454:	68ba      	ldr	r2, [r7, #8]
 8004456:	429a      	cmp	r2, r3
 8004458:	bf0c      	ite	eq
 800445a:	2301      	moveq	r3, #1
 800445c:	2300      	movne	r3, #0
 800445e:	b2db      	uxtb	r3, r3
 8004460:	461a      	mov	r2, r3
 8004462:	79fb      	ldrb	r3, [r7, #7]
 8004464:	429a      	cmp	r2, r3
 8004466:	d091      	beq.n	800438c <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004468:	2300      	movs	r3, #0
}
 800446a:	4618      	mov	r0, r3
 800446c:	3710      	adds	r7, #16
 800446e:	46bd      	mov	sp, r7
 8004470:	bd80      	pop	{r7, pc}
	...

08004474 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004474:	b084      	sub	sp, #16
 8004476:	b580      	push	{r7, lr}
 8004478:	b084      	sub	sp, #16
 800447a:	af00      	add	r7, sp, #0
 800447c:	6078      	str	r0, [r7, #4]
 800447e:	f107 001c 	add.w	r0, r7, #28
 8004482:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004488:	2b01      	cmp	r3, #1
 800448a:	d120      	bne.n	80044ce <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004490:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	68da      	ldr	r2, [r3, #12]
 800449c:	4b20      	ldr	r3, [pc, #128]	; (8004520 <USB_CoreInit+0xac>)
 800449e:	4013      	ands	r3, r2
 80044a0:	687a      	ldr	r2, [r7, #4]
 80044a2:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	68db      	ldr	r3, [r3, #12]
 80044a8:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 80044b0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80044b2:	2b01      	cmp	r3, #1
 80044b4:	d105      	bne.n	80044c2 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	68db      	ldr	r3, [r3, #12]
 80044ba:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 80044c2:	6878      	ldr	r0, [r7, #4]
 80044c4:	f000 fa5a 	bl	800497c <USB_CoreReset>
 80044c8:	4603      	mov	r3, r0
 80044ca:	73fb      	strb	r3, [r7, #15]
 80044cc:	e010      	b.n	80044f0 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68db      	ldr	r3, [r3, #12]
 80044d2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 80044da:	6878      	ldr	r0, [r7, #4]
 80044dc:	f000 fa4e 	bl	800497c <USB_CoreReset>
 80044e0:	4603      	mov	r3, r0
 80044e2:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80044e8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 80044f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80044f2:	2b01      	cmp	r3, #1
 80044f4:	d10b      	bne.n	800450e <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	689b      	ldr	r3, [r3, #8]
 80044fa:	f043 0206 	orr.w	r2, r3, #6
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f043 0220 	orr.w	r2, r3, #32
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	609a      	str	r2, [r3, #8]
  }

  return ret;
 800450e:	7bfb      	ldrb	r3, [r7, #15]
}
 8004510:	4618      	mov	r0, r3
 8004512:	3710      	adds	r7, #16
 8004514:	46bd      	mov	sp, r7
 8004516:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800451a:	b004      	add	sp, #16
 800451c:	4770      	bx	lr
 800451e:	bf00      	nop
 8004520:	ffbdffbf 	.word	0xffbdffbf

08004524 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004524:	b480      	push	{r7}
 8004526:	b083      	sub	sp, #12
 8004528:	af00      	add	r7, sp, #0
 800452a:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	689b      	ldr	r3, [r3, #8]
 8004530:	f023 0201 	bic.w	r2, r3, #1
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004538:	2300      	movs	r3, #0
}
 800453a:	4618      	mov	r0, r3
 800453c:	370c      	adds	r7, #12
 800453e:	46bd      	mov	sp, r7
 8004540:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004544:	4770      	bx	lr

08004546 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004546:	b580      	push	{r7, lr}
 8004548:	b082      	sub	sp, #8
 800454a:	af00      	add	r7, sp, #0
 800454c:	6078      	str	r0, [r7, #4]
 800454e:	460b      	mov	r3, r1
 8004550:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	68db      	ldr	r3, [r3, #12]
 8004556:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800455e:	78fb      	ldrb	r3, [r7, #3]
 8004560:	2b01      	cmp	r3, #1
 8004562:	d106      	bne.n	8004572 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	68db      	ldr	r3, [r3, #12]
 8004568:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	60da      	str	r2, [r3, #12]
 8004570:	e00b      	b.n	800458a <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004572:	78fb      	ldrb	r3, [r7, #3]
 8004574:	2b00      	cmp	r3, #0
 8004576:	d106      	bne.n	8004586 <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	60da      	str	r2, [r3, #12]
 8004584:	e001      	b.n	800458a <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004586:	2301      	movs	r3, #1
 8004588:	e003      	b.n	8004592 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 800458a:	2032      	movs	r0, #50	; 0x32
 800458c:	f7fc fd3e 	bl	800100c <HAL_Delay>

  return HAL_OK;
 8004590:	2300      	movs	r3, #0
}
 8004592:	4618      	mov	r0, r3
 8004594:	3708      	adds	r7, #8
 8004596:	46bd      	mov	sp, r7
 8004598:	bd80      	pop	{r7, pc}
	...

0800459c <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 800459c:	b084      	sub	sp, #16
 800459e:	b580      	push	{r7, lr}
 80045a0:	b086      	sub	sp, #24
 80045a2:	af00      	add	r7, sp, #0
 80045a4:	6078      	str	r0, [r7, #4]
 80045a6:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80045aa:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 80045ae:	2300      	movs	r3, #0
 80045b0:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 80045b6:	2300      	movs	r3, #0
 80045b8:	613b      	str	r3, [r7, #16]
 80045ba:	e009      	b.n	80045d0 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 80045bc:	687a      	ldr	r2, [r7, #4]
 80045be:	693b      	ldr	r3, [r7, #16]
 80045c0:	3340      	adds	r3, #64	; 0x40
 80045c2:	009b      	lsls	r3, r3, #2
 80045c4:	4413      	add	r3, r2
 80045c6:	2200      	movs	r2, #0
 80045c8:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 80045ca:	693b      	ldr	r3, [r7, #16]
 80045cc:	3301      	adds	r3, #1
 80045ce:	613b      	str	r3, [r7, #16]
 80045d0:	693b      	ldr	r3, [r7, #16]
 80045d2:	2b0e      	cmp	r3, #14
 80045d4:	d9f2      	bls.n	80045bc <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 80045d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80045d8:	2b00      	cmp	r3, #0
 80045da:	d11c      	bne.n	8004616 <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80045e2:	685b      	ldr	r3, [r3, #4]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 80045ea:	f043 0302 	orr.w	r3, r3, #2
 80045ee:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80045f4:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004604:	687b      	ldr	r3, [r7, #4]
 8004606:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	681b      	ldr	r3, [r3, #0]
 800460c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	601a      	str	r2, [r3, #0]
 8004614:	e005      	b.n	8004622 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800461a:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004628:	461a      	mov	r2, r3
 800462a:	2300      	movs	r3, #0
 800462c:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 800462e:	68fb      	ldr	r3, [r7, #12]
 8004630:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004634:	4619      	mov	r1, r3
 8004636:	68fb      	ldr	r3, [r7, #12]
 8004638:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800463c:	461a      	mov	r2, r3
 800463e:	680b      	ldr	r3, [r1, #0]
 8004640:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004642:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004644:	2b01      	cmp	r3, #1
 8004646:	d10c      	bne.n	8004662 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800464a:	2b00      	cmp	r3, #0
 800464c:	d104      	bne.n	8004658 <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800464e:	2100      	movs	r1, #0
 8004650:	6878      	ldr	r0, [r7, #4]
 8004652:	f000 f959 	bl	8004908 <USB_SetDevSpeed>
 8004656:	e018      	b.n	800468a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004658:	2101      	movs	r1, #1
 800465a:	6878      	ldr	r0, [r7, #4]
 800465c:	f000 f954 	bl	8004908 <USB_SetDevSpeed>
 8004660:	e013      	b.n	800468a <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b03      	cmp	r3, #3
 8004666:	d10c      	bne.n	8004682 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800466a:	2b00      	cmp	r3, #0
 800466c:	d104      	bne.n	8004678 <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 800466e:	2100      	movs	r1, #0
 8004670:	6878      	ldr	r0, [r7, #4]
 8004672:	f000 f949 	bl	8004908 <USB_SetDevSpeed>
 8004676:	e008      	b.n	800468a <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004678:	2101      	movs	r1, #1
 800467a:	6878      	ldr	r0, [r7, #4]
 800467c:	f000 f944 	bl	8004908 <USB_SetDevSpeed>
 8004680:	e003      	b.n	800468a <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004682:	2103      	movs	r1, #3
 8004684:	6878      	ldr	r0, [r7, #4]
 8004686:	f000 f93f 	bl	8004908 <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 800468a:	2110      	movs	r1, #16
 800468c:	6878      	ldr	r0, [r7, #4]
 800468e:	f000 f8f3 	bl	8004878 <USB_FlushTxFifo>
 8004692:	4603      	mov	r3, r0
 8004694:	2b00      	cmp	r3, #0
 8004696:	d001      	beq.n	800469c <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 800469c:	6878      	ldr	r0, [r7, #4]
 800469e:	f000 f911 	bl	80048c4 <USB_FlushRxFifo>
 80046a2:	4603      	mov	r3, r0
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d001      	beq.n	80046ac <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 80046ac:	68fb      	ldr	r3, [r7, #12]
 80046ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046b2:	461a      	mov	r2, r3
 80046b4:	2300      	movs	r3, #0
 80046b6:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 80046b8:	68fb      	ldr	r3, [r7, #12]
 80046ba:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046be:	461a      	mov	r2, r3
 80046c0:	2300      	movs	r3, #0
 80046c2:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80046ca:	461a      	mov	r2, r3
 80046cc:	2300      	movs	r3, #0
 80046ce:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 80046d0:	2300      	movs	r3, #0
 80046d2:	613b      	str	r3, [r7, #16]
 80046d4:	e043      	b.n	800475e <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 80046d6:	693b      	ldr	r3, [r7, #16]
 80046d8:	015a      	lsls	r2, r3, #5
 80046da:	68fb      	ldr	r3, [r7, #12]
 80046dc:	4413      	add	r3, r2
 80046de:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 80046e2:	681b      	ldr	r3, [r3, #0]
 80046e4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80046e8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80046ec:	d118      	bne.n	8004720 <USB_DevInit+0x184>
    {
      if (i == 0U)
 80046ee:	693b      	ldr	r3, [r7, #16]
 80046f0:	2b00      	cmp	r3, #0
 80046f2:	d10a      	bne.n	800470a <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 80046f4:	693b      	ldr	r3, [r7, #16]
 80046f6:	015a      	lsls	r2, r3, #5
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	4413      	add	r3, r2
 80046fc:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004700:	461a      	mov	r2, r3
 8004702:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004706:	6013      	str	r3, [r2, #0]
 8004708:	e013      	b.n	8004732 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 800470a:	693b      	ldr	r3, [r7, #16]
 800470c:	015a      	lsls	r2, r3, #5
 800470e:	68fb      	ldr	r3, [r7, #12]
 8004710:	4413      	add	r3, r2
 8004712:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004716:	461a      	mov	r2, r3
 8004718:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 800471c:	6013      	str	r3, [r2, #0]
 800471e:	e008      	b.n	8004732 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004720:	693b      	ldr	r3, [r7, #16]
 8004722:	015a      	lsls	r2, r3, #5
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	4413      	add	r3, r2
 8004728:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800472c:	461a      	mov	r2, r3
 800472e:	2300      	movs	r3, #0
 8004730:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004732:	693b      	ldr	r3, [r7, #16]
 8004734:	015a      	lsls	r2, r3, #5
 8004736:	68fb      	ldr	r3, [r7, #12]
 8004738:	4413      	add	r3, r2
 800473a:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 800473e:	461a      	mov	r2, r3
 8004740:	2300      	movs	r3, #0
 8004742:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004744:	693b      	ldr	r3, [r7, #16]
 8004746:	015a      	lsls	r2, r3, #5
 8004748:	68fb      	ldr	r3, [r7, #12]
 800474a:	4413      	add	r3, r2
 800474c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004750:	461a      	mov	r2, r3
 8004752:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004756:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004758:	693b      	ldr	r3, [r7, #16]
 800475a:	3301      	adds	r3, #1
 800475c:	613b      	str	r3, [r7, #16]
 800475e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004760:	693a      	ldr	r2, [r7, #16]
 8004762:	429a      	cmp	r2, r3
 8004764:	d3b7      	bcc.n	80046d6 <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004766:	2300      	movs	r3, #0
 8004768:	613b      	str	r3, [r7, #16]
 800476a:	e043      	b.n	80047f4 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	015a      	lsls	r2, r3, #5
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	4413      	add	r3, r2
 8004774:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 800477e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004782:	d118      	bne.n	80047b6 <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004784:	693b      	ldr	r3, [r7, #16]
 8004786:	2b00      	cmp	r3, #0
 8004788:	d10a      	bne.n	80047a0 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 800478a:	693b      	ldr	r3, [r7, #16]
 800478c:	015a      	lsls	r2, r3, #5
 800478e:	68fb      	ldr	r3, [r7, #12]
 8004790:	4413      	add	r3, r2
 8004792:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004796:	461a      	mov	r2, r3
 8004798:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800479c:	6013      	str	r3, [r2, #0]
 800479e:	e013      	b.n	80047c8 <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 80047a0:	693b      	ldr	r3, [r7, #16]
 80047a2:	015a      	lsls	r2, r3, #5
 80047a4:	68fb      	ldr	r3, [r7, #12]
 80047a6:	4413      	add	r3, r2
 80047a8:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047ac:	461a      	mov	r2, r3
 80047ae:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 80047b2:	6013      	str	r3, [r2, #0]
 80047b4:	e008      	b.n	80047c8 <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 80047b6:	693b      	ldr	r3, [r7, #16]
 80047b8:	015a      	lsls	r2, r3, #5
 80047ba:	68fb      	ldr	r3, [r7, #12]
 80047bc:	4413      	add	r3, r2
 80047be:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047c2:	461a      	mov	r2, r3
 80047c4:	2300      	movs	r3, #0
 80047c6:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 80047c8:	693b      	ldr	r3, [r7, #16]
 80047ca:	015a      	lsls	r2, r3, #5
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	4413      	add	r3, r2
 80047d0:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047d4:	461a      	mov	r2, r3
 80047d6:	2300      	movs	r3, #0
 80047d8:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 80047da:	693b      	ldr	r3, [r7, #16]
 80047dc:	015a      	lsls	r2, r3, #5
 80047de:	68fb      	ldr	r3, [r7, #12]
 80047e0:	4413      	add	r3, r2
 80047e2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 80047e6:	461a      	mov	r2, r3
 80047e8:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 80047ec:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	3301      	adds	r3, #1
 80047f2:	613b      	str	r3, [r7, #16]
 80047f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80047f6:	693a      	ldr	r2, [r7, #16]
 80047f8:	429a      	cmp	r2, r3
 80047fa:	d3b7      	bcc.n	800476c <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 80047fc:	68fb      	ldr	r3, [r7, #12]
 80047fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004802:	691b      	ldr	r3, [r3, #16]
 8004804:	68fa      	ldr	r2, [r7, #12]
 8004806:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800480a:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800480e:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004816:	687b      	ldr	r3, [r7, #4]
 8004818:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 800481c:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 800481e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004820:	2b00      	cmp	r3, #0
 8004822:	d105      	bne.n	8004830 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	699b      	ldr	r3, [r3, #24]
 8004828:	f043 0210 	orr.w	r2, r3, #16
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	699a      	ldr	r2, [r3, #24]
 8004834:	4b0e      	ldr	r3, [pc, #56]	; (8004870 <USB_DevInit+0x2d4>)
 8004836:	4313      	orrs	r3, r2
 8004838:	687a      	ldr	r2, [r7, #4]
 800483a:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 800483c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800483e:	2b00      	cmp	r3, #0
 8004840:	d005      	beq.n	800484e <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	699b      	ldr	r3, [r3, #24]
 8004846:	f043 0208 	orr.w	r2, r3, #8
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 800484e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004850:	2b01      	cmp	r3, #1
 8004852:	d105      	bne.n	8004860 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	699a      	ldr	r2, [r3, #24]
 8004858:	4b06      	ldr	r3, [pc, #24]	; (8004874 <USB_DevInit+0x2d8>)
 800485a:	4313      	orrs	r3, r2
 800485c:	687a      	ldr	r2, [r7, #4]
 800485e:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8004860:	7dfb      	ldrb	r3, [r7, #23]
}
 8004862:	4618      	mov	r0, r3
 8004864:	3718      	adds	r7, #24
 8004866:	46bd      	mov	sp, r7
 8004868:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800486c:	b004      	add	sp, #16
 800486e:	4770      	bx	lr
 8004870:	803c3800 	.word	0x803c3800
 8004874:	40000004 	.word	0x40000004

08004878 <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 8004878:	b480      	push	{r7}
 800487a:	b085      	sub	sp, #20
 800487c:	af00      	add	r7, sp, #0
 800487e:	6078      	str	r0, [r7, #4]
 8004880:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8004882:	2300      	movs	r3, #0
 8004884:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 8004886:	683b      	ldr	r3, [r7, #0]
 8004888:	019b      	lsls	r3, r3, #6
 800488a:	f043 0220 	orr.w	r2, r3, #32
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	3301      	adds	r3, #1
 8004896:	60fb      	str	r3, [r7, #12]
 8004898:	68fb      	ldr	r3, [r7, #12]
 800489a:	4a09      	ldr	r2, [pc, #36]	; (80048c0 <USB_FlushTxFifo+0x48>)
 800489c:	4293      	cmp	r3, r2
 800489e:	d901      	bls.n	80048a4 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 80048a0:	2303      	movs	r3, #3
 80048a2:	e006      	b.n	80048b2 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	691b      	ldr	r3, [r3, #16]
 80048a8:	f003 0320 	and.w	r3, r3, #32
 80048ac:	2b20      	cmp	r3, #32
 80048ae:	d0f0      	beq.n	8004892 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 80048b0:	2300      	movs	r3, #0
}
 80048b2:	4618      	mov	r0, r3
 80048b4:	3714      	adds	r7, #20
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
 80048be:	bf00      	nop
 80048c0:	00030d40 	.word	0x00030d40

080048c4 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80048c4:	b480      	push	{r7}
 80048c6:	b085      	sub	sp, #20
 80048c8:	af00      	add	r7, sp, #0
 80048ca:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80048cc:	2300      	movs	r3, #0
 80048ce:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2210      	movs	r2, #16
 80048d4:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80048d6:	68fb      	ldr	r3, [r7, #12]
 80048d8:	3301      	adds	r3, #1
 80048da:	60fb      	str	r3, [r7, #12]
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	4a09      	ldr	r2, [pc, #36]	; (8004904 <USB_FlushRxFifo+0x40>)
 80048e0:	4293      	cmp	r3, r2
 80048e2:	d901      	bls.n	80048e8 <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e006      	b.n	80048f6 <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f003 0310 	and.w	r3, r3, #16
 80048f0:	2b10      	cmp	r3, #16
 80048f2:	d0f0      	beq.n	80048d6 <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80048f4:	2300      	movs	r3, #0
}
 80048f6:	4618      	mov	r0, r3
 80048f8:	3714      	adds	r7, #20
 80048fa:	46bd      	mov	sp, r7
 80048fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004900:	4770      	bx	lr
 8004902:	bf00      	nop
 8004904:	00030d40 	.word	0x00030d40

08004908 <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 8004908:	b480      	push	{r7}
 800490a:	b085      	sub	sp, #20
 800490c:	af00      	add	r7, sp, #0
 800490e:	6078      	str	r0, [r7, #4]
 8004910:	460b      	mov	r3, r1
 8004912:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 800491e:	681a      	ldr	r2, [r3, #0]
 8004920:	78fb      	ldrb	r3, [r7, #3]
 8004922:	68f9      	ldr	r1, [r7, #12]
 8004924:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 8004928:	4313      	orrs	r3, r2
 800492a:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 800492c:	2300      	movs	r3, #0
}
 800492e:	4618      	mov	r0, r3
 8004930:	3714      	adds	r7, #20
 8004932:	46bd      	mov	sp, r7
 8004934:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004938:	4770      	bx	lr

0800493a <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800493a:	b480      	push	{r7}
 800493c:	b085      	sub	sp, #20
 800493e:	af00      	add	r7, sp, #0
 8004940:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	68fa      	ldr	r2, [r7, #12]
 8004950:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8004954:	f023 0303 	bic.w	r3, r3, #3
 8004958:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800495a:	68fb      	ldr	r3, [r7, #12]
 800495c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	68fa      	ldr	r2, [r7, #12]
 8004964:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004968:	f043 0302 	orr.w	r3, r3, #2
 800496c:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 800496e:	2300      	movs	r3, #0
}
 8004970:	4618      	mov	r0, r3
 8004972:	3714      	adds	r7, #20
 8004974:	46bd      	mov	sp, r7
 8004976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800497a:	4770      	bx	lr

0800497c <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 800497c:	b480      	push	{r7}
 800497e:	b085      	sub	sp, #20
 8004980:	af00      	add	r7, sp, #0
 8004982:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8004984:	2300      	movs	r3, #0
 8004986:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 8004988:	68fb      	ldr	r3, [r7, #12]
 800498a:	3301      	adds	r3, #1
 800498c:	60fb      	str	r3, [r7, #12]
 800498e:	68fb      	ldr	r3, [r7, #12]
 8004990:	4a13      	ldr	r2, [pc, #76]	; (80049e0 <USB_CoreReset+0x64>)
 8004992:	4293      	cmp	r3, r2
 8004994:	d901      	bls.n	800499a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8004996:	2303      	movs	r3, #3
 8004998:	e01b      	b.n	80049d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	691b      	ldr	r3, [r3, #16]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	daf2      	bge.n	8004988 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 80049a2:	2300      	movs	r3, #0
 80049a4:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	691b      	ldr	r3, [r3, #16]
 80049aa:	f043 0201 	orr.w	r2, r3, #1
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80049b2:	68fb      	ldr	r3, [r7, #12]
 80049b4:	3301      	adds	r3, #1
 80049b6:	60fb      	str	r3, [r7, #12]
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	4a09      	ldr	r2, [pc, #36]	; (80049e0 <USB_CoreReset+0x64>)
 80049bc:	4293      	cmp	r3, r2
 80049be:	d901      	bls.n	80049c4 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80049c0:	2303      	movs	r3, #3
 80049c2:	e006      	b.n	80049d2 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80049c4:	687b      	ldr	r3, [r7, #4]
 80049c6:	691b      	ldr	r3, [r3, #16]
 80049c8:	f003 0301 	and.w	r3, r3, #1
 80049cc:	2b01      	cmp	r3, #1
 80049ce:	d0f0      	beq.n	80049b2 <USB_CoreReset+0x36>

  return HAL_OK;
 80049d0:	2300      	movs	r3, #0
}
 80049d2:	4618      	mov	r0, r3
 80049d4:	3714      	adds	r7, #20
 80049d6:	46bd      	mov	sp, r7
 80049d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049dc:	4770      	bx	lr
 80049de:	bf00      	nop
 80049e0:	00030d40 	.word	0x00030d40

080049e4 <__libc_init_array>:
 80049e4:	b570      	push	{r4, r5, r6, lr}
 80049e6:	4d0d      	ldr	r5, [pc, #52]	; (8004a1c <__libc_init_array+0x38>)
 80049e8:	4c0d      	ldr	r4, [pc, #52]	; (8004a20 <__libc_init_array+0x3c>)
 80049ea:	1b64      	subs	r4, r4, r5
 80049ec:	10a4      	asrs	r4, r4, #2
 80049ee:	2600      	movs	r6, #0
 80049f0:	42a6      	cmp	r6, r4
 80049f2:	d109      	bne.n	8004a08 <__libc_init_array+0x24>
 80049f4:	4d0b      	ldr	r5, [pc, #44]	; (8004a24 <__libc_init_array+0x40>)
 80049f6:	4c0c      	ldr	r4, [pc, #48]	; (8004a28 <__libc_init_array+0x44>)
 80049f8:	f000 f820 	bl	8004a3c <_init>
 80049fc:	1b64      	subs	r4, r4, r5
 80049fe:	10a4      	asrs	r4, r4, #2
 8004a00:	2600      	movs	r6, #0
 8004a02:	42a6      	cmp	r6, r4
 8004a04:	d105      	bne.n	8004a12 <__libc_init_array+0x2e>
 8004a06:	bd70      	pop	{r4, r5, r6, pc}
 8004a08:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a0c:	4798      	blx	r3
 8004a0e:	3601      	adds	r6, #1
 8004a10:	e7ee      	b.n	80049f0 <__libc_init_array+0xc>
 8004a12:	f855 3b04 	ldr.w	r3, [r5], #4
 8004a16:	4798      	blx	r3
 8004a18:	3601      	adds	r6, #1
 8004a1a:	e7f2      	b.n	8004a02 <__libc_init_array+0x1e>
 8004a1c:	08004a74 	.word	0x08004a74
 8004a20:	08004a74 	.word	0x08004a74
 8004a24:	08004a74 	.word	0x08004a74
 8004a28:	08004a78 	.word	0x08004a78

08004a2c <memset>:
 8004a2c:	4402      	add	r2, r0
 8004a2e:	4603      	mov	r3, r0
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d100      	bne.n	8004a36 <memset+0xa>
 8004a34:	4770      	bx	lr
 8004a36:	f803 1b01 	strb.w	r1, [r3], #1
 8004a3a:	e7f9      	b.n	8004a30 <memset+0x4>

08004a3c <_init>:
 8004a3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a3e:	bf00      	nop
 8004a40:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a42:	bc08      	pop	{r3}
 8004a44:	469e      	mov	lr, r3
 8004a46:	4770      	bx	lr

08004a48 <_fini>:
 8004a48:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004a4a:	bf00      	nop
 8004a4c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004a4e:	bc08      	pop	{r3}
 8004a50:	469e      	mov	lr, r3
 8004a52:	4770      	bx	lr
