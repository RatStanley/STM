
DAC.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000060dc  080001c8  080001c8  000101c8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000001f8  080062a8  080062a8  000162a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080064a0  080064a0  0002000c  2**0
                  CONTENTS
  4 .ARM          00000008  080064a0  080064a0  000164a0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080064a8  080064a8  0002000c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080064a8  080064a8  000164a8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080064ac  080064ac  000164ac  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000000c  20000000  080064b0  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006f8  2000000c  080064bc  0002000c  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000704  080064bc  00020704  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002000c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000138d1  00000000  00000000  0002003c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000029f9  00000000  00000000  0003390d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000011d0  00000000  00000000  00036308  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000010c8  00000000  00000000  000374d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00026e23  00000000  00000000  000385a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00013d34  00000000  00000000  0005f3c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000f30f9  00000000  00000000  000730f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  001661f0  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004fe0  00000000  00000000  00166244  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001c8 <__do_global_dtors_aux>:
 80001c8:	b510      	push	{r4, lr}
 80001ca:	4c05      	ldr	r4, [pc, #20]	; (80001e0 <__do_global_dtors_aux+0x18>)
 80001cc:	7823      	ldrb	r3, [r4, #0]
 80001ce:	b933      	cbnz	r3, 80001de <__do_global_dtors_aux+0x16>
 80001d0:	4b04      	ldr	r3, [pc, #16]	; (80001e4 <__do_global_dtors_aux+0x1c>)
 80001d2:	b113      	cbz	r3, 80001da <__do_global_dtors_aux+0x12>
 80001d4:	4804      	ldr	r0, [pc, #16]	; (80001e8 <__do_global_dtors_aux+0x20>)
 80001d6:	f3af 8000 	nop.w
 80001da:	2301      	movs	r3, #1
 80001dc:	7023      	strb	r3, [r4, #0]
 80001de:	bd10      	pop	{r4, pc}
 80001e0:	2000000c 	.word	0x2000000c
 80001e4:	00000000 	.word	0x00000000
 80001e8:	0800628c 	.word	0x0800628c

080001ec <frame_dummy>:
 80001ec:	b508      	push	{r3, lr}
 80001ee:	4b03      	ldr	r3, [pc, #12]	; (80001fc <frame_dummy+0x10>)
 80001f0:	b11b      	cbz	r3, 80001fa <frame_dummy+0xe>
 80001f2:	4903      	ldr	r1, [pc, #12]	; (8000200 <frame_dummy+0x14>)
 80001f4:	4803      	ldr	r0, [pc, #12]	; (8000204 <frame_dummy+0x18>)
 80001f6:	f3af 8000 	nop.w
 80001fa:	bd08      	pop	{r3, pc}
 80001fc:	00000000 	.word	0x00000000
 8000200:	20000010 	.word	0x20000010
 8000204:	0800628c 	.word	0x0800628c

08000208 <__aeabi_drsub>:
 8000208:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 800020c:	e002      	b.n	8000214 <__adddf3>
 800020e:	bf00      	nop

08000210 <__aeabi_dsub>:
 8000210:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

08000214 <__adddf3>:
 8000214:	b530      	push	{r4, r5, lr}
 8000216:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800021a:	ea4f 0543 	mov.w	r5, r3, lsl #1
 800021e:	ea94 0f05 	teq	r4, r5
 8000222:	bf08      	it	eq
 8000224:	ea90 0f02 	teqeq	r0, r2
 8000228:	bf1f      	itttt	ne
 800022a:	ea54 0c00 	orrsne.w	ip, r4, r0
 800022e:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000232:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000236:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800023a:	f000 80e2 	beq.w	8000402 <__adddf3+0x1ee>
 800023e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000242:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000246:	bfb8      	it	lt
 8000248:	426d      	neglt	r5, r5
 800024a:	dd0c      	ble.n	8000266 <__adddf3+0x52>
 800024c:	442c      	add	r4, r5
 800024e:	ea80 0202 	eor.w	r2, r0, r2
 8000252:	ea81 0303 	eor.w	r3, r1, r3
 8000256:	ea82 0000 	eor.w	r0, r2, r0
 800025a:	ea83 0101 	eor.w	r1, r3, r1
 800025e:	ea80 0202 	eor.w	r2, r0, r2
 8000262:	ea81 0303 	eor.w	r3, r1, r3
 8000266:	2d36      	cmp	r5, #54	; 0x36
 8000268:	bf88      	it	hi
 800026a:	bd30      	pophi	{r4, r5, pc}
 800026c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000270:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000274:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000278:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800027c:	d002      	beq.n	8000284 <__adddf3+0x70>
 800027e:	4240      	negs	r0, r0
 8000280:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000284:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000288:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800028c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000290:	d002      	beq.n	8000298 <__adddf3+0x84>
 8000292:	4252      	negs	r2, r2
 8000294:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000298:	ea94 0f05 	teq	r4, r5
 800029c:	f000 80a7 	beq.w	80003ee <__adddf3+0x1da>
 80002a0:	f1a4 0401 	sub.w	r4, r4, #1
 80002a4:	f1d5 0e20 	rsbs	lr, r5, #32
 80002a8:	db0d      	blt.n	80002c6 <__adddf3+0xb2>
 80002aa:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002ae:	fa22 f205 	lsr.w	r2, r2, r5
 80002b2:	1880      	adds	r0, r0, r2
 80002b4:	f141 0100 	adc.w	r1, r1, #0
 80002b8:	fa03 f20e 	lsl.w	r2, r3, lr
 80002bc:	1880      	adds	r0, r0, r2
 80002be:	fa43 f305 	asr.w	r3, r3, r5
 80002c2:	4159      	adcs	r1, r3
 80002c4:	e00e      	b.n	80002e4 <__adddf3+0xd0>
 80002c6:	f1a5 0520 	sub.w	r5, r5, #32
 80002ca:	f10e 0e20 	add.w	lr, lr, #32
 80002ce:	2a01      	cmp	r2, #1
 80002d0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002d4:	bf28      	it	cs
 80002d6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002da:	fa43 f305 	asr.w	r3, r3, r5
 80002de:	18c0      	adds	r0, r0, r3
 80002e0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002e4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002e8:	d507      	bpl.n	80002fa <__adddf3+0xe6>
 80002ea:	f04f 0e00 	mov.w	lr, #0
 80002ee:	f1dc 0c00 	rsbs	ip, ip, #0
 80002f2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002f6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002fa:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002fe:	d31b      	bcc.n	8000338 <__adddf3+0x124>
 8000300:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 8000304:	d30c      	bcc.n	8000320 <__adddf3+0x10c>
 8000306:	0849      	lsrs	r1, r1, #1
 8000308:	ea5f 0030 	movs.w	r0, r0, rrx
 800030c:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000310:	f104 0401 	add.w	r4, r4, #1
 8000314:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000318:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 800031c:	f080 809a 	bcs.w	8000454 <__adddf3+0x240>
 8000320:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000324:	bf08      	it	eq
 8000326:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800032a:	f150 0000 	adcs.w	r0, r0, #0
 800032e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000332:	ea41 0105 	orr.w	r1, r1, r5
 8000336:	bd30      	pop	{r4, r5, pc}
 8000338:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800033c:	4140      	adcs	r0, r0
 800033e:	eb41 0101 	adc.w	r1, r1, r1
 8000342:	3c01      	subs	r4, #1
 8000344:	bf28      	it	cs
 8000346:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800034a:	d2e9      	bcs.n	8000320 <__adddf3+0x10c>
 800034c:	f091 0f00 	teq	r1, #0
 8000350:	bf04      	itt	eq
 8000352:	4601      	moveq	r1, r0
 8000354:	2000      	moveq	r0, #0
 8000356:	fab1 f381 	clz	r3, r1
 800035a:	bf08      	it	eq
 800035c:	3320      	addeq	r3, #32
 800035e:	f1a3 030b 	sub.w	r3, r3, #11
 8000362:	f1b3 0220 	subs.w	r2, r3, #32
 8000366:	da0c      	bge.n	8000382 <__adddf3+0x16e>
 8000368:	320c      	adds	r2, #12
 800036a:	dd08      	ble.n	800037e <__adddf3+0x16a>
 800036c:	f102 0c14 	add.w	ip, r2, #20
 8000370:	f1c2 020c 	rsb	r2, r2, #12
 8000374:	fa01 f00c 	lsl.w	r0, r1, ip
 8000378:	fa21 f102 	lsr.w	r1, r1, r2
 800037c:	e00c      	b.n	8000398 <__adddf3+0x184>
 800037e:	f102 0214 	add.w	r2, r2, #20
 8000382:	bfd8      	it	le
 8000384:	f1c2 0c20 	rsble	ip, r2, #32
 8000388:	fa01 f102 	lsl.w	r1, r1, r2
 800038c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000390:	bfdc      	itt	le
 8000392:	ea41 010c 	orrle.w	r1, r1, ip
 8000396:	4090      	lslle	r0, r2
 8000398:	1ae4      	subs	r4, r4, r3
 800039a:	bfa2      	ittt	ge
 800039c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003a0:	4329      	orrge	r1, r5
 80003a2:	bd30      	popge	{r4, r5, pc}
 80003a4:	ea6f 0404 	mvn.w	r4, r4
 80003a8:	3c1f      	subs	r4, #31
 80003aa:	da1c      	bge.n	80003e6 <__adddf3+0x1d2>
 80003ac:	340c      	adds	r4, #12
 80003ae:	dc0e      	bgt.n	80003ce <__adddf3+0x1ba>
 80003b0:	f104 0414 	add.w	r4, r4, #20
 80003b4:	f1c4 0220 	rsb	r2, r4, #32
 80003b8:	fa20 f004 	lsr.w	r0, r0, r4
 80003bc:	fa01 f302 	lsl.w	r3, r1, r2
 80003c0:	ea40 0003 	orr.w	r0, r0, r3
 80003c4:	fa21 f304 	lsr.w	r3, r1, r4
 80003c8:	ea45 0103 	orr.w	r1, r5, r3
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	f1c4 040c 	rsb	r4, r4, #12
 80003d2:	f1c4 0220 	rsb	r2, r4, #32
 80003d6:	fa20 f002 	lsr.w	r0, r0, r2
 80003da:	fa01 f304 	lsl.w	r3, r1, r4
 80003de:	ea40 0003 	orr.w	r0, r0, r3
 80003e2:	4629      	mov	r1, r5
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ea:	4629      	mov	r1, r5
 80003ec:	bd30      	pop	{r4, r5, pc}
 80003ee:	f094 0f00 	teq	r4, #0
 80003f2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003f6:	bf06      	itte	eq
 80003f8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003fc:	3401      	addeq	r4, #1
 80003fe:	3d01      	subne	r5, #1
 8000400:	e74e      	b.n	80002a0 <__adddf3+0x8c>
 8000402:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000406:	bf18      	it	ne
 8000408:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800040c:	d029      	beq.n	8000462 <__adddf3+0x24e>
 800040e:	ea94 0f05 	teq	r4, r5
 8000412:	bf08      	it	eq
 8000414:	ea90 0f02 	teqeq	r0, r2
 8000418:	d005      	beq.n	8000426 <__adddf3+0x212>
 800041a:	ea54 0c00 	orrs.w	ip, r4, r0
 800041e:	bf04      	itt	eq
 8000420:	4619      	moveq	r1, r3
 8000422:	4610      	moveq	r0, r2
 8000424:	bd30      	pop	{r4, r5, pc}
 8000426:	ea91 0f03 	teq	r1, r3
 800042a:	bf1e      	ittt	ne
 800042c:	2100      	movne	r1, #0
 800042e:	2000      	movne	r0, #0
 8000430:	bd30      	popne	{r4, r5, pc}
 8000432:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000436:	d105      	bne.n	8000444 <__adddf3+0x230>
 8000438:	0040      	lsls	r0, r0, #1
 800043a:	4149      	adcs	r1, r1
 800043c:	bf28      	it	cs
 800043e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000442:	bd30      	pop	{r4, r5, pc}
 8000444:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000448:	bf3c      	itt	cc
 800044a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800044e:	bd30      	popcc	{r4, r5, pc}
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000458:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800045c:	f04f 0000 	mov.w	r0, #0
 8000460:	bd30      	pop	{r4, r5, pc}
 8000462:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000466:	bf1a      	itte	ne
 8000468:	4619      	movne	r1, r3
 800046a:	4610      	movne	r0, r2
 800046c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000470:	bf1c      	itt	ne
 8000472:	460b      	movne	r3, r1
 8000474:	4602      	movne	r2, r0
 8000476:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800047a:	bf06      	itte	eq
 800047c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000480:	ea91 0f03 	teqeq	r1, r3
 8000484:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000488:	bd30      	pop	{r4, r5, pc}
 800048a:	bf00      	nop

0800048c <__aeabi_ui2d>:
 800048c:	f090 0f00 	teq	r0, #0
 8000490:	bf04      	itt	eq
 8000492:	2100      	moveq	r1, #0
 8000494:	4770      	bxeq	lr
 8000496:	b530      	push	{r4, r5, lr}
 8000498:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800049c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a0:	f04f 0500 	mov.w	r5, #0
 80004a4:	f04f 0100 	mov.w	r1, #0
 80004a8:	e750      	b.n	800034c <__adddf3+0x138>
 80004aa:	bf00      	nop

080004ac <__aeabi_i2d>:
 80004ac:	f090 0f00 	teq	r0, #0
 80004b0:	bf04      	itt	eq
 80004b2:	2100      	moveq	r1, #0
 80004b4:	4770      	bxeq	lr
 80004b6:	b530      	push	{r4, r5, lr}
 80004b8:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004bc:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004c0:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004c4:	bf48      	it	mi
 80004c6:	4240      	negmi	r0, r0
 80004c8:	f04f 0100 	mov.w	r1, #0
 80004cc:	e73e      	b.n	800034c <__adddf3+0x138>
 80004ce:	bf00      	nop

080004d0 <__aeabi_f2d>:
 80004d0:	0042      	lsls	r2, r0, #1
 80004d2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004d6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004da:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004de:	bf1f      	itttt	ne
 80004e0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004e4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004e8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004ec:	4770      	bxne	lr
 80004ee:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004f2:	bf08      	it	eq
 80004f4:	4770      	bxeq	lr
 80004f6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004fa:	bf04      	itt	eq
 80004fc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000500:	4770      	bxeq	lr
 8000502:	b530      	push	{r4, r5, lr}
 8000504:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000508:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800050c:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000510:	e71c      	b.n	800034c <__adddf3+0x138>
 8000512:	bf00      	nop

08000514 <__aeabi_ul2d>:
 8000514:	ea50 0201 	orrs.w	r2, r0, r1
 8000518:	bf08      	it	eq
 800051a:	4770      	bxeq	lr
 800051c:	b530      	push	{r4, r5, lr}
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	e00a      	b.n	800053a <__aeabi_l2d+0x16>

08000524 <__aeabi_l2d>:
 8000524:	ea50 0201 	orrs.w	r2, r0, r1
 8000528:	bf08      	it	eq
 800052a:	4770      	bxeq	lr
 800052c:	b530      	push	{r4, r5, lr}
 800052e:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000532:	d502      	bpl.n	800053a <__aeabi_l2d+0x16>
 8000534:	4240      	negs	r0, r0
 8000536:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800053a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800053e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000542:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000546:	f43f aed8 	beq.w	80002fa <__adddf3+0xe6>
 800054a:	f04f 0203 	mov.w	r2, #3
 800054e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000552:	bf18      	it	ne
 8000554:	3203      	addne	r2, #3
 8000556:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800055a:	bf18      	it	ne
 800055c:	3203      	addne	r2, #3
 800055e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000562:	f1c2 0320 	rsb	r3, r2, #32
 8000566:	fa00 fc03 	lsl.w	ip, r0, r3
 800056a:	fa20 f002 	lsr.w	r0, r0, r2
 800056e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000572:	ea40 000e 	orr.w	r0, r0, lr
 8000576:	fa21 f102 	lsr.w	r1, r1, r2
 800057a:	4414      	add	r4, r2
 800057c:	e6bd      	b.n	80002fa <__adddf3+0xe6>
 800057e:	bf00      	nop

08000580 <__aeabi_dmul>:
 8000580:	b570      	push	{r4, r5, r6, lr}
 8000582:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000586:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800058a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800058e:	bf1d      	ittte	ne
 8000590:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000594:	ea94 0f0c 	teqne	r4, ip
 8000598:	ea95 0f0c 	teqne	r5, ip
 800059c:	f000 f8de 	bleq	800075c <__aeabi_dmul+0x1dc>
 80005a0:	442c      	add	r4, r5
 80005a2:	ea81 0603 	eor.w	r6, r1, r3
 80005a6:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005aa:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005ae:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005b2:	bf18      	it	ne
 80005b4:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005b8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005bc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005c0:	d038      	beq.n	8000634 <__aeabi_dmul+0xb4>
 80005c2:	fba0 ce02 	umull	ip, lr, r0, r2
 80005c6:	f04f 0500 	mov.w	r5, #0
 80005ca:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005ce:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005d2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005d6:	f04f 0600 	mov.w	r6, #0
 80005da:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005de:	f09c 0f00 	teq	ip, #0
 80005e2:	bf18      	it	ne
 80005e4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005e8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005ec:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005f0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005f4:	d204      	bcs.n	8000600 <__aeabi_dmul+0x80>
 80005f6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005fa:	416d      	adcs	r5, r5
 80005fc:	eb46 0606 	adc.w	r6, r6, r6
 8000600:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000604:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000608:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 800060c:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000610:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000614:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000618:	bf88      	it	hi
 800061a:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 800061e:	d81e      	bhi.n	800065e <__aeabi_dmul+0xde>
 8000620:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 8000624:	bf08      	it	eq
 8000626:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800062a:	f150 0000 	adcs.w	r0, r0, #0
 800062e:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000632:	bd70      	pop	{r4, r5, r6, pc}
 8000634:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000638:	ea46 0101 	orr.w	r1, r6, r1
 800063c:	ea40 0002 	orr.w	r0, r0, r2
 8000640:	ea81 0103 	eor.w	r1, r1, r3
 8000644:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000648:	bfc2      	ittt	gt
 800064a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800064e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000652:	bd70      	popgt	{r4, r5, r6, pc}
 8000654:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000658:	f04f 0e00 	mov.w	lr, #0
 800065c:	3c01      	subs	r4, #1
 800065e:	f300 80ab 	bgt.w	80007b8 <__aeabi_dmul+0x238>
 8000662:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000666:	bfde      	ittt	le
 8000668:	2000      	movle	r0, #0
 800066a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800066e:	bd70      	pople	{r4, r5, r6, pc}
 8000670:	f1c4 0400 	rsb	r4, r4, #0
 8000674:	3c20      	subs	r4, #32
 8000676:	da35      	bge.n	80006e4 <__aeabi_dmul+0x164>
 8000678:	340c      	adds	r4, #12
 800067a:	dc1b      	bgt.n	80006b4 <__aeabi_dmul+0x134>
 800067c:	f104 0414 	add.w	r4, r4, #20
 8000680:	f1c4 0520 	rsb	r5, r4, #32
 8000684:	fa00 f305 	lsl.w	r3, r0, r5
 8000688:	fa20 f004 	lsr.w	r0, r0, r4
 800068c:	fa01 f205 	lsl.w	r2, r1, r5
 8000690:	ea40 0002 	orr.w	r0, r0, r2
 8000694:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000698:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800069c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a0:	fa21 f604 	lsr.w	r6, r1, r4
 80006a4:	eb42 0106 	adc.w	r1, r2, r6
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 040c 	rsb	r4, r4, #12
 80006b8:	f1c4 0520 	rsb	r5, r4, #32
 80006bc:	fa00 f304 	lsl.w	r3, r0, r4
 80006c0:	fa20 f005 	lsr.w	r0, r0, r5
 80006c4:	fa01 f204 	lsl.w	r2, r1, r4
 80006c8:	ea40 0002 	orr.w	r0, r0, r2
 80006cc:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006d4:	f141 0100 	adc.w	r1, r1, #0
 80006d8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006dc:	bf08      	it	eq
 80006de:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006e2:	bd70      	pop	{r4, r5, r6, pc}
 80006e4:	f1c4 0520 	rsb	r5, r4, #32
 80006e8:	fa00 f205 	lsl.w	r2, r0, r5
 80006ec:	ea4e 0e02 	orr.w	lr, lr, r2
 80006f0:	fa20 f304 	lsr.w	r3, r0, r4
 80006f4:	fa01 f205 	lsl.w	r2, r1, r5
 80006f8:	ea43 0302 	orr.w	r3, r3, r2
 80006fc:	fa21 f004 	lsr.w	r0, r1, r4
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	fa21 f204 	lsr.w	r2, r1, r4
 8000708:	ea20 0002 	bic.w	r0, r0, r2
 800070c:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000710:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000714:	bf08      	it	eq
 8000716:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800071a:	bd70      	pop	{r4, r5, r6, pc}
 800071c:	f094 0f00 	teq	r4, #0
 8000720:	d10f      	bne.n	8000742 <__aeabi_dmul+0x1c2>
 8000722:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 8000726:	0040      	lsls	r0, r0, #1
 8000728:	eb41 0101 	adc.w	r1, r1, r1
 800072c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000730:	bf08      	it	eq
 8000732:	3c01      	subeq	r4, #1
 8000734:	d0f7      	beq.n	8000726 <__aeabi_dmul+0x1a6>
 8000736:	ea41 0106 	orr.w	r1, r1, r6
 800073a:	f095 0f00 	teq	r5, #0
 800073e:	bf18      	it	ne
 8000740:	4770      	bxne	lr
 8000742:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000746:	0052      	lsls	r2, r2, #1
 8000748:	eb43 0303 	adc.w	r3, r3, r3
 800074c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000750:	bf08      	it	eq
 8000752:	3d01      	subeq	r5, #1
 8000754:	d0f7      	beq.n	8000746 <__aeabi_dmul+0x1c6>
 8000756:	ea43 0306 	orr.w	r3, r3, r6
 800075a:	4770      	bx	lr
 800075c:	ea94 0f0c 	teq	r4, ip
 8000760:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000764:	bf18      	it	ne
 8000766:	ea95 0f0c 	teqne	r5, ip
 800076a:	d00c      	beq.n	8000786 <__aeabi_dmul+0x206>
 800076c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000770:	bf18      	it	ne
 8000772:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000776:	d1d1      	bne.n	800071c <__aeabi_dmul+0x19c>
 8000778:	ea81 0103 	eor.w	r1, r1, r3
 800077c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000780:	f04f 0000 	mov.w	r0, #0
 8000784:	bd70      	pop	{r4, r5, r6, pc}
 8000786:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800078a:	bf06      	itte	eq
 800078c:	4610      	moveq	r0, r2
 800078e:	4619      	moveq	r1, r3
 8000790:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000794:	d019      	beq.n	80007ca <__aeabi_dmul+0x24a>
 8000796:	ea94 0f0c 	teq	r4, ip
 800079a:	d102      	bne.n	80007a2 <__aeabi_dmul+0x222>
 800079c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007a0:	d113      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007a2:	ea95 0f0c 	teq	r5, ip
 80007a6:	d105      	bne.n	80007b4 <__aeabi_dmul+0x234>
 80007a8:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007ac:	bf1c      	itt	ne
 80007ae:	4610      	movne	r0, r2
 80007b0:	4619      	movne	r1, r3
 80007b2:	d10a      	bne.n	80007ca <__aeabi_dmul+0x24a>
 80007b4:	ea81 0103 	eor.w	r1, r1, r3
 80007b8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007bc:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007c0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007c4:	f04f 0000 	mov.w	r0, #0
 80007c8:	bd70      	pop	{r4, r5, r6, pc}
 80007ca:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007ce:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007d2:	bd70      	pop	{r4, r5, r6, pc}

080007d4 <__aeabi_ddiv>:
 80007d4:	b570      	push	{r4, r5, r6, lr}
 80007d6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007da:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007de:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007e2:	bf1d      	ittte	ne
 80007e4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007e8:	ea94 0f0c 	teqne	r4, ip
 80007ec:	ea95 0f0c 	teqne	r5, ip
 80007f0:	f000 f8a7 	bleq	8000942 <__aeabi_ddiv+0x16e>
 80007f4:	eba4 0405 	sub.w	r4, r4, r5
 80007f8:	ea81 0e03 	eor.w	lr, r1, r3
 80007fc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000800:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000804:	f000 8088 	beq.w	8000918 <__aeabi_ddiv+0x144>
 8000808:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800080c:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000810:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000814:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000818:	ea4f 2202 	mov.w	r2, r2, lsl #8
 800081c:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000820:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000824:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000828:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 800082c:	429d      	cmp	r5, r3
 800082e:	bf08      	it	eq
 8000830:	4296      	cmpeq	r6, r2
 8000832:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000836:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800083a:	d202      	bcs.n	8000842 <__aeabi_ddiv+0x6e>
 800083c:	085b      	lsrs	r3, r3, #1
 800083e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000842:	1ab6      	subs	r6, r6, r2
 8000844:	eb65 0503 	sbc.w	r5, r5, r3
 8000848:	085b      	lsrs	r3, r3, #1
 800084a:	ea4f 0232 	mov.w	r2, r2, rrx
 800084e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000852:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 000c 	orrcs.w	r0, r0, ip
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008b0:	ea55 0e06 	orrs.w	lr, r5, r6
 80008b4:	d018      	beq.n	80008e8 <__aeabi_ddiv+0x114>
 80008b6:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008ba:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008be:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008c2:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008c6:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008ca:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008ce:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008d2:	d1c0      	bne.n	8000856 <__aeabi_ddiv+0x82>
 80008d4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d8:	d10b      	bne.n	80008f2 <__aeabi_ddiv+0x11e>
 80008da:	ea41 0100 	orr.w	r1, r1, r0
 80008de:	f04f 0000 	mov.w	r0, #0
 80008e2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008e6:	e7b6      	b.n	8000856 <__aeabi_ddiv+0x82>
 80008e8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008ec:	bf04      	itt	eq
 80008ee:	4301      	orreq	r1, r0
 80008f0:	2000      	moveq	r0, #0
 80008f2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008f6:	bf88      	it	hi
 80008f8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008fc:	f63f aeaf 	bhi.w	800065e <__aeabi_dmul+0xde>
 8000900:	ebb5 0c03 	subs.w	ip, r5, r3
 8000904:	bf04      	itt	eq
 8000906:	ebb6 0c02 	subseq.w	ip, r6, r2
 800090a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800090e:	f150 0000 	adcs.w	r0, r0, #0
 8000912:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000916:	bd70      	pop	{r4, r5, r6, pc}
 8000918:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 800091c:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000920:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000924:	bfc2      	ittt	gt
 8000926:	ebd4 050c 	rsbsgt	r5, r4, ip
 800092a:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800092e:	bd70      	popgt	{r4, r5, r6, pc}
 8000930:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000934:	f04f 0e00 	mov.w	lr, #0
 8000938:	3c01      	subs	r4, #1
 800093a:	e690      	b.n	800065e <__aeabi_dmul+0xde>
 800093c:	ea45 0e06 	orr.w	lr, r5, r6
 8000940:	e68d      	b.n	800065e <__aeabi_dmul+0xde>
 8000942:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000946:	ea94 0f0c 	teq	r4, ip
 800094a:	bf08      	it	eq
 800094c:	ea95 0f0c 	teqeq	r5, ip
 8000950:	f43f af3b 	beq.w	80007ca <__aeabi_dmul+0x24a>
 8000954:	ea94 0f0c 	teq	r4, ip
 8000958:	d10a      	bne.n	8000970 <__aeabi_ddiv+0x19c>
 800095a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800095e:	f47f af34 	bne.w	80007ca <__aeabi_dmul+0x24a>
 8000962:	ea95 0f0c 	teq	r5, ip
 8000966:	f47f af25 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800096a:	4610      	mov	r0, r2
 800096c:	4619      	mov	r1, r3
 800096e:	e72c      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000970:	ea95 0f0c 	teq	r5, ip
 8000974:	d106      	bne.n	8000984 <__aeabi_ddiv+0x1b0>
 8000976:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800097a:	f43f aefd 	beq.w	8000778 <__aeabi_dmul+0x1f8>
 800097e:	4610      	mov	r0, r2
 8000980:	4619      	mov	r1, r3
 8000982:	e722      	b.n	80007ca <__aeabi_dmul+0x24a>
 8000984:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000988:	bf18      	it	ne
 800098a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800098e:	f47f aec5 	bne.w	800071c <__aeabi_dmul+0x19c>
 8000992:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000996:	f47f af0d 	bne.w	80007b4 <__aeabi_dmul+0x234>
 800099a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800099e:	f47f aeeb 	bne.w	8000778 <__aeabi_dmul+0x1f8>
 80009a2:	e712      	b.n	80007ca <__aeabi_dmul+0x24a>

080009a4 <__gedf2>:
 80009a4:	f04f 3cff 	mov.w	ip, #4294967295
 80009a8:	e006      	b.n	80009b8 <__cmpdf2+0x4>
 80009aa:	bf00      	nop

080009ac <__ledf2>:
 80009ac:	f04f 0c01 	mov.w	ip, #1
 80009b0:	e002      	b.n	80009b8 <__cmpdf2+0x4>
 80009b2:	bf00      	nop

080009b4 <__cmpdf2>:
 80009b4:	f04f 0c01 	mov.w	ip, #1
 80009b8:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009bc:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009c0:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009c4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009c8:	bf18      	it	ne
 80009ca:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009ce:	d01b      	beq.n	8000a08 <__cmpdf2+0x54>
 80009d0:	b001      	add	sp, #4
 80009d2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009d6:	bf0c      	ite	eq
 80009d8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009dc:	ea91 0f03 	teqne	r1, r3
 80009e0:	bf02      	ittt	eq
 80009e2:	ea90 0f02 	teqeq	r0, r2
 80009e6:	2000      	moveq	r0, #0
 80009e8:	4770      	bxeq	lr
 80009ea:	f110 0f00 	cmn.w	r0, #0
 80009ee:	ea91 0f03 	teq	r1, r3
 80009f2:	bf58      	it	pl
 80009f4:	4299      	cmppl	r1, r3
 80009f6:	bf08      	it	eq
 80009f8:	4290      	cmpeq	r0, r2
 80009fa:	bf2c      	ite	cs
 80009fc:	17d8      	asrcs	r0, r3, #31
 80009fe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a02:	f040 0001 	orr.w	r0, r0, #1
 8000a06:	4770      	bx	lr
 8000a08:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a0c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a10:	d102      	bne.n	8000a18 <__cmpdf2+0x64>
 8000a12:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a16:	d107      	bne.n	8000a28 <__cmpdf2+0x74>
 8000a18:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a1c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a20:	d1d6      	bne.n	80009d0 <__cmpdf2+0x1c>
 8000a22:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a26:	d0d3      	beq.n	80009d0 <__cmpdf2+0x1c>
 8000a28:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a2c:	4770      	bx	lr
 8000a2e:	bf00      	nop

08000a30 <__aeabi_cdrcmple>:
 8000a30:	4684      	mov	ip, r0
 8000a32:	4610      	mov	r0, r2
 8000a34:	4662      	mov	r2, ip
 8000a36:	468c      	mov	ip, r1
 8000a38:	4619      	mov	r1, r3
 8000a3a:	4663      	mov	r3, ip
 8000a3c:	e000      	b.n	8000a40 <__aeabi_cdcmpeq>
 8000a3e:	bf00      	nop

08000a40 <__aeabi_cdcmpeq>:
 8000a40:	b501      	push	{r0, lr}
 8000a42:	f7ff ffb7 	bl	80009b4 <__cmpdf2>
 8000a46:	2800      	cmp	r0, #0
 8000a48:	bf48      	it	mi
 8000a4a:	f110 0f00 	cmnmi.w	r0, #0
 8000a4e:	bd01      	pop	{r0, pc}

08000a50 <__aeabi_dcmpeq>:
 8000a50:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a54:	f7ff fff4 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a58:	bf0c      	ite	eq
 8000a5a:	2001      	moveq	r0, #1
 8000a5c:	2000      	movne	r0, #0
 8000a5e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a62:	bf00      	nop

08000a64 <__aeabi_dcmplt>:
 8000a64:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a68:	f7ff ffea 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a6c:	bf34      	ite	cc
 8000a6e:	2001      	movcc	r0, #1
 8000a70:	2000      	movcs	r0, #0
 8000a72:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a76:	bf00      	nop

08000a78 <__aeabi_dcmple>:
 8000a78:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a7c:	f7ff ffe0 	bl	8000a40 <__aeabi_cdcmpeq>
 8000a80:	bf94      	ite	ls
 8000a82:	2001      	movls	r0, #1
 8000a84:	2000      	movhi	r0, #0
 8000a86:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8a:	bf00      	nop

08000a8c <__aeabi_dcmpge>:
 8000a8c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a90:	f7ff ffce 	bl	8000a30 <__aeabi_cdrcmple>
 8000a94:	bf94      	ite	ls
 8000a96:	2001      	movls	r0, #1
 8000a98:	2000      	movhi	r0, #0
 8000a9a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9e:	bf00      	nop

08000aa0 <__aeabi_dcmpgt>:
 8000aa0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa4:	f7ff ffc4 	bl	8000a30 <__aeabi_cdrcmple>
 8000aa8:	bf34      	ite	cc
 8000aaa:	2001      	movcc	r0, #1
 8000aac:	2000      	movcs	r0, #0
 8000aae:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab2:	bf00      	nop

08000ab4 <__aeabi_d2iz>:
 8000ab4:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab8:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000abc:	d215      	bcs.n	8000aea <__aeabi_d2iz+0x36>
 8000abe:	d511      	bpl.n	8000ae4 <__aeabi_d2iz+0x30>
 8000ac0:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000ac4:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ac8:	d912      	bls.n	8000af0 <__aeabi_d2iz+0x3c>
 8000aca:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ace:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000ad2:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000ad6:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ada:	fa23 f002 	lsr.w	r0, r3, r2
 8000ade:	bf18      	it	ne
 8000ae0:	4240      	negne	r0, r0
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000aee:	d105      	bne.n	8000afc <__aeabi_d2iz+0x48>
 8000af0:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000af4:	bf08      	it	eq
 8000af6:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	bf00      	nop

08000b04 <__aeabi_d2uiz>:
 8000b04:	004a      	lsls	r2, r1, #1
 8000b06:	d211      	bcs.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b08:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b0c:	d211      	bcs.n	8000b32 <__aeabi_d2uiz+0x2e>
 8000b0e:	d50d      	bpl.n	8000b2c <__aeabi_d2uiz+0x28>
 8000b10:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b14:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b18:	d40e      	bmi.n	8000b38 <__aeabi_d2uiz+0x34>
 8000b1a:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b1e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b22:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b26:	fa23 f002 	lsr.w	r0, r3, r2
 8000b2a:	4770      	bx	lr
 8000b2c:	f04f 0000 	mov.w	r0, #0
 8000b30:	4770      	bx	lr
 8000b32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b36:	d102      	bne.n	8000b3e <__aeabi_d2uiz+0x3a>
 8000b38:	f04f 30ff 	mov.w	r0, #4294967295
 8000b3c:	4770      	bx	lr
 8000b3e:	f04f 0000 	mov.w	r0, #0
 8000b42:	4770      	bx	lr

08000b44 <__aeabi_uldivmod>:
 8000b44:	b953      	cbnz	r3, 8000b5c <__aeabi_uldivmod+0x18>
 8000b46:	b94a      	cbnz	r2, 8000b5c <__aeabi_uldivmod+0x18>
 8000b48:	2900      	cmp	r1, #0
 8000b4a:	bf08      	it	eq
 8000b4c:	2800      	cmpeq	r0, #0
 8000b4e:	bf1c      	itt	ne
 8000b50:	f04f 31ff 	movne.w	r1, #4294967295
 8000b54:	f04f 30ff 	movne.w	r0, #4294967295
 8000b58:	f000 b96e 	b.w	8000e38 <__aeabi_idiv0>
 8000b5c:	f1ad 0c08 	sub.w	ip, sp, #8
 8000b60:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000b64:	f000 f806 	bl	8000b74 <__udivmoddi4>
 8000b68:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000b6c:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000b70:	b004      	add	sp, #16
 8000b72:	4770      	bx	lr

08000b74 <__udivmoddi4>:
 8000b74:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000b78:	9d08      	ldr	r5, [sp, #32]
 8000b7a:	4604      	mov	r4, r0
 8000b7c:	468c      	mov	ip, r1
 8000b7e:	2b00      	cmp	r3, #0
 8000b80:	f040 8083 	bne.w	8000c8a <__udivmoddi4+0x116>
 8000b84:	428a      	cmp	r2, r1
 8000b86:	4617      	mov	r7, r2
 8000b88:	d947      	bls.n	8000c1a <__udivmoddi4+0xa6>
 8000b8a:	fab2 f282 	clz	r2, r2
 8000b8e:	b142      	cbz	r2, 8000ba2 <__udivmoddi4+0x2e>
 8000b90:	f1c2 0020 	rsb	r0, r2, #32
 8000b94:	fa24 f000 	lsr.w	r0, r4, r0
 8000b98:	4091      	lsls	r1, r2
 8000b9a:	4097      	lsls	r7, r2
 8000b9c:	ea40 0c01 	orr.w	ip, r0, r1
 8000ba0:	4094      	lsls	r4, r2
 8000ba2:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000ba6:	0c23      	lsrs	r3, r4, #16
 8000ba8:	fbbc f6f8 	udiv	r6, ip, r8
 8000bac:	fa1f fe87 	uxth.w	lr, r7
 8000bb0:	fb08 c116 	mls	r1, r8, r6, ip
 8000bb4:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000bb8:	fb06 f10e 	mul.w	r1, r6, lr
 8000bbc:	4299      	cmp	r1, r3
 8000bbe:	d909      	bls.n	8000bd4 <__udivmoddi4+0x60>
 8000bc0:	18fb      	adds	r3, r7, r3
 8000bc2:	f106 30ff 	add.w	r0, r6, #4294967295
 8000bc6:	f080 8119 	bcs.w	8000dfc <__udivmoddi4+0x288>
 8000bca:	4299      	cmp	r1, r3
 8000bcc:	f240 8116 	bls.w	8000dfc <__udivmoddi4+0x288>
 8000bd0:	3e02      	subs	r6, #2
 8000bd2:	443b      	add	r3, r7
 8000bd4:	1a5b      	subs	r3, r3, r1
 8000bd6:	b2a4      	uxth	r4, r4
 8000bd8:	fbb3 f0f8 	udiv	r0, r3, r8
 8000bdc:	fb08 3310 	mls	r3, r8, r0, r3
 8000be0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000be4:	fb00 fe0e 	mul.w	lr, r0, lr
 8000be8:	45a6      	cmp	lr, r4
 8000bea:	d909      	bls.n	8000c00 <__udivmoddi4+0x8c>
 8000bec:	193c      	adds	r4, r7, r4
 8000bee:	f100 33ff 	add.w	r3, r0, #4294967295
 8000bf2:	f080 8105 	bcs.w	8000e00 <__udivmoddi4+0x28c>
 8000bf6:	45a6      	cmp	lr, r4
 8000bf8:	f240 8102 	bls.w	8000e00 <__udivmoddi4+0x28c>
 8000bfc:	3802      	subs	r0, #2
 8000bfe:	443c      	add	r4, r7
 8000c00:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000c04:	eba4 040e 	sub.w	r4, r4, lr
 8000c08:	2600      	movs	r6, #0
 8000c0a:	b11d      	cbz	r5, 8000c14 <__udivmoddi4+0xa0>
 8000c0c:	40d4      	lsrs	r4, r2
 8000c0e:	2300      	movs	r3, #0
 8000c10:	e9c5 4300 	strd	r4, r3, [r5]
 8000c14:	4631      	mov	r1, r6
 8000c16:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000c1a:	b902      	cbnz	r2, 8000c1e <__udivmoddi4+0xaa>
 8000c1c:	deff      	udf	#255	; 0xff
 8000c1e:	fab2 f282 	clz	r2, r2
 8000c22:	2a00      	cmp	r2, #0
 8000c24:	d150      	bne.n	8000cc8 <__udivmoddi4+0x154>
 8000c26:	1bcb      	subs	r3, r1, r7
 8000c28:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000c2c:	fa1f f887 	uxth.w	r8, r7
 8000c30:	2601      	movs	r6, #1
 8000c32:	fbb3 fcfe 	udiv	ip, r3, lr
 8000c36:	0c21      	lsrs	r1, r4, #16
 8000c38:	fb0e 331c 	mls	r3, lr, ip, r3
 8000c3c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000c40:	fb08 f30c 	mul.w	r3, r8, ip
 8000c44:	428b      	cmp	r3, r1
 8000c46:	d907      	bls.n	8000c58 <__udivmoddi4+0xe4>
 8000c48:	1879      	adds	r1, r7, r1
 8000c4a:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000c4e:	d202      	bcs.n	8000c56 <__udivmoddi4+0xe2>
 8000c50:	428b      	cmp	r3, r1
 8000c52:	f200 80e9 	bhi.w	8000e28 <__udivmoddi4+0x2b4>
 8000c56:	4684      	mov	ip, r0
 8000c58:	1ac9      	subs	r1, r1, r3
 8000c5a:	b2a3      	uxth	r3, r4
 8000c5c:	fbb1 f0fe 	udiv	r0, r1, lr
 8000c60:	fb0e 1110 	mls	r1, lr, r0, r1
 8000c64:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000c68:	fb08 f800 	mul.w	r8, r8, r0
 8000c6c:	45a0      	cmp	r8, r4
 8000c6e:	d907      	bls.n	8000c80 <__udivmoddi4+0x10c>
 8000c70:	193c      	adds	r4, r7, r4
 8000c72:	f100 33ff 	add.w	r3, r0, #4294967295
 8000c76:	d202      	bcs.n	8000c7e <__udivmoddi4+0x10a>
 8000c78:	45a0      	cmp	r8, r4
 8000c7a:	f200 80d9 	bhi.w	8000e30 <__udivmoddi4+0x2bc>
 8000c7e:	4618      	mov	r0, r3
 8000c80:	eba4 0408 	sub.w	r4, r4, r8
 8000c84:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000c88:	e7bf      	b.n	8000c0a <__udivmoddi4+0x96>
 8000c8a:	428b      	cmp	r3, r1
 8000c8c:	d909      	bls.n	8000ca2 <__udivmoddi4+0x12e>
 8000c8e:	2d00      	cmp	r5, #0
 8000c90:	f000 80b1 	beq.w	8000df6 <__udivmoddi4+0x282>
 8000c94:	2600      	movs	r6, #0
 8000c96:	e9c5 0100 	strd	r0, r1, [r5]
 8000c9a:	4630      	mov	r0, r6
 8000c9c:	4631      	mov	r1, r6
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	fab3 f683 	clz	r6, r3
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	d14a      	bne.n	8000d40 <__udivmoddi4+0x1cc>
 8000caa:	428b      	cmp	r3, r1
 8000cac:	d302      	bcc.n	8000cb4 <__udivmoddi4+0x140>
 8000cae:	4282      	cmp	r2, r0
 8000cb0:	f200 80b8 	bhi.w	8000e24 <__udivmoddi4+0x2b0>
 8000cb4:	1a84      	subs	r4, r0, r2
 8000cb6:	eb61 0103 	sbc.w	r1, r1, r3
 8000cba:	2001      	movs	r0, #1
 8000cbc:	468c      	mov	ip, r1
 8000cbe:	2d00      	cmp	r5, #0
 8000cc0:	d0a8      	beq.n	8000c14 <__udivmoddi4+0xa0>
 8000cc2:	e9c5 4c00 	strd	r4, ip, [r5]
 8000cc6:	e7a5      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000cc8:	f1c2 0320 	rsb	r3, r2, #32
 8000ccc:	fa20 f603 	lsr.w	r6, r0, r3
 8000cd0:	4097      	lsls	r7, r2
 8000cd2:	fa01 f002 	lsl.w	r0, r1, r2
 8000cd6:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cda:	40d9      	lsrs	r1, r3
 8000cdc:	4330      	orrs	r0, r6
 8000cde:	0c03      	lsrs	r3, r0, #16
 8000ce0:	fbb1 f6fe 	udiv	r6, r1, lr
 8000ce4:	fa1f f887 	uxth.w	r8, r7
 8000ce8:	fb0e 1116 	mls	r1, lr, r6, r1
 8000cec:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cf0:	fb06 f108 	mul.w	r1, r6, r8
 8000cf4:	4299      	cmp	r1, r3
 8000cf6:	fa04 f402 	lsl.w	r4, r4, r2
 8000cfa:	d909      	bls.n	8000d10 <__udivmoddi4+0x19c>
 8000cfc:	18fb      	adds	r3, r7, r3
 8000cfe:	f106 3cff 	add.w	ip, r6, #4294967295
 8000d02:	f080 808d 	bcs.w	8000e20 <__udivmoddi4+0x2ac>
 8000d06:	4299      	cmp	r1, r3
 8000d08:	f240 808a 	bls.w	8000e20 <__udivmoddi4+0x2ac>
 8000d0c:	3e02      	subs	r6, #2
 8000d0e:	443b      	add	r3, r7
 8000d10:	1a5b      	subs	r3, r3, r1
 8000d12:	b281      	uxth	r1, r0
 8000d14:	fbb3 f0fe 	udiv	r0, r3, lr
 8000d18:	fb0e 3310 	mls	r3, lr, r0, r3
 8000d1c:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000d20:	fb00 f308 	mul.w	r3, r0, r8
 8000d24:	428b      	cmp	r3, r1
 8000d26:	d907      	bls.n	8000d38 <__udivmoddi4+0x1c4>
 8000d28:	1879      	adds	r1, r7, r1
 8000d2a:	f100 3cff 	add.w	ip, r0, #4294967295
 8000d2e:	d273      	bcs.n	8000e18 <__udivmoddi4+0x2a4>
 8000d30:	428b      	cmp	r3, r1
 8000d32:	d971      	bls.n	8000e18 <__udivmoddi4+0x2a4>
 8000d34:	3802      	subs	r0, #2
 8000d36:	4439      	add	r1, r7
 8000d38:	1acb      	subs	r3, r1, r3
 8000d3a:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000d3e:	e778      	b.n	8000c32 <__udivmoddi4+0xbe>
 8000d40:	f1c6 0c20 	rsb	ip, r6, #32
 8000d44:	fa03 f406 	lsl.w	r4, r3, r6
 8000d48:	fa22 f30c 	lsr.w	r3, r2, ip
 8000d4c:	431c      	orrs	r4, r3
 8000d4e:	fa20 f70c 	lsr.w	r7, r0, ip
 8000d52:	fa01 f306 	lsl.w	r3, r1, r6
 8000d56:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000d5a:	fa21 f10c 	lsr.w	r1, r1, ip
 8000d5e:	431f      	orrs	r7, r3
 8000d60:	0c3b      	lsrs	r3, r7, #16
 8000d62:	fbb1 f9fe 	udiv	r9, r1, lr
 8000d66:	fa1f f884 	uxth.w	r8, r4
 8000d6a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000d6e:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000d72:	fb09 fa08 	mul.w	sl, r9, r8
 8000d76:	458a      	cmp	sl, r1
 8000d78:	fa02 f206 	lsl.w	r2, r2, r6
 8000d7c:	fa00 f306 	lsl.w	r3, r0, r6
 8000d80:	d908      	bls.n	8000d94 <__udivmoddi4+0x220>
 8000d82:	1861      	adds	r1, r4, r1
 8000d84:	f109 30ff 	add.w	r0, r9, #4294967295
 8000d88:	d248      	bcs.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8a:	458a      	cmp	sl, r1
 8000d8c:	d946      	bls.n	8000e1c <__udivmoddi4+0x2a8>
 8000d8e:	f1a9 0902 	sub.w	r9, r9, #2
 8000d92:	4421      	add	r1, r4
 8000d94:	eba1 010a 	sub.w	r1, r1, sl
 8000d98:	b2bf      	uxth	r7, r7
 8000d9a:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d9e:	fb0e 1110 	mls	r1, lr, r0, r1
 8000da2:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000da6:	fb00 f808 	mul.w	r8, r0, r8
 8000daa:	45b8      	cmp	r8, r7
 8000dac:	d907      	bls.n	8000dbe <__udivmoddi4+0x24a>
 8000dae:	19e7      	adds	r7, r4, r7
 8000db0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000db4:	d22e      	bcs.n	8000e14 <__udivmoddi4+0x2a0>
 8000db6:	45b8      	cmp	r8, r7
 8000db8:	d92c      	bls.n	8000e14 <__udivmoddi4+0x2a0>
 8000dba:	3802      	subs	r0, #2
 8000dbc:	4427      	add	r7, r4
 8000dbe:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dc2:	eba7 0708 	sub.w	r7, r7, r8
 8000dc6:	fba0 8902 	umull	r8, r9, r0, r2
 8000dca:	454f      	cmp	r7, r9
 8000dcc:	46c6      	mov	lr, r8
 8000dce:	4649      	mov	r1, r9
 8000dd0:	d31a      	bcc.n	8000e08 <__udivmoddi4+0x294>
 8000dd2:	d017      	beq.n	8000e04 <__udivmoddi4+0x290>
 8000dd4:	b15d      	cbz	r5, 8000dee <__udivmoddi4+0x27a>
 8000dd6:	ebb3 020e 	subs.w	r2, r3, lr
 8000dda:	eb67 0701 	sbc.w	r7, r7, r1
 8000dde:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000de2:	40f2      	lsrs	r2, r6
 8000de4:	ea4c 0202 	orr.w	r2, ip, r2
 8000de8:	40f7      	lsrs	r7, r6
 8000dea:	e9c5 2700 	strd	r2, r7, [r5]
 8000dee:	2600      	movs	r6, #0
 8000df0:	4631      	mov	r1, r6
 8000df2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000df6:	462e      	mov	r6, r5
 8000df8:	4628      	mov	r0, r5
 8000dfa:	e70b      	b.n	8000c14 <__udivmoddi4+0xa0>
 8000dfc:	4606      	mov	r6, r0
 8000dfe:	e6e9      	b.n	8000bd4 <__udivmoddi4+0x60>
 8000e00:	4618      	mov	r0, r3
 8000e02:	e6fd      	b.n	8000c00 <__udivmoddi4+0x8c>
 8000e04:	4543      	cmp	r3, r8
 8000e06:	d2e5      	bcs.n	8000dd4 <__udivmoddi4+0x260>
 8000e08:	ebb8 0e02 	subs.w	lr, r8, r2
 8000e0c:	eb69 0104 	sbc.w	r1, r9, r4
 8000e10:	3801      	subs	r0, #1
 8000e12:	e7df      	b.n	8000dd4 <__udivmoddi4+0x260>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e7d2      	b.n	8000dbe <__udivmoddi4+0x24a>
 8000e18:	4660      	mov	r0, ip
 8000e1a:	e78d      	b.n	8000d38 <__udivmoddi4+0x1c4>
 8000e1c:	4681      	mov	r9, r0
 8000e1e:	e7b9      	b.n	8000d94 <__udivmoddi4+0x220>
 8000e20:	4666      	mov	r6, ip
 8000e22:	e775      	b.n	8000d10 <__udivmoddi4+0x19c>
 8000e24:	4630      	mov	r0, r6
 8000e26:	e74a      	b.n	8000cbe <__udivmoddi4+0x14a>
 8000e28:	f1ac 0c02 	sub.w	ip, ip, #2
 8000e2c:	4439      	add	r1, r7
 8000e2e:	e713      	b.n	8000c58 <__udivmoddi4+0xe4>
 8000e30:	3802      	subs	r0, #2
 8000e32:	443c      	add	r4, r7
 8000e34:	e724      	b.n	8000c80 <__udivmoddi4+0x10c>
 8000e36:	bf00      	nop

08000e38 <__aeabi_idiv0>:
 8000e38:	4770      	bx	lr
 8000e3a:	bf00      	nop
 8000e3c:	0000      	movs	r0, r0
	...

08000e40 <calcsin>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void calcsin ()
{
 8000e40:	b580      	push	{r7, lr}
 8000e42:	b082      	sub	sp, #8
 8000e44:	af00      	add	r7, sp, #0
	for (int i=0; i<100; i++)
 8000e46:	2300      	movs	r3, #0
 8000e48:	607b      	str	r3, [r7, #4]
 8000e4a:	e03a      	b.n	8000ec2 <calcsin+0x82>
	{
		sine_val[i] = ((sin(i*2*PI/100) + 1)*(4096/2));
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	005b      	lsls	r3, r3, #1
 8000e50:	4618      	mov	r0, r3
 8000e52:	f7ff fb2b 	bl	80004ac <__aeabi_i2d>
 8000e56:	a324      	add	r3, pc, #144	; (adr r3, 8000ee8 <calcsin+0xa8>)
 8000e58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000e5c:	f7ff fb90 	bl	8000580 <__aeabi_dmul>
 8000e60:	4602      	mov	r2, r0
 8000e62:	460b      	mov	r3, r1
 8000e64:	4610      	mov	r0, r2
 8000e66:	4619      	mov	r1, r3
 8000e68:	f04f 0200 	mov.w	r2, #0
 8000e6c:	4b1a      	ldr	r3, [pc, #104]	; (8000ed8 <calcsin+0x98>)
 8000e6e:	f7ff fcb1 	bl	80007d4 <__aeabi_ddiv>
 8000e72:	4602      	mov	r2, r0
 8000e74:	460b      	mov	r3, r1
 8000e76:	ec43 2b17 	vmov	d7, r2, r3
 8000e7a:	eeb0 0a47 	vmov.f32	s0, s14
 8000e7e:	eef0 0a67 	vmov.f32	s1, s15
 8000e82:	f004 f9cd 	bl	8005220 <sin>
 8000e86:	ec51 0b10 	vmov	r0, r1, d0
 8000e8a:	f04f 0200 	mov.w	r2, #0
 8000e8e:	4b13      	ldr	r3, [pc, #76]	; (8000edc <calcsin+0x9c>)
 8000e90:	f7ff f9c0 	bl	8000214 <__adddf3>
 8000e94:	4602      	mov	r2, r0
 8000e96:	460b      	mov	r3, r1
 8000e98:	4610      	mov	r0, r2
 8000e9a:	4619      	mov	r1, r3
 8000e9c:	f04f 0200 	mov.w	r2, #0
 8000ea0:	4b0f      	ldr	r3, [pc, #60]	; (8000ee0 <calcsin+0xa0>)
 8000ea2:	f7ff fb6d 	bl	8000580 <__aeabi_dmul>
 8000ea6:	4602      	mov	r2, r0
 8000ea8:	460b      	mov	r3, r1
 8000eaa:	4610      	mov	r0, r2
 8000eac:	4619      	mov	r1, r3
 8000eae:	f7ff fe29 	bl	8000b04 <__aeabi_d2uiz>
 8000eb2:	4602      	mov	r2, r0
 8000eb4:	490b      	ldr	r1, [pc, #44]	; (8000ee4 <calcsin+0xa4>)
 8000eb6:	687b      	ldr	r3, [r7, #4]
 8000eb8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
	for (int i=0; i<100; i++)
 8000ebc:	687b      	ldr	r3, [r7, #4]
 8000ebe:	3301      	adds	r3, #1
 8000ec0:	607b      	str	r3, [r7, #4]
 8000ec2:	687b      	ldr	r3, [r7, #4]
 8000ec4:	2b63      	cmp	r3, #99	; 0x63
 8000ec6:	ddc1      	ble.n	8000e4c <calcsin+0xc>
	}
}
 8000ec8:	bf00      	nop
 8000eca:	bf00      	nop
 8000ecc:	3708      	adds	r7, #8
 8000ece:	46bd      	mov	sp, r7
 8000ed0:	bd80      	pop	{r7, pc}
 8000ed2:	bf00      	nop
 8000ed4:	f3af 8000 	nop.w
 8000ed8:	40590000 	.word	0x40590000
 8000edc:	3ff00000 	.word	0x3ff00000
 8000ee0:	40a00000 	.word	0x40a00000
 8000ee4:	200004fc 	.word	0x200004fc
 8000ee8:	4d12d84a 	.word	0x4d12d84a
 8000eec:	400921fb 	.word	0x400921fb

08000ef0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ef0:	b580      	push	{r7, lr}
 8000ef2:	b082      	sub	sp, #8
 8000ef4:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ef6:	f000 fc5e 	bl	80017b6 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000efa:	f000 f825 	bl	8000f48 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000efe:	f000 f9a7 	bl	8001250 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 8000f02:	f000 f929 	bl	8001158 <MX_USART3_UART_Init>
  MX_DMA_Init();
 8000f06:	f000 f985 	bl	8001214 <MX_DMA_Init>
  MX_DAC_Init();
 8000f0a:	f000 f8ad 	bl	8001068 <MX_DAC_Init>
  MX_TIM4_Init();
 8000f0e:	f000 f8d5 	bl	80010bc <MX_TIM4_Init>
  MX_USB_OTG_FS_PCD_Init();
 8000f12:	f000 f951 	bl	80011b8 <MX_USB_OTG_FS_PCD_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start(&htim4);
 8000f16:	4809      	ldr	r0, [pc, #36]	; (8000f3c <main+0x4c>)
 8000f18:	f002 ff9e 	bl	8003e58 <HAL_TIM_Base_Start>
  HAL_DAC_Start(&hdac, DAC_CHANNEL_1);
 8000f1c:	2100      	movs	r1, #0
 8000f1e:	4808      	ldr	r0, [pc, #32]	; (8000f40 <main+0x50>)
 8000f20:	f000 fdfd 	bl	8001b1e <HAL_DAC_Start>

  calcsin();
 8000f24:	f7ff ff8c 	bl	8000e40 <calcsin>
  HAL_DAC_Start_DMA(&hdac, DAC1_CHANNEL_1, sine_val, 100, DAC_ALIGN_12B_R);
 8000f28:	2300      	movs	r3, #0
 8000f2a:	9300      	str	r3, [sp, #0]
 8000f2c:	2364      	movs	r3, #100	; 0x64
 8000f2e:	4a05      	ldr	r2, [pc, #20]	; (8000f44 <main+0x54>)
 8000f30:	2100      	movs	r1, #0
 8000f32:	4803      	ldr	r0, [pc, #12]	; (8000f40 <main+0x50>)
 8000f34:	f000 fe46 	bl	8001bc4 <HAL_DAC_Start_DMA>

  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000f38:	e7fe      	b.n	8000f38 <main+0x48>
 8000f3a:	bf00      	nop
 8000f3c:	20000028 	.word	0x20000028
 8000f40:	200006ec 	.word	0x200006ec
 8000f44:	200004fc 	.word	0x200004fc

08000f48 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	b0b4      	sub	sp, #208	; 0xd0
 8000f4c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000f4e:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000f52:	2230      	movs	r2, #48	; 0x30
 8000f54:	2100      	movs	r1, #0
 8000f56:	4618      	mov	r0, r3
 8000f58:	f004 f95a 	bl	8005210 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000f5c:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 8000f60:	2200      	movs	r2, #0
 8000f62:	601a      	str	r2, [r3, #0]
 8000f64:	605a      	str	r2, [r3, #4]
 8000f66:	609a      	str	r2, [r3, #8]
 8000f68:	60da      	str	r2, [r3, #12]
 8000f6a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000f6c:	f107 0308 	add.w	r3, r7, #8
 8000f70:	2284      	movs	r2, #132	; 0x84
 8000f72:	2100      	movs	r1, #0
 8000f74:	4618      	mov	r0, r3
 8000f76:	f004 f94b 	bl	8005210 <memset>

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8000f7a:	f001 fe6f 	bl	8002c5c <HAL_PWR_EnableBkUpAccess>
  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000f7e:	4b37      	ldr	r3, [pc, #220]	; (800105c <SystemClock_Config+0x114>)
 8000f80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f82:	4a36      	ldr	r2, [pc, #216]	; (800105c <SystemClock_Config+0x114>)
 8000f84:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000f88:	6413      	str	r3, [r2, #64]	; 0x40
 8000f8a:	4b34      	ldr	r3, [pc, #208]	; (800105c <SystemClock_Config+0x114>)
 8000f8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f8e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000f96:	4b32      	ldr	r3, [pc, #200]	; (8001060 <SystemClock_Config+0x118>)
 8000f98:	681b      	ldr	r3, [r3, #0]
 8000f9a:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000f9e:	4a30      	ldr	r2, [pc, #192]	; (8001060 <SystemClock_Config+0x118>)
 8000fa0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000fa4:	6013      	str	r3, [r2, #0]
 8000fa6:	4b2e      	ldr	r3, [pc, #184]	; (8001060 <SystemClock_Config+0x118>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000fae:	603b      	str	r3, [r7, #0]
 8000fb0:	683b      	ldr	r3, [r7, #0]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000fb2:	2301      	movs	r3, #1
 8000fb4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8000fb8:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8000fbc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000fc0:	2302      	movs	r3, #2
 8000fc2:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000fc6:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8000fca:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
  RCC_OscInitStruct.PLL.PLLM = 4;
 8000fce:	2304      	movs	r3, #4
 8000fd0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  RCC_OscInitStruct.PLL.PLLN = 72;
 8000fd4:	2348      	movs	r3, #72	; 0x48
 8000fd6:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8000fda:	2302      	movs	r3, #2
 8000fdc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  RCC_OscInitStruct.PLL.PLLQ = 3;
 8000fe0:	2303      	movs	r3, #3
 8000fe2:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000fe6:	f107 03a0 	add.w	r3, r7, #160	; 0xa0
 8000fea:	4618      	mov	r0, r3
 8000fec:	f001 fe46 	bl	8002c7c <HAL_RCC_OscConfig>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <SystemClock_Config+0xb2>
  {
    Error_Handler();
 8000ff6:	f000 fa11 	bl	800141c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000ffa:	230f      	movs	r3, #15
 8000ffc:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001000:	2302      	movs	r3, #2
 8001002:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001006:	2300      	movs	r3, #0
 8001008:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800100c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001010:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001014:	2300      	movs	r3, #0
 8001016:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800101a:	f107 038c 	add.w	r3, r7, #140	; 0x8c
 800101e:	2102      	movs	r1, #2
 8001020:	4618      	mov	r0, r3
 8001022:	f002 f8cf 	bl	80031c4 <HAL_RCC_ClockConfig>
 8001026:	4603      	mov	r3, r0
 8001028:	2b00      	cmp	r3, #0
 800102a:	d001      	beq.n	8001030 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 800102c:	f000 f9f6 	bl	800141c <Error_Handler>
  }
  PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3|RCC_PERIPHCLK_CLK48;
 8001030:	4b0c      	ldr	r3, [pc, #48]	; (8001064 <SystemClock_Config+0x11c>)
 8001032:	60bb      	str	r3, [r7, #8]
  PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8001034:	2300      	movs	r3, #0
 8001036:	657b      	str	r3, [r7, #84]	; 0x54
  PeriphClkInitStruct.Clk48ClockSelection = RCC_CLK48SOURCE_PLL;
 8001038:	2300      	movs	r3, #0
 800103a:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800103e:	f107 0308 	add.w	r3, r7, #8
 8001042:	4618      	mov	r0, r3
 8001044:	f002 fac0 	bl	80035c8 <HAL_RCCEx_PeriphCLKConfig>
 8001048:	4603      	mov	r3, r0
 800104a:	2b00      	cmp	r3, #0
 800104c:	d001      	beq.n	8001052 <SystemClock_Config+0x10a>
  {
    Error_Handler();
 800104e:	f000 f9e5 	bl	800141c <Error_Handler>
  }
}
 8001052:	bf00      	nop
 8001054:	37d0      	adds	r7, #208	; 0xd0
 8001056:	46bd      	mov	sp, r7
 8001058:	bd80      	pop	{r7, pc}
 800105a:	bf00      	nop
 800105c:	40023800 	.word	0x40023800
 8001060:	40007000 	.word	0x40007000
 8001064:	00200100 	.word	0x00200100

08001068 <MX_DAC_Init>:
  * @brief DAC Initialization Function
  * @param None
  * @retval None
  */
static void MX_DAC_Init(void)
{
 8001068:	b580      	push	{r7, lr}
 800106a:	b082      	sub	sp, #8
 800106c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 800106e:	463b      	mov	r3, r7
 8001070:	2200      	movs	r2, #0
 8001072:	601a      	str	r2, [r3, #0]
 8001074:	605a      	str	r2, [r3, #4]
  /* USER CODE BEGIN DAC_Init 1 */

  /* USER CODE END DAC_Init 1 */
  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8001076:	4b0f      	ldr	r3, [pc, #60]	; (80010b4 <MX_DAC_Init+0x4c>)
 8001078:	4a0f      	ldr	r2, [pc, #60]	; (80010b8 <MX_DAC_Init+0x50>)
 800107a:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 800107c:	480d      	ldr	r0, [pc, #52]	; (80010b4 <MX_DAC_Init+0x4c>)
 800107e:	f000 fd2c 	bl	8001ada <HAL_DAC_Init>
 8001082:	4603      	mov	r3, r0
 8001084:	2b00      	cmp	r3, #0
 8001086:	d001      	beq.n	800108c <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8001088:	f000 f9c8 	bl	800141c <Error_Handler>
  }
  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_T4_TRGO;
 800108c:	232c      	movs	r3, #44	; 0x2c
 800108e:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8001090:	2300      	movs	r3, #0
 8001092:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8001094:	463b      	mov	r3, r7
 8001096:	2200      	movs	r2, #0
 8001098:	4619      	mov	r1, r3
 800109a:	4806      	ldr	r0, [pc, #24]	; (80010b4 <MX_DAC_Init+0x4c>)
 800109c:	f000 fe7e 	bl	8001d9c <HAL_DAC_ConfigChannel>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <MX_DAC_Init+0x42>
  {
    Error_Handler();
 80010a6:	f000 f9b9 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 80010aa:	bf00      	nop
 80010ac:	3708      	adds	r7, #8
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd80      	pop	{r7, pc}
 80010b2:	bf00      	nop
 80010b4:	200006ec 	.word	0x200006ec
 80010b8:	40007400 	.word	0x40007400

080010bc <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 80010bc:	b580      	push	{r7, lr}
 80010be:	b088      	sub	sp, #32
 80010c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */

  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80010c2:	f107 0310 	add.w	r3, r7, #16
 80010c6:	2200      	movs	r2, #0
 80010c8:	601a      	str	r2, [r3, #0]
 80010ca:	605a      	str	r2, [r3, #4]
 80010cc:	609a      	str	r2, [r3, #8]
 80010ce:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80010d0:	1d3b      	adds	r3, r7, #4
 80010d2:	2200      	movs	r2, #0
 80010d4:	601a      	str	r2, [r3, #0]
 80010d6:	605a      	str	r2, [r3, #4]
 80010d8:	609a      	str	r2, [r3, #8]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 80010da:	4b1d      	ldr	r3, [pc, #116]	; (8001150 <MX_TIM4_Init+0x94>)
 80010dc:	4a1d      	ldr	r2, [pc, #116]	; (8001154 <MX_TIM4_Init+0x98>)
 80010de:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 90-1;
 80010e0:	4b1b      	ldr	r3, [pc, #108]	; (8001150 <MX_TIM4_Init+0x94>)
 80010e2:	2259      	movs	r2, #89	; 0x59
 80010e4:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 80010e6:	4b1a      	ldr	r3, [pc, #104]	; (8001150 <MX_TIM4_Init+0x94>)
 80010e8:	2200      	movs	r2, #0
 80010ea:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 1000-1;
 80010ec:	4b18      	ldr	r3, [pc, #96]	; (8001150 <MX_TIM4_Init+0x94>)
 80010ee:	f240 32e7 	movw	r2, #999	; 0x3e7
 80010f2:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80010f4:	4b16      	ldr	r3, [pc, #88]	; (8001150 <MX_TIM4_Init+0x94>)
 80010f6:	2200      	movs	r2, #0
 80010f8:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80010fa:	4b15      	ldr	r3, [pc, #84]	; (8001150 <MX_TIM4_Init+0x94>)
 80010fc:	2200      	movs	r2, #0
 80010fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 8001100:	4813      	ldr	r0, [pc, #76]	; (8001150 <MX_TIM4_Init+0x94>)
 8001102:	f002 fe51 	bl	8003da8 <HAL_TIM_Base_Init>
 8001106:	4603      	mov	r3, r0
 8001108:	2b00      	cmp	r3, #0
 800110a:	d001      	beq.n	8001110 <MX_TIM4_Init+0x54>
  {
    Error_Handler();
 800110c:	f000 f986 	bl	800141c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001110:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001114:	613b      	str	r3, [r7, #16]
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 8001116:	f107 0310 	add.w	r3, r7, #16
 800111a:	4619      	mov	r1, r3
 800111c:	480c      	ldr	r0, [pc, #48]	; (8001150 <MX_TIM4_Init+0x94>)
 800111e:	f002 ff0b 	bl	8003f38 <HAL_TIM_ConfigClockSource>
 8001122:	4603      	mov	r3, r0
 8001124:	2b00      	cmp	r3, #0
 8001126:	d001      	beq.n	800112c <MX_TIM4_Init+0x70>
  {
    Error_Handler();
 8001128:	f000 f978 	bl	800141c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 800112c:	2320      	movs	r3, #32
 800112e:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001130:	2300      	movs	r3, #0
 8001132:	60fb      	str	r3, [r7, #12]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 8001134:	1d3b      	adds	r3, r7, #4
 8001136:	4619      	mov	r1, r3
 8001138:	4805      	ldr	r0, [pc, #20]	; (8001150 <MX_TIM4_Init+0x94>)
 800113a:	f003 f8fd 	bl	8004338 <HAL_TIMEx_MasterConfigSynchronization>
 800113e:	4603      	mov	r3, r0
 8001140:	2b00      	cmp	r3, #0
 8001142:	d001      	beq.n	8001148 <MX_TIM4_Init+0x8c>
  {
    Error_Handler();
 8001144:	f000 f96a 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */

}
 8001148:	bf00      	nop
 800114a:	3720      	adds	r7, #32
 800114c:	46bd      	mov	sp, r7
 800114e:	bd80      	pop	{r7, pc}
 8001150:	20000028 	.word	0x20000028
 8001154:	40000800 	.word	0x40000800

08001158 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001158:	b580      	push	{r7, lr}
 800115a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800115c:	4b14      	ldr	r3, [pc, #80]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800115e:	4a15      	ldr	r2, [pc, #84]	; (80011b4 <MX_USART3_UART_Init+0x5c>)
 8001160:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001162:	4b13      	ldr	r3, [pc, #76]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001164:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001168:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800116a:	4b11      	ldr	r3, [pc, #68]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800116c:	2200      	movs	r2, #0
 800116e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001170:	4b0f      	ldr	r3, [pc, #60]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001172:	2200      	movs	r2, #0
 8001174:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001176:	4b0e      	ldr	r3, [pc, #56]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001178:	2200      	movs	r2, #0
 800117a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800117c:	4b0c      	ldr	r3, [pc, #48]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800117e:	220c      	movs	r2, #12
 8001180:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001182:	4b0b      	ldr	r3, [pc, #44]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001184:	2200      	movs	r2, #0
 8001186:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001188:	4b09      	ldr	r3, [pc, #36]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800118a:	2200      	movs	r2, #0
 800118c:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800118e:	4b08      	ldr	r3, [pc, #32]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001190:	2200      	movs	r2, #0
 8001192:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8001194:	4b06      	ldr	r3, [pc, #24]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 8001196:	2200      	movs	r2, #0
 8001198:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800119a:	4805      	ldr	r0, [pc, #20]	; (80011b0 <MX_USART3_UART_Init+0x58>)
 800119c:	f003 f95a 	bl	8004454 <HAL_UART_Init>
 80011a0:	4603      	mov	r3, r0
 80011a2:	2b00      	cmp	r3, #0
 80011a4:	d001      	beq.n	80011aa <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80011a6:	f000 f939 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80011aa:	bf00      	nop
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	20000074 	.word	0x20000074
 80011b4:	40004800 	.word	0x40004800

080011b8 <MX_USB_OTG_FS_PCD_Init>:
  * @brief USB_OTG_FS Initialization Function
  * @param None
  * @retval None
  */
static void MX_USB_OTG_FS_PCD_Init(void)
{
 80011b8:	b580      	push	{r7, lr}
 80011ba:	af00      	add	r7, sp, #0
  /* USER CODE END USB_OTG_FS_Init 0 */

  /* USER CODE BEGIN USB_OTG_FS_Init 1 */

  /* USER CODE END USB_OTG_FS_Init 1 */
  hpcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80011bc:	4b14      	ldr	r3, [pc, #80]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011be:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80011c2:	601a      	str	r2, [r3, #0]
  hpcd_USB_OTG_FS.Init.dev_endpoints = 6;
 80011c4:	4b12      	ldr	r3, [pc, #72]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011c6:	2206      	movs	r2, #6
 80011c8:	605a      	str	r2, [r3, #4]
  hpcd_USB_OTG_FS.Init.speed = PCD_SPEED_FULL;
 80011ca:	4b11      	ldr	r3, [pc, #68]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011cc:	2202      	movs	r2, #2
 80011ce:	60da      	str	r2, [r3, #12]
  hpcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80011d0:	4b0f      	ldr	r3, [pc, #60]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d2:	2200      	movs	r2, #0
 80011d4:	611a      	str	r2, [r3, #16]
  hpcd_USB_OTG_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 80011d6:	4b0e      	ldr	r3, [pc, #56]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011d8:	2202      	movs	r2, #2
 80011da:	619a      	str	r2, [r3, #24]
  hpcd_USB_OTG_FS.Init.Sof_enable = ENABLE;
 80011dc:	4b0c      	ldr	r3, [pc, #48]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011de:	2201      	movs	r2, #1
 80011e0:	61da      	str	r2, [r3, #28]
  hpcd_USB_OTG_FS.Init.low_power_enable = DISABLE;
 80011e2:	4b0b      	ldr	r3, [pc, #44]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011e4:	2200      	movs	r2, #0
 80011e6:	621a      	str	r2, [r3, #32]
  hpcd_USB_OTG_FS.Init.lpm_enable = DISABLE;
 80011e8:	4b09      	ldr	r3, [pc, #36]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	625a      	str	r2, [r3, #36]	; 0x24
  hpcd_USB_OTG_FS.Init.vbus_sensing_enable = ENABLE;
 80011ee:	4b08      	ldr	r3, [pc, #32]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	62da      	str	r2, [r3, #44]	; 0x2c
  hpcd_USB_OTG_FS.Init.use_dedicated_ep1 = DISABLE;
 80011f4:	4b06      	ldr	r3, [pc, #24]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	631a      	str	r2, [r3, #48]	; 0x30
  if (HAL_PCD_Init(&hpcd_USB_OTG_FS) != HAL_OK)
 80011fa:	4805      	ldr	r0, [pc, #20]	; (8001210 <MX_USB_OTG_FS_PCD_Init+0x58>)
 80011fc:	f001 fbe5 	bl	80029ca <HAL_PCD_Init>
 8001200:	4603      	mov	r3, r0
 8001202:	2b00      	cmp	r3, #0
 8001204:	d001      	beq.n	800120a <MX_USB_OTG_FS_PCD_Init+0x52>
  {
    Error_Handler();
 8001206:	f000 f909 	bl	800141c <Error_Handler>
  }
  /* USER CODE BEGIN USB_OTG_FS_Init 2 */

  /* USER CODE END USB_OTG_FS_Init 2 */

}
 800120a:	bf00      	nop
 800120c:	bd80      	pop	{r7, pc}
 800120e:	bf00      	nop
 8001210:	200000f8 	.word	0x200000f8

08001214 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001214:	b580      	push	{r7, lr}
 8001216:	b082      	sub	sp, #8
 8001218:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800121a:	4b0c      	ldr	r3, [pc, #48]	; (800124c <MX_DMA_Init+0x38>)
 800121c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121e:	4a0b      	ldr	r2, [pc, #44]	; (800124c <MX_DMA_Init+0x38>)
 8001220:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001224:	6313      	str	r3, [r2, #48]	; 0x30
 8001226:	4b09      	ldr	r3, [pc, #36]	; (800124c <MX_DMA_Init+0x38>)
 8001228:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800122a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800122e:	607b      	str	r3, [r7, #4]
 8001230:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001232:	2200      	movs	r2, #0
 8001234:	2100      	movs	r1, #0
 8001236:	2010      	movs	r0, #16
 8001238:	f000 fc19 	bl	8001a6e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800123c:	2010      	movs	r0, #16
 800123e:	f000 fc32 	bl	8001aa6 <HAL_NVIC_EnableIRQ>

}
 8001242:	bf00      	nop
 8001244:	3708      	adds	r7, #8
 8001246:	46bd      	mov	sp, r7
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	40023800 	.word	0x40023800

08001250 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001250:	b580      	push	{r7, lr}
 8001252:	b08c      	sub	sp, #48	; 0x30
 8001254:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001256:	f107 031c 	add.w	r3, r7, #28
 800125a:	2200      	movs	r2, #0
 800125c:	601a      	str	r2, [r3, #0]
 800125e:	605a      	str	r2, [r3, #4]
 8001260:	609a      	str	r2, [r3, #8]
 8001262:	60da      	str	r2, [r3, #12]
 8001264:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001266:	4b67      	ldr	r3, [pc, #412]	; (8001404 <MX_GPIO_Init+0x1b4>)
 8001268:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800126a:	4a66      	ldr	r2, [pc, #408]	; (8001404 <MX_GPIO_Init+0x1b4>)
 800126c:	f043 0304 	orr.w	r3, r3, #4
 8001270:	6313      	str	r3, [r2, #48]	; 0x30
 8001272:	4b64      	ldr	r3, [pc, #400]	; (8001404 <MX_GPIO_Init+0x1b4>)
 8001274:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001276:	f003 0304 	and.w	r3, r3, #4
 800127a:	61bb      	str	r3, [r7, #24]
 800127c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800127e:	4b61      	ldr	r3, [pc, #388]	; (8001404 <MX_GPIO_Init+0x1b4>)
 8001280:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001282:	4a60      	ldr	r2, [pc, #384]	; (8001404 <MX_GPIO_Init+0x1b4>)
 8001284:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001288:	6313      	str	r3, [r2, #48]	; 0x30
 800128a:	4b5e      	ldr	r3, [pc, #376]	; (8001404 <MX_GPIO_Init+0x1b4>)
 800128c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800128e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001292:	617b      	str	r3, [r7, #20]
 8001294:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001296:	4b5b      	ldr	r3, [pc, #364]	; (8001404 <MX_GPIO_Init+0x1b4>)
 8001298:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800129a:	4a5a      	ldr	r2, [pc, #360]	; (8001404 <MX_GPIO_Init+0x1b4>)
 800129c:	f043 0301 	orr.w	r3, r3, #1
 80012a0:	6313      	str	r3, [r2, #48]	; 0x30
 80012a2:	4b58      	ldr	r3, [pc, #352]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012a6:	f003 0301 	and.w	r3, r3, #1
 80012aa:	613b      	str	r3, [r7, #16]
 80012ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80012ae:	4b55      	ldr	r3, [pc, #340]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012b2:	4a54      	ldr	r2, [pc, #336]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012b4:	f043 0302 	orr.w	r3, r3, #2
 80012b8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ba:	4b52      	ldr	r3, [pc, #328]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012be:	f003 0302 	and.w	r3, r3, #2
 80012c2:	60fb      	str	r3, [r7, #12]
 80012c4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80012c6:	4b4f      	ldr	r3, [pc, #316]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ca:	4a4e      	ldr	r2, [pc, #312]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012cc:	f043 0308 	orr.w	r3, r3, #8
 80012d0:	6313      	str	r3, [r2, #48]	; 0x30
 80012d2:	4b4c      	ldr	r3, [pc, #304]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012d6:	f003 0308 	and.w	r3, r3, #8
 80012da:	60bb      	str	r3, [r7, #8]
 80012dc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 80012de:	4b49      	ldr	r3, [pc, #292]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012e2:	4a48      	ldr	r2, [pc, #288]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80012e8:	6313      	str	r3, [r2, #48]	; 0x30
 80012ea:	4b46      	ldr	r3, [pc, #280]	; (8001404 <MX_GPIO_Init+0x1b4>)
 80012ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80012ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80012f2:	607b      	str	r3, [r7, #4]
 80012f4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD1_Pin|LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 80012f6:	2200      	movs	r2, #0
 80012f8:	f244 0181 	movw	r1, #16513	; 0x4081
 80012fc:	4842      	ldr	r0, [pc, #264]	; (8001408 <MX_GPIO_Init+0x1b8>)
 80012fe:	f001 fb4b 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(USB_PowerSwitchOn_GPIO_Port, USB_PowerSwitchOn_Pin, GPIO_PIN_RESET);
 8001302:	2200      	movs	r2, #0
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	4841      	ldr	r0, [pc, #260]	; (800140c <MX_GPIO_Init+0x1bc>)
 8001308:	f001 fb46 	bl	8002998 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : USER_Btn_Pin */
  GPIO_InitStruct.Pin = USER_Btn_Pin;
 800130c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001310:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001312:	4b3f      	ldr	r3, [pc, #252]	; (8001410 <MX_GPIO_Init+0x1c0>)
 8001314:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001316:	2300      	movs	r3, #0
 8001318:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USER_Btn_GPIO_Port, &GPIO_InitStruct);
 800131a:	f107 031c 	add.w	r3, r7, #28
 800131e:	4619      	mov	r1, r3
 8001320:	483c      	ldr	r0, [pc, #240]	; (8001414 <MX_GPIO_Init+0x1c4>)
 8001322:	f001 f98d 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_MDC_Pin RMII_RXD0_Pin RMII_RXD1_Pin */
  GPIO_InitStruct.Pin = RMII_MDC_Pin|RMII_RXD0_Pin|RMII_RXD1_Pin;
 8001326:	2332      	movs	r3, #50	; 0x32
 8001328:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132a:	2302      	movs	r3, #2
 800132c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800132e:	2300      	movs	r3, #0
 8001330:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001332:	2303      	movs	r3, #3
 8001334:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001336:	230b      	movs	r3, #11
 8001338:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800133a:	f107 031c 	add.w	r3, r7, #28
 800133e:	4619      	mov	r1, r3
 8001340:	4834      	ldr	r0, [pc, #208]	; (8001414 <MX_GPIO_Init+0x1c4>)
 8001342:	f001 f97d 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_REF_CLK_Pin RMII_MDIO_Pin RMII_CRS_DV_Pin */
  GPIO_InitStruct.Pin = RMII_REF_CLK_Pin|RMII_MDIO_Pin|RMII_CRS_DV_Pin;
 8001346:	2386      	movs	r3, #134	; 0x86
 8001348:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134a:	2302      	movs	r3, #2
 800134c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800134e:	2300      	movs	r3, #0
 8001350:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001352:	2303      	movs	r3, #3
 8001354:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001356:	230b      	movs	r3, #11
 8001358:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800135a:	f107 031c 	add.w	r3, r7, #28
 800135e:	4619      	mov	r1, r3
 8001360:	482d      	ldr	r0, [pc, #180]	; (8001418 <MX_GPIO_Init+0x1c8>)
 8001362:	f001 f96d 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : LD1_Pin LD3_Pin LD2_Pin */
  GPIO_InitStruct.Pin = LD1_Pin|LD3_Pin|LD2_Pin;
 8001366:	f244 0381 	movw	r3, #16513	; 0x4081
 800136a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800136c:	2301      	movs	r3, #1
 800136e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001370:	2300      	movs	r3, #0
 8001372:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001374:	2300      	movs	r3, #0
 8001376:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001378:	f107 031c 	add.w	r3, r7, #28
 800137c:	4619      	mov	r1, r3
 800137e:	4822      	ldr	r0, [pc, #136]	; (8001408 <MX_GPIO_Init+0x1b8>)
 8001380:	f001 f95e 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : RMII_TXD1_Pin */
  GPIO_InitStruct.Pin = RMII_TXD1_Pin;
 8001384:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001388:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800138a:	2302      	movs	r3, #2
 800138c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800138e:	2300      	movs	r3, #0
 8001390:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001392:	2303      	movs	r3, #3
 8001394:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8001396:	230b      	movs	r3, #11
 8001398:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(RMII_TXD1_GPIO_Port, &GPIO_InitStruct);
 800139a:	f107 031c 	add.w	r3, r7, #28
 800139e:	4619      	mov	r1, r3
 80013a0:	4819      	ldr	r0, [pc, #100]	; (8001408 <MX_GPIO_Init+0x1b8>)
 80013a2:	f001 f94d 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_PowerSwitchOn_Pin */
  GPIO_InitStruct.Pin = USB_PowerSwitchOn_Pin;
 80013a6:	2340      	movs	r3, #64	; 0x40
 80013a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80013aa:	2301      	movs	r3, #1
 80013ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ae:	2300      	movs	r3, #0
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80013b2:	2300      	movs	r3, #0
 80013b4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(USB_PowerSwitchOn_GPIO_Port, &GPIO_InitStruct);
 80013b6:	f107 031c 	add.w	r3, r7, #28
 80013ba:	4619      	mov	r1, r3
 80013bc:	4813      	ldr	r0, [pc, #76]	; (800140c <MX_GPIO_Init+0x1bc>)
 80013be:	f001 f93f 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pin : USB_OverCurrent_Pin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 80013c2:	2380      	movs	r3, #128	; 0x80
 80013c4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80013c6:	2300      	movs	r3, #0
 80013c8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013ca:	2300      	movs	r3, #0
 80013cc:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 80013ce:	f107 031c 	add.w	r3, r7, #28
 80013d2:	4619      	mov	r1, r3
 80013d4:	480d      	ldr	r0, [pc, #52]	; (800140c <MX_GPIO_Init+0x1bc>)
 80013d6:	f001 f933 	bl	8002640 <HAL_GPIO_Init>

  /*Configure GPIO pins : RMII_TX_EN_Pin RMII_TXD0_Pin */
  GPIO_InitStruct.Pin = RMII_TX_EN_Pin|RMII_TXD0_Pin;
 80013da:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 80013de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013e0:	2302      	movs	r3, #2
 80013e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013e4:	2300      	movs	r3, #0
 80013e6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013e8:	2303      	movs	r3, #3
 80013ea:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80013ec:	230b      	movs	r3, #11
 80013ee:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80013f0:	f107 031c 	add.w	r3, r7, #28
 80013f4:	4619      	mov	r1, r3
 80013f6:	4805      	ldr	r0, [pc, #20]	; (800140c <MX_GPIO_Init+0x1bc>)
 80013f8:	f001 f922 	bl	8002640 <HAL_GPIO_Init>

}
 80013fc:	bf00      	nop
 80013fe:	3730      	adds	r7, #48	; 0x30
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	40023800 	.word	0x40023800
 8001408:	40020400 	.word	0x40020400
 800140c:	40021800 	.word	0x40021800
 8001410:	10110000 	.word	0x10110000
 8001414:	40020800 	.word	0x40020800
 8001418:	40020000 	.word	0x40020000

0800141c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800141c:	b480      	push	{r7}
 800141e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001420:	b672      	cpsid	i
}
 8001422:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001424:	e7fe      	b.n	8001424 <Error_Handler+0x8>
	...

08001428 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001428:	b480      	push	{r7}
 800142a:	b083      	sub	sp, #12
 800142c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 800142e:	4b0f      	ldr	r3, [pc, #60]	; (800146c <HAL_MspInit+0x44>)
 8001430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001432:	4a0e      	ldr	r2, [pc, #56]	; (800146c <HAL_MspInit+0x44>)
 8001434:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001438:	6413      	str	r3, [r2, #64]	; 0x40
 800143a:	4b0c      	ldr	r3, [pc, #48]	; (800146c <HAL_MspInit+0x44>)
 800143c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800143e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001442:	607b      	str	r3, [r7, #4]
 8001444:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001446:	4b09      	ldr	r3, [pc, #36]	; (800146c <HAL_MspInit+0x44>)
 8001448:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800144a:	4a08      	ldr	r2, [pc, #32]	; (800146c <HAL_MspInit+0x44>)
 800144c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001450:	6453      	str	r3, [r2, #68]	; 0x44
 8001452:	4b06      	ldr	r3, [pc, #24]	; (800146c <HAL_MspInit+0x44>)
 8001454:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001456:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800145a:	603b      	str	r3, [r7, #0]
 800145c:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800145e:	bf00      	nop
 8001460:	370c      	adds	r7, #12
 8001462:	46bd      	mov	sp, r7
 8001464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001468:	4770      	bx	lr
 800146a:	bf00      	nop
 800146c:	40023800 	.word	0x40023800

08001470 <HAL_DAC_MspInit>:
* This function configures the hardware resources used in this example
* @param hdac: DAC handle pointer
* @retval None
*/
void HAL_DAC_MspInit(DAC_HandleTypeDef* hdac)
{
 8001470:	b580      	push	{r7, lr}
 8001472:	b08a      	sub	sp, #40	; 0x28
 8001474:	af00      	add	r7, sp, #0
 8001476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001478:	f107 0314 	add.w	r3, r7, #20
 800147c:	2200      	movs	r2, #0
 800147e:	601a      	str	r2, [r3, #0]
 8001480:	605a      	str	r2, [r3, #4]
 8001482:	609a      	str	r2, [r3, #8]
 8001484:	60da      	str	r2, [r3, #12]
 8001486:	611a      	str	r2, [r3, #16]
  if(hdac->Instance==DAC)
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	681b      	ldr	r3, [r3, #0]
 800148c:	4a2d      	ldr	r2, [pc, #180]	; (8001544 <HAL_DAC_MspInit+0xd4>)
 800148e:	4293      	cmp	r3, r2
 8001490:	d154      	bne.n	800153c <HAL_DAC_MspInit+0xcc>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8001492:	4b2d      	ldr	r3, [pc, #180]	; (8001548 <HAL_DAC_MspInit+0xd8>)
 8001494:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001496:	4a2c      	ldr	r2, [pc, #176]	; (8001548 <HAL_DAC_MspInit+0xd8>)
 8001498:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800149c:	6413      	str	r3, [r2, #64]	; 0x40
 800149e:	4b2a      	ldr	r3, [pc, #168]	; (8001548 <HAL_DAC_MspInit+0xd8>)
 80014a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a2:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80014a6:	613b      	str	r3, [r7, #16]
 80014a8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	4b27      	ldr	r3, [pc, #156]	; (8001548 <HAL_DAC_MspInit+0xd8>)
 80014ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ae:	4a26      	ldr	r2, [pc, #152]	; (8001548 <HAL_DAC_MspInit+0xd8>)
 80014b0:	f043 0301 	orr.w	r3, r3, #1
 80014b4:	6313      	str	r3, [r2, #48]	; 0x30
 80014b6:	4b24      	ldr	r3, [pc, #144]	; (8001548 <HAL_DAC_MspInit+0xd8>)
 80014b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014ba:	f003 0301 	and.w	r3, r3, #1
 80014be:	60fb      	str	r3, [r7, #12]
 80014c0:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80014c2:	2310      	movs	r3, #16
 80014c4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80014c6:	2303      	movs	r3, #3
 80014c8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80014ca:	2300      	movs	r3, #0
 80014cc:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80014ce:	f107 0314 	add.w	r3, r7, #20
 80014d2:	4619      	mov	r1, r3
 80014d4:	481d      	ldr	r0, [pc, #116]	; (800154c <HAL_DAC_MspInit+0xdc>)
 80014d6:	f001 f8b3 	bl	8002640 <HAL_GPIO_Init>

    /* DAC DMA Init */
    /* DAC1 Init */
    hdma_dac1.Instance = DMA1_Stream5;
 80014da:	4b1d      	ldr	r3, [pc, #116]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014dc:	4a1d      	ldr	r2, [pc, #116]	; (8001554 <HAL_DAC_MspInit+0xe4>)
 80014de:	601a      	str	r2, [r3, #0]
    hdma_dac1.Init.Channel = DMA_CHANNEL_7;
 80014e0:	4b1b      	ldr	r3, [pc, #108]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014e2:	f04f 6260 	mov.w	r2, #234881024	; 0xe000000
 80014e6:	605a      	str	r2, [r3, #4]
    hdma_dac1.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80014e8:	4b19      	ldr	r3, [pc, #100]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014ea:	2240      	movs	r2, #64	; 0x40
 80014ec:	609a      	str	r2, [r3, #8]
    hdma_dac1.Init.PeriphInc = DMA_PINC_DISABLE;
 80014ee:	4b18      	ldr	r3, [pc, #96]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
    hdma_dac1.Init.MemInc = DMA_MINC_ENABLE;
 80014f4:	4b16      	ldr	r3, [pc, #88]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fa:	611a      	str	r2, [r3, #16]
    hdma_dac1.Init.PeriphDataAlignment = DMA_PDATAALIGN_WORD;
 80014fc:	4b14      	ldr	r3, [pc, #80]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 80014fe:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 8001502:	615a      	str	r2, [r3, #20]
    hdma_dac1.Init.MemDataAlignment = DMA_MDATAALIGN_WORD;
 8001504:	4b12      	ldr	r3, [pc, #72]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 8001506:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800150a:	619a      	str	r2, [r3, #24]
    hdma_dac1.Init.Mode = DMA_CIRCULAR;
 800150c:	4b10      	ldr	r3, [pc, #64]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 800150e:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001512:	61da      	str	r2, [r3, #28]
    hdma_dac1.Init.Priority = DMA_PRIORITY_LOW;
 8001514:	4b0e      	ldr	r3, [pc, #56]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 8001516:	2200      	movs	r2, #0
 8001518:	621a      	str	r2, [r3, #32]
    hdma_dac1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800151a:	4b0d      	ldr	r3, [pc, #52]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 800151c:	2200      	movs	r2, #0
 800151e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_dac1) != HAL_OK)
 8001520:	480b      	ldr	r0, [pc, #44]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 8001522:	f000 fd15 	bl	8001f50 <HAL_DMA_Init>
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	d001      	beq.n	8001530 <HAL_DAC_MspInit+0xc0>
    {
      Error_Handler();
 800152c:	f7ff ff76 	bl	800141c <Error_Handler>
    }

    __HAL_LINKDMA(hdac,DMA_Handle1,hdma_dac1);
 8001530:	687b      	ldr	r3, [r7, #4]
 8001532:	4a07      	ldr	r2, [pc, #28]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 8001534:	609a      	str	r2, [r3, #8]
 8001536:	4a06      	ldr	r2, [pc, #24]	; (8001550 <HAL_DAC_MspInit+0xe0>)
 8001538:	687b      	ldr	r3, [r7, #4]
 800153a:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }

}
 800153c:	bf00      	nop
 800153e:	3728      	adds	r7, #40	; 0x28
 8001540:	46bd      	mov	sp, r7
 8001542:	bd80      	pop	{r7, pc}
 8001544:	40007400 	.word	0x40007400
 8001548:	40023800 	.word	0x40023800
 800154c:	40020000 	.word	0x40020000
 8001550:	2000068c 	.word	0x2000068c
 8001554:	40026088 	.word	0x40026088

08001558 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001558:	b480      	push	{r7}
 800155a:	b085      	sub	sp, #20
 800155c:	af00      	add	r7, sp, #0
 800155e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8001560:	687b      	ldr	r3, [r7, #4]
 8001562:	681b      	ldr	r3, [r3, #0]
 8001564:	4a0a      	ldr	r2, [pc, #40]	; (8001590 <HAL_TIM_Base_MspInit+0x38>)
 8001566:	4293      	cmp	r3, r2
 8001568:	d10b      	bne.n	8001582 <HAL_TIM_Base_MspInit+0x2a>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 800156a:	4b0a      	ldr	r3, [pc, #40]	; (8001594 <HAL_TIM_Base_MspInit+0x3c>)
 800156c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800156e:	4a09      	ldr	r2, [pc, #36]	; (8001594 <HAL_TIM_Base_MspInit+0x3c>)
 8001570:	f043 0304 	orr.w	r3, r3, #4
 8001574:	6413      	str	r3, [r2, #64]	; 0x40
 8001576:	4b07      	ldr	r3, [pc, #28]	; (8001594 <HAL_TIM_Base_MspInit+0x3c>)
 8001578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800157a:	f003 0304 	and.w	r3, r3, #4
 800157e:	60fb      	str	r3, [r7, #12]
 8001580:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8001582:	bf00      	nop
 8001584:	3714      	adds	r7, #20
 8001586:	46bd      	mov	sp, r7
 8001588:	f85d 7b04 	ldr.w	r7, [sp], #4
 800158c:	4770      	bx	lr
 800158e:	bf00      	nop
 8001590:	40000800 	.word	0x40000800
 8001594:	40023800 	.word	0x40023800

08001598 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001598:	b580      	push	{r7, lr}
 800159a:	b08a      	sub	sp, #40	; 0x28
 800159c:	af00      	add	r7, sp, #0
 800159e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a0:	f107 0314 	add.w	r3, r7, #20
 80015a4:	2200      	movs	r2, #0
 80015a6:	601a      	str	r2, [r3, #0]
 80015a8:	605a      	str	r2, [r3, #4]
 80015aa:	609a      	str	r2, [r3, #8]
 80015ac:	60da      	str	r2, [r3, #12]
 80015ae:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	4a17      	ldr	r2, [pc, #92]	; (8001614 <HAL_UART_MspInit+0x7c>)
 80015b6:	4293      	cmp	r3, r2
 80015b8:	d128      	bne.n	800160c <HAL_UART_MspInit+0x74>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 80015ba:	4b17      	ldr	r3, [pc, #92]	; (8001618 <HAL_UART_MspInit+0x80>)
 80015bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015be:	4a16      	ldr	r2, [pc, #88]	; (8001618 <HAL_UART_MspInit+0x80>)
 80015c0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80015c4:	6413      	str	r3, [r2, #64]	; 0x40
 80015c6:	4b14      	ldr	r3, [pc, #80]	; (8001618 <HAL_UART_MspInit+0x80>)
 80015c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015ca:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80015ce:	613b      	str	r3, [r7, #16]
 80015d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80015d2:	4b11      	ldr	r3, [pc, #68]	; (8001618 <HAL_UART_MspInit+0x80>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a10      	ldr	r2, [pc, #64]	; (8001618 <HAL_UART_MspInit+0x80>)
 80015d8:	f043 0308 	orr.w	r3, r3, #8
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b0e      	ldr	r3, [pc, #56]	; (8001618 <HAL_UART_MspInit+0x80>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0308 	and.w	r3, r3, #8
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PD8     ------> USART3_TX
    PD9     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 80015ea:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ee:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80015f0:	2302      	movs	r3, #2
 80015f2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f4:	2300      	movs	r3, #0
 80015f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80015f8:	2303      	movs	r3, #3
 80015fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80015fc:	2307      	movs	r3, #7
 80015fe:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001600:	f107 0314 	add.w	r3, r7, #20
 8001604:	4619      	mov	r1, r3
 8001606:	4805      	ldr	r0, [pc, #20]	; (800161c <HAL_UART_MspInit+0x84>)
 8001608:	f001 f81a 	bl	8002640 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 800160c:	bf00      	nop
 800160e:	3728      	adds	r7, #40	; 0x28
 8001610:	46bd      	mov	sp, r7
 8001612:	bd80      	pop	{r7, pc}
 8001614:	40004800 	.word	0x40004800
 8001618:	40023800 	.word	0x40023800
 800161c:	40020c00 	.word	0x40020c00

08001620 <HAL_PCD_MspInit>:
* This function configures the hardware resources used in this example
* @param hpcd: PCD handle pointer
* @retval None
*/
void HAL_PCD_MspInit(PCD_HandleTypeDef* hpcd)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b08a      	sub	sp, #40	; 0x28
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001628:	f107 0314 	add.w	r3, r7, #20
 800162c:	2200      	movs	r2, #0
 800162e:	601a      	str	r2, [r3, #0]
 8001630:	605a      	str	r2, [r3, #4]
 8001632:	609a      	str	r2, [r3, #8]
 8001634:	60da      	str	r2, [r3, #12]
 8001636:	611a      	str	r2, [r3, #16]
  if(hpcd->Instance==USB_OTG_FS)
 8001638:	687b      	ldr	r3, [r7, #4]
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8001640:	d141      	bne.n	80016c6 <HAL_PCD_MspInit+0xa6>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001642:	4b23      	ldr	r3, [pc, #140]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a22      	ldr	r2, [pc, #136]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 8001648:	f043 0301 	orr.w	r3, r3, #1
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b20      	ldr	r3, [pc, #128]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0301 	and.w	r3, r3, #1
 8001656:	613b      	str	r3, [r7, #16]
 8001658:	693b      	ldr	r3, [r7, #16]
    PA9     ------> USB_OTG_FS_VBUS
    PA10     ------> USB_OTG_FS_ID
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = USB_SOF_Pin|USB_ID_Pin|USB_DM_Pin|USB_DP_Pin;
 800165a:	f44f 53e8 	mov.w	r3, #7424	; 0x1d00
 800165e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001660:	2302      	movs	r3, #2
 8001662:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001664:	2300      	movs	r3, #0
 8001666:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001668:	2303      	movs	r3, #3
 800166a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 800166c:	230a      	movs	r3, #10
 800166e:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001670:	f107 0314 	add.w	r3, r7, #20
 8001674:	4619      	mov	r1, r3
 8001676:	4817      	ldr	r0, [pc, #92]	; (80016d4 <HAL_PCD_MspInit+0xb4>)
 8001678:	f000 ffe2 	bl	8002640 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = USB_VBUS_Pin;
 800167c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001680:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001682:	2300      	movs	r3, #0
 8001684:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(USB_VBUS_GPIO_Port, &GPIO_InitStruct);
 800168a:	f107 0314 	add.w	r3, r7, #20
 800168e:	4619      	mov	r1, r3
 8001690:	4810      	ldr	r0, [pc, #64]	; (80016d4 <HAL_PCD_MspInit+0xb4>)
 8001692:	f000 ffd5 	bl	8002640 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 8001696:	4b0e      	ldr	r3, [pc, #56]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 8001698:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800169a:	4a0d      	ldr	r2, [pc, #52]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 800169c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80016a0:	6353      	str	r3, [r2, #52]	; 0x34
 80016a2:	4b0b      	ldr	r3, [pc, #44]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 80016a4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80016a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80016aa:	60fb      	str	r3, [r7, #12]
 80016ac:	68fb      	ldr	r3, [r7, #12]
 80016ae:	4b08      	ldr	r3, [pc, #32]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 80016b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016b2:	4a07      	ldr	r2, [pc, #28]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 80016b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80016b8:	6453      	str	r3, [r2, #68]	; 0x44
 80016ba:	4b05      	ldr	r3, [pc, #20]	; (80016d0 <HAL_PCD_MspInit+0xb0>)
 80016bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80016c2:	60bb      	str	r3, [r7, #8]
 80016c4:	68bb      	ldr	r3, [r7, #8]
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }

}
 80016c6:	bf00      	nop
 80016c8:	3728      	adds	r7, #40	; 0x28
 80016ca:	46bd      	mov	sp, r7
 80016cc:	bd80      	pop	{r7, pc}
 80016ce:	bf00      	nop
 80016d0:	40023800 	.word	0x40023800
 80016d4:	40020000 	.word	0x40020000

080016d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80016d8:	b480      	push	{r7}
 80016da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80016dc:	e7fe      	b.n	80016dc <NMI_Handler+0x4>

080016de <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80016de:	b480      	push	{r7}
 80016e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80016e2:	e7fe      	b.n	80016e2 <HardFault_Handler+0x4>

080016e4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80016e4:	b480      	push	{r7}
 80016e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80016e8:	e7fe      	b.n	80016e8 <MemManage_Handler+0x4>

080016ea <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80016ea:	b480      	push	{r7}
 80016ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80016ee:	e7fe      	b.n	80016ee <BusFault_Handler+0x4>

080016f0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80016f0:	b480      	push	{r7}
 80016f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80016f4:	e7fe      	b.n	80016f4 <UsageFault_Handler+0x4>

080016f6 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80016f6:	b480      	push	{r7}
 80016f8:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80016fa:	bf00      	nop
 80016fc:	46bd      	mov	sp, r7
 80016fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001702:	4770      	bx	lr

08001704 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001704:	b480      	push	{r7}
 8001706:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001708:	bf00      	nop
 800170a:	46bd      	mov	sp, r7
 800170c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001710:	4770      	bx	lr

08001712 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001712:	b480      	push	{r7}
 8001714:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001716:	bf00      	nop
 8001718:	46bd      	mov	sp, r7
 800171a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800171e:	4770      	bx	lr

08001720 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001724:	f000 f884 	bl	8001830 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}

0800172c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_dac1);
 8001730:	4802      	ldr	r0, [pc, #8]	; (800173c <DMA1_Stream5_IRQHandler+0x10>)
 8001732:	f000 fd1b 	bl	800216c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001736:	bf00      	nop
 8001738:	bd80      	pop	{r7, pc}
 800173a:	bf00      	nop
 800173c:	2000068c 	.word	0x2000068c

08001740 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001740:	b480      	push	{r7}
 8001742:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001744:	4b06      	ldr	r3, [pc, #24]	; (8001760 <SystemInit+0x20>)
 8001746:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800174a:	4a05      	ldr	r2, [pc, #20]	; (8001760 <SystemInit+0x20>)
 800174c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8001750:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001754:	bf00      	nop
 8001756:	46bd      	mov	sp, r7
 8001758:	f85d 7b04 	ldr.w	r7, [sp], #4
 800175c:	4770      	bx	lr
 800175e:	bf00      	nop
 8001760:	e000ed00 	.word	0xe000ed00

08001764 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8001764:	f8df d034 	ldr.w	sp, [pc, #52]	; 800179c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001768:	480d      	ldr	r0, [pc, #52]	; (80017a0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800176a:	490e      	ldr	r1, [pc, #56]	; (80017a4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800176c:	4a0e      	ldr	r2, [pc, #56]	; (80017a8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800176e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001770:	e002      	b.n	8001778 <LoopCopyDataInit>

08001772 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001772:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001774:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001776:	3304      	adds	r3, #4

08001778 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001778:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800177a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800177c:	d3f9      	bcc.n	8001772 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800177e:	4a0b      	ldr	r2, [pc, #44]	; (80017ac <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001780:	4c0b      	ldr	r4, [pc, #44]	; (80017b0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001782:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001784:	e001      	b.n	800178a <LoopFillZerobss>

08001786 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001786:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001788:	3204      	adds	r2, #4

0800178a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800178a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800178c:	d3fb      	bcc.n	8001786 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800178e:	f7ff ffd7 	bl	8001740 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001792:	f003 fd19 	bl	80051c8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001796:	f7ff fbab 	bl	8000ef0 <main>
  bx  lr    
 800179a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 800179c:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80017a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80017a4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 80017a8:	080064b0 	.word	0x080064b0
  ldr r2, =_sbss
 80017ac:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 80017b0:	20000704 	.word	0x20000704

080017b4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80017b4:	e7fe      	b.n	80017b4 <ADC_IRQHandler>

080017b6 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80017b6:	b580      	push	{r7, lr}
 80017b8:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80017ba:	2003      	movs	r0, #3
 80017bc:	f000 f94c 	bl	8001a58 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80017c0:	2000      	movs	r0, #0
 80017c2:	f000 f805 	bl	80017d0 <HAL_InitTick>
  
  /* Init the low level hardware */
  HAL_MspInit();
 80017c6:	f7ff fe2f 	bl	8001428 <HAL_MspInit>
  
  /* Return function status */
  return HAL_OK;
 80017ca:	2300      	movs	r3, #0
}
 80017cc:	4618      	mov	r0, r3
 80017ce:	bd80      	pop	{r7, pc}

080017d0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
 80017d6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80017d8:	4b12      	ldr	r3, [pc, #72]	; (8001824 <HAL_InitTick+0x54>)
 80017da:	681a      	ldr	r2, [r3, #0]
 80017dc:	4b12      	ldr	r3, [pc, #72]	; (8001828 <HAL_InitTick+0x58>)
 80017de:	781b      	ldrb	r3, [r3, #0]
 80017e0:	4619      	mov	r1, r3
 80017e2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80017e6:	fbb3 f3f1 	udiv	r3, r3, r1
 80017ea:	fbb2 f3f3 	udiv	r3, r2, r3
 80017ee:	4618      	mov	r0, r3
 80017f0:	f000 f967 	bl	8001ac2 <HAL_SYSTICK_Config>
 80017f4:	4603      	mov	r3, r0
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	d001      	beq.n	80017fe <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80017fa:	2301      	movs	r3, #1
 80017fc:	e00e      	b.n	800181c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80017fe:	687b      	ldr	r3, [r7, #4]
 8001800:	2b0f      	cmp	r3, #15
 8001802:	d80a      	bhi.n	800181a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001804:	2200      	movs	r2, #0
 8001806:	6879      	ldr	r1, [r7, #4]
 8001808:	f04f 30ff 	mov.w	r0, #4294967295
 800180c:	f000 f92f 	bl	8001a6e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001810:	4a06      	ldr	r2, [pc, #24]	; (800182c <HAL_InitTick+0x5c>)
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001816:	2300      	movs	r3, #0
 8001818:	e000      	b.n	800181c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800181a:	2301      	movs	r3, #1
}
 800181c:	4618      	mov	r0, r3
 800181e:	3708      	adds	r7, #8
 8001820:	46bd      	mov	sp, r7
 8001822:	bd80      	pop	{r7, pc}
 8001824:	20000000 	.word	0x20000000
 8001828:	20000008 	.word	0x20000008
 800182c:	20000004 	.word	0x20000004

08001830 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001830:	b480      	push	{r7}
 8001832:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001834:	4b06      	ldr	r3, [pc, #24]	; (8001850 <HAL_IncTick+0x20>)
 8001836:	781b      	ldrb	r3, [r3, #0]
 8001838:	461a      	mov	r2, r3
 800183a:	4b06      	ldr	r3, [pc, #24]	; (8001854 <HAL_IncTick+0x24>)
 800183c:	681b      	ldr	r3, [r3, #0]
 800183e:	4413      	add	r3, r2
 8001840:	4a04      	ldr	r2, [pc, #16]	; (8001854 <HAL_IncTick+0x24>)
 8001842:	6013      	str	r3, [r2, #0]
}
 8001844:	bf00      	nop
 8001846:	46bd      	mov	sp, r7
 8001848:	f85d 7b04 	ldr.w	r7, [sp], #4
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	20000008 	.word	0x20000008
 8001854:	20000700 	.word	0x20000700

08001858 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001858:	b480      	push	{r7}
 800185a:	af00      	add	r7, sp, #0
  return uwTick;
 800185c:	4b03      	ldr	r3, [pc, #12]	; (800186c <HAL_GetTick+0x14>)
 800185e:	681b      	ldr	r3, [r3, #0]
}
 8001860:	4618      	mov	r0, r3
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr
 800186a:	bf00      	nop
 800186c:	20000700 	.word	0x20000700

08001870 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001870:	b580      	push	{r7, lr}
 8001872:	b084      	sub	sp, #16
 8001874:	af00      	add	r7, sp, #0
 8001876:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001878:	f7ff ffee 	bl	8001858 <HAL_GetTick>
 800187c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800187e:	687b      	ldr	r3, [r7, #4]
 8001880:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001882:	68fb      	ldr	r3, [r7, #12]
 8001884:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001888:	d005      	beq.n	8001896 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800188a:	4b0a      	ldr	r3, [pc, #40]	; (80018b4 <HAL_Delay+0x44>)
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	461a      	mov	r2, r3
 8001890:	68fb      	ldr	r3, [r7, #12]
 8001892:	4413      	add	r3, r2
 8001894:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001896:	bf00      	nop
 8001898:	f7ff ffde 	bl	8001858 <HAL_GetTick>
 800189c:	4602      	mov	r2, r0
 800189e:	68bb      	ldr	r3, [r7, #8]
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	68fa      	ldr	r2, [r7, #12]
 80018a4:	429a      	cmp	r2, r3
 80018a6:	d8f7      	bhi.n	8001898 <HAL_Delay+0x28>
  {
  }
}
 80018a8:	bf00      	nop
 80018aa:	bf00      	nop
 80018ac:	3710      	adds	r7, #16
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bd80      	pop	{r7, pc}
 80018b2:	bf00      	nop
 80018b4:	20000008 	.word	0x20000008

080018b8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80018b8:	b480      	push	{r7}
 80018ba:	b085      	sub	sp, #20
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80018c0:	687b      	ldr	r3, [r7, #4]
 80018c2:	f003 0307 	and.w	r3, r3, #7
 80018c6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80018c8:	4b0b      	ldr	r3, [pc, #44]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018ca:	68db      	ldr	r3, [r3, #12]
 80018cc:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80018ce:	68ba      	ldr	r2, [r7, #8]
 80018d0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80018d4:	4013      	ands	r3, r2
 80018d6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80018d8:	68fb      	ldr	r3, [r7, #12]
 80018da:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80018dc:	68bb      	ldr	r3, [r7, #8]
 80018de:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 80018e0:	4b06      	ldr	r3, [pc, #24]	; (80018fc <__NVIC_SetPriorityGrouping+0x44>)
 80018e2:	4313      	orrs	r3, r2
 80018e4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80018e6:	4a04      	ldr	r2, [pc, #16]	; (80018f8 <__NVIC_SetPriorityGrouping+0x40>)
 80018e8:	68bb      	ldr	r3, [r7, #8]
 80018ea:	60d3      	str	r3, [r2, #12]
}
 80018ec:	bf00      	nop
 80018ee:	3714      	adds	r7, #20
 80018f0:	46bd      	mov	sp, r7
 80018f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018f6:	4770      	bx	lr
 80018f8:	e000ed00 	.word	0xe000ed00
 80018fc:	05fa0000 	.word	0x05fa0000

08001900 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001900:	b480      	push	{r7}
 8001902:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001904:	4b04      	ldr	r3, [pc, #16]	; (8001918 <__NVIC_GetPriorityGrouping+0x18>)
 8001906:	68db      	ldr	r3, [r3, #12]
 8001908:	0a1b      	lsrs	r3, r3, #8
 800190a:	f003 0307 	and.w	r3, r3, #7
}
 800190e:	4618      	mov	r0, r3
 8001910:	46bd      	mov	sp, r7
 8001912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001916:	4770      	bx	lr
 8001918:	e000ed00 	.word	0xe000ed00

0800191c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800191c:	b480      	push	{r7}
 800191e:	b083      	sub	sp, #12
 8001920:	af00      	add	r7, sp, #0
 8001922:	4603      	mov	r3, r0
 8001924:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001926:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800192a:	2b00      	cmp	r3, #0
 800192c:	db0b      	blt.n	8001946 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800192e:	79fb      	ldrb	r3, [r7, #7]
 8001930:	f003 021f 	and.w	r2, r3, #31
 8001934:	4907      	ldr	r1, [pc, #28]	; (8001954 <__NVIC_EnableIRQ+0x38>)
 8001936:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800193a:	095b      	lsrs	r3, r3, #5
 800193c:	2001      	movs	r0, #1
 800193e:	fa00 f202 	lsl.w	r2, r0, r2
 8001942:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001946:	bf00      	nop
 8001948:	370c      	adds	r7, #12
 800194a:	46bd      	mov	sp, r7
 800194c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001950:	4770      	bx	lr
 8001952:	bf00      	nop
 8001954:	e000e100 	.word	0xe000e100

08001958 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001958:	b480      	push	{r7}
 800195a:	b083      	sub	sp, #12
 800195c:	af00      	add	r7, sp, #0
 800195e:	4603      	mov	r3, r0
 8001960:	6039      	str	r1, [r7, #0]
 8001962:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001964:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001968:	2b00      	cmp	r3, #0
 800196a:	db0a      	blt.n	8001982 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	b2da      	uxtb	r2, r3
 8001970:	490c      	ldr	r1, [pc, #48]	; (80019a4 <__NVIC_SetPriority+0x4c>)
 8001972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001976:	0112      	lsls	r2, r2, #4
 8001978:	b2d2      	uxtb	r2, r2
 800197a:	440b      	add	r3, r1
 800197c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001980:	e00a      	b.n	8001998 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	b2da      	uxtb	r2, r3
 8001986:	4908      	ldr	r1, [pc, #32]	; (80019a8 <__NVIC_SetPriority+0x50>)
 8001988:	79fb      	ldrb	r3, [r7, #7]
 800198a:	f003 030f 	and.w	r3, r3, #15
 800198e:	3b04      	subs	r3, #4
 8001990:	0112      	lsls	r2, r2, #4
 8001992:	b2d2      	uxtb	r2, r2
 8001994:	440b      	add	r3, r1
 8001996:	761a      	strb	r2, [r3, #24]
}
 8001998:	bf00      	nop
 800199a:	370c      	adds	r7, #12
 800199c:	46bd      	mov	sp, r7
 800199e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019a2:	4770      	bx	lr
 80019a4:	e000e100 	.word	0xe000e100
 80019a8:	e000ed00 	.word	0xe000ed00

080019ac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80019ac:	b480      	push	{r7}
 80019ae:	b089      	sub	sp, #36	; 0x24
 80019b0:	af00      	add	r7, sp, #0
 80019b2:	60f8      	str	r0, [r7, #12]
 80019b4:	60b9      	str	r1, [r7, #8]
 80019b6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80019b8:	68fb      	ldr	r3, [r7, #12]
 80019ba:	f003 0307 	and.w	r3, r3, #7
 80019be:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80019c0:	69fb      	ldr	r3, [r7, #28]
 80019c2:	f1c3 0307 	rsb	r3, r3, #7
 80019c6:	2b04      	cmp	r3, #4
 80019c8:	bf28      	it	cs
 80019ca:	2304      	movcs	r3, #4
 80019cc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80019ce:	69fb      	ldr	r3, [r7, #28]
 80019d0:	3304      	adds	r3, #4
 80019d2:	2b06      	cmp	r3, #6
 80019d4:	d902      	bls.n	80019dc <NVIC_EncodePriority+0x30>
 80019d6:	69fb      	ldr	r3, [r7, #28]
 80019d8:	3b03      	subs	r3, #3
 80019da:	e000      	b.n	80019de <NVIC_EncodePriority+0x32>
 80019dc:	2300      	movs	r3, #0
 80019de:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80019e0:	f04f 32ff 	mov.w	r2, #4294967295
 80019e4:	69bb      	ldr	r3, [r7, #24]
 80019e6:	fa02 f303 	lsl.w	r3, r2, r3
 80019ea:	43da      	mvns	r2, r3
 80019ec:	68bb      	ldr	r3, [r7, #8]
 80019ee:	401a      	ands	r2, r3
 80019f0:	697b      	ldr	r3, [r7, #20]
 80019f2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80019f4:	f04f 31ff 	mov.w	r1, #4294967295
 80019f8:	697b      	ldr	r3, [r7, #20]
 80019fa:	fa01 f303 	lsl.w	r3, r1, r3
 80019fe:	43d9      	mvns	r1, r3
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a04:	4313      	orrs	r3, r2
         );
}
 8001a06:	4618      	mov	r0, r3
 8001a08:	3724      	adds	r7, #36	; 0x24
 8001a0a:	46bd      	mov	sp, r7
 8001a0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a10:	4770      	bx	lr
	...

08001a14 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	b082      	sub	sp, #8
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	3b01      	subs	r3, #1
 8001a20:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8001a24:	d301      	bcc.n	8001a2a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a26:	2301      	movs	r3, #1
 8001a28:	e00f      	b.n	8001a4a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a2a:	4a0a      	ldr	r2, [pc, #40]	; (8001a54 <SysTick_Config+0x40>)
 8001a2c:	687b      	ldr	r3, [r7, #4]
 8001a2e:	3b01      	subs	r3, #1
 8001a30:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a32:	210f      	movs	r1, #15
 8001a34:	f04f 30ff 	mov.w	r0, #4294967295
 8001a38:	f7ff ff8e 	bl	8001958 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001a3c:	4b05      	ldr	r3, [pc, #20]	; (8001a54 <SysTick_Config+0x40>)
 8001a3e:	2200      	movs	r2, #0
 8001a40:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001a42:	4b04      	ldr	r3, [pc, #16]	; (8001a54 <SysTick_Config+0x40>)
 8001a44:	2207      	movs	r2, #7
 8001a46:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001a48:	2300      	movs	r3, #0
}
 8001a4a:	4618      	mov	r0, r3
 8001a4c:	3708      	adds	r7, #8
 8001a4e:	46bd      	mov	sp, r7
 8001a50:	bd80      	pop	{r7, pc}
 8001a52:	bf00      	nop
 8001a54:	e000e010 	.word	0xe000e010

08001a58 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b082      	sub	sp, #8
 8001a5c:	af00      	add	r7, sp, #0
 8001a5e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001a60:	6878      	ldr	r0, [r7, #4]
 8001a62:	f7ff ff29 	bl	80018b8 <__NVIC_SetPriorityGrouping>
}
 8001a66:	bf00      	nop
 8001a68:	3708      	adds	r7, #8
 8001a6a:	46bd      	mov	sp, r7
 8001a6c:	bd80      	pop	{r7, pc}

08001a6e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001a6e:	b580      	push	{r7, lr}
 8001a70:	b086      	sub	sp, #24
 8001a72:	af00      	add	r7, sp, #0
 8001a74:	4603      	mov	r3, r0
 8001a76:	60b9      	str	r1, [r7, #8]
 8001a78:	607a      	str	r2, [r7, #4]
 8001a7a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001a80:	f7ff ff3e 	bl	8001900 <__NVIC_GetPriorityGrouping>
 8001a84:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001a86:	687a      	ldr	r2, [r7, #4]
 8001a88:	68b9      	ldr	r1, [r7, #8]
 8001a8a:	6978      	ldr	r0, [r7, #20]
 8001a8c:	f7ff ff8e 	bl	80019ac <NVIC_EncodePriority>
 8001a90:	4602      	mov	r2, r0
 8001a92:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001a96:	4611      	mov	r1, r2
 8001a98:	4618      	mov	r0, r3
 8001a9a:	f7ff ff5d 	bl	8001958 <__NVIC_SetPriority>
}
 8001a9e:	bf00      	nop
 8001aa0:	3718      	adds	r7, #24
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	bd80      	pop	{r7, pc}

08001aa6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001aa6:	b580      	push	{r7, lr}
 8001aa8:	b082      	sub	sp, #8
 8001aaa:	af00      	add	r7, sp, #0
 8001aac:	4603      	mov	r3, r0
 8001aae:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001ab0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001ab4:	4618      	mov	r0, r3
 8001ab6:	f7ff ff31 	bl	800191c <__NVIC_EnableIRQ>
}
 8001aba:	bf00      	nop
 8001abc:	3708      	adds	r7, #8
 8001abe:	46bd      	mov	sp, r7
 8001ac0:	bd80      	pop	{r7, pc}

08001ac2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001ac2:	b580      	push	{r7, lr}
 8001ac4:	b082      	sub	sp, #8
 8001ac6:	af00      	add	r7, sp, #0
 8001ac8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001aca:	6878      	ldr	r0, [r7, #4]
 8001acc:	f7ff ffa2 	bl	8001a14 <SysTick_Config>
 8001ad0:	4603      	mov	r3, r0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b082      	sub	sp, #8
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	6078      	str	r0, [r7, #4]
  /* Check DAC handle */
  if (hdac == NULL)
 8001ae2:	687b      	ldr	r3, [r7, #4]
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d101      	bne.n	8001aec <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8001ae8:	2301      	movs	r3, #1
 8001aea:	e014      	b.n	8001b16 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8001aec:	687b      	ldr	r3, [r7, #4]
 8001aee:	791b      	ldrb	r3, [r3, #4]
 8001af0:	b2db      	uxtb	r3, r3
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d105      	bne.n	8001b02 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2200      	movs	r2, #0
 8001afa:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8001afc:	6878      	ldr	r0, [r7, #4]
 8001afe:	f7ff fcb7 	bl	8001470 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b02:	687b      	ldr	r3, [r7, #4]
 8001b04:	2202      	movs	r2, #2
 8001b06:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8001b08:	687b      	ldr	r3, [r7, #4]
 8001b0a:	2200      	movs	r2, #0
 8001b0c:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	2201      	movs	r2, #1
 8001b12:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8001b14:	2300      	movs	r3, #0
}
 8001b16:	4618      	mov	r0, r3
 8001b18:	3708      	adds	r7, #8
 8001b1a:	46bd      	mov	sp, r7
 8001b1c:	bd80      	pop	{r7, pc}

08001b1e <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8001b1e:	b480      	push	{r7}
 8001b20:	b083      	sub	sp, #12
 8001b22:	af00      	add	r7, sp, #0
 8001b24:	6078      	str	r0, [r7, #4]
 8001b26:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001b28:	687b      	ldr	r3, [r7, #4]
 8001b2a:	795b      	ldrb	r3, [r3, #5]
 8001b2c:	2b01      	cmp	r3, #1
 8001b2e:	d101      	bne.n	8001b34 <HAL_DAC_Start+0x16>
 8001b30:	2302      	movs	r3, #2
 8001b32:	e040      	b.n	8001bb6 <HAL_DAC_Start+0x98>
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	2202      	movs	r2, #2
 8001b3e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	681b      	ldr	r3, [r3, #0]
 8001b44:	6819      	ldr	r1, [r3, #0]
 8001b46:	683b      	ldr	r3, [r7, #0]
 8001b48:	f003 0310 	and.w	r3, r3, #16
 8001b4c:	2201      	movs	r2, #1
 8001b4e:	409a      	lsls	r2, r3
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	430a      	orrs	r2, r1
 8001b56:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8001b58:	683b      	ldr	r3, [r7, #0]
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d10f      	bne.n	8001b7e <HAL_DAC_Start+0x60>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8001b5e:	687b      	ldr	r3, [r7, #4]
 8001b60:	681b      	ldr	r3, [r3, #0]
 8001b62:	681b      	ldr	r3, [r3, #0]
 8001b64:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8001b68:	2b3c      	cmp	r3, #60	; 0x3c
 8001b6a:	d11d      	bne.n	8001ba8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	685a      	ldr	r2, [r3, #4]
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	f042 0201 	orr.w	r2, r2, #1
 8001b7a:	605a      	str	r2, [r3, #4]
 8001b7c:	e014      	b.n	8001ba8 <HAL_DAC_Start+0x8a>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	681b      	ldr	r3, [r3, #0]
 8001b84:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8001b88:	683b      	ldr	r3, [r7, #0]
 8001b8a:	f003 0310 	and.w	r3, r3, #16
 8001b8e:	213c      	movs	r1, #60	; 0x3c
 8001b90:	fa01 f303 	lsl.w	r3, r1, r3
 8001b94:	429a      	cmp	r2, r3
 8001b96:	d107      	bne.n	8001ba8 <HAL_DAC_Start+0x8a>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	685a      	ldr	r2, [r3, #4]
 8001b9e:	687b      	ldr	r3, [r7, #4]
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	f042 0202 	orr.w	r2, r2, #2
 8001ba6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2201      	movs	r2, #1
 8001bac:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001bae:	687b      	ldr	r3, [r7, #4]
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001bb4:	2300      	movs	r3, #0
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	370c      	adds	r7, #12
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bc0:	4770      	bx	lr
	...

08001bc4 <HAL_DAC_Start_DMA>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start_DMA(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t *pData, uint32_t Length,
                                    uint32_t Alignment)
{
 8001bc4:	b580      	push	{r7, lr}
 8001bc6:	b086      	sub	sp, #24
 8001bc8:	af00      	add	r7, sp, #0
 8001bca:	60f8      	str	r0, [r7, #12]
 8001bcc:	60b9      	str	r1, [r7, #8]
 8001bce:	607a      	str	r2, [r7, #4]
 8001bd0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8001bd2:	2301      	movs	r3, #1
 8001bd4:	75fb      	strb	r3, [r7, #23]
  uint32_t tmpreg = 0U;
 8001bd6:	2300      	movs	r3, #0
 8001bd8:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001bda:	68fb      	ldr	r3, [r7, #12]
 8001bdc:	795b      	ldrb	r3, [r3, #5]
 8001bde:	2b01      	cmp	r3, #1
 8001be0:	d101      	bne.n	8001be6 <HAL_DAC_Start_DMA+0x22>
 8001be2:	2302      	movs	r3, #2
 8001be4:	e0ab      	b.n	8001d3e <HAL_DAC_Start_DMA+0x17a>
 8001be6:	68fb      	ldr	r3, [r7, #12]
 8001be8:	2201      	movs	r2, #1
 8001bea:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001bec:	68fb      	ldr	r3, [r7, #12]
 8001bee:	2202      	movs	r2, #2
 8001bf0:	711a      	strb	r2, [r3, #4]

  if (Channel == DAC_CHANNEL_1)
 8001bf2:	68bb      	ldr	r3, [r7, #8]
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	d12f      	bne.n	8001c58 <HAL_DAC_Start_DMA+0x94>
  {
    /* Set the DMA transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferCpltCallback = DAC_DMAConvCpltCh1;
 8001bf8:	68fb      	ldr	r3, [r7, #12]
 8001bfa:	689b      	ldr	r3, [r3, #8]
 8001bfc:	4a52      	ldr	r2, [pc, #328]	; (8001d48 <HAL_DAC_Start_DMA+0x184>)
 8001bfe:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel1 */
    hdac->DMA_Handle1->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh1;
 8001c00:	68fb      	ldr	r3, [r7, #12]
 8001c02:	689b      	ldr	r3, [r3, #8]
 8001c04:	4a51      	ldr	r2, [pc, #324]	; (8001d4c <HAL_DAC_Start_DMA+0x188>)
 8001c06:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel1 */
    hdac->DMA_Handle1->XferErrorCallback = DAC_DMAErrorCh1;
 8001c08:	68fb      	ldr	r3, [r7, #12]
 8001c0a:	689b      	ldr	r3, [r3, #8]
 8001c0c:	4a50      	ldr	r2, [pc, #320]	; (8001d50 <HAL_DAC_Start_DMA+0x18c>)
 8001c0e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel1 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN1);
 8001c10:	68fb      	ldr	r3, [r7, #12]
 8001c12:	681b      	ldr	r3, [r3, #0]
 8001c14:	681a      	ldr	r2, [r3, #0]
 8001c16:	68fb      	ldr	r3, [r7, #12]
 8001c18:	681b      	ldr	r3, [r3, #0]
 8001c1a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8001c1e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 1 */
    switch (Alignment)
 8001c20:	6a3b      	ldr	r3, [r7, #32]
 8001c22:	2b08      	cmp	r3, #8
 8001c24:	d013      	beq.n	8001c4e <HAL_DAC_Start_DMA+0x8a>
 8001c26:	6a3b      	ldr	r3, [r7, #32]
 8001c28:	2b08      	cmp	r3, #8
 8001c2a:	d845      	bhi.n	8001cb8 <HAL_DAC_Start_DMA+0xf4>
 8001c2c:	6a3b      	ldr	r3, [r7, #32]
 8001c2e:	2b00      	cmp	r3, #0
 8001c30:	d003      	beq.n	8001c3a <HAL_DAC_Start_DMA+0x76>
 8001c32:	6a3b      	ldr	r3, [r7, #32]
 8001c34:	2b04      	cmp	r3, #4
 8001c36:	d005      	beq.n	8001c44 <HAL_DAC_Start_DMA+0x80>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R1 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
        break;
      default:
        break;
 8001c38:	e03e      	b.n	8001cb8 <HAL_DAC_Start_DMA+0xf4>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R1;
 8001c3a:	68fb      	ldr	r3, [r7, #12]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	3308      	adds	r3, #8
 8001c40:	613b      	str	r3, [r7, #16]
        break;
 8001c42:	e03c      	b.n	8001cbe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L1;
 8001c44:	68fb      	ldr	r3, [r7, #12]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	330c      	adds	r3, #12
 8001c4a:	613b      	str	r3, [r7, #16]
        break;
 8001c4c:	e037      	b.n	8001cbe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R1;
 8001c4e:	68fb      	ldr	r3, [r7, #12]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	3310      	adds	r3, #16
 8001c54:	613b      	str	r3, [r7, #16]
        break;
 8001c56:	e032      	b.n	8001cbe <HAL_DAC_Start_DMA+0xfa>
  }

  else
  {
    /* Set the DMA transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferCpltCallback = DAC_DMAConvCpltCh2;
 8001c58:	68fb      	ldr	r3, [r7, #12]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	4a3d      	ldr	r2, [pc, #244]	; (8001d54 <HAL_DAC_Start_DMA+0x190>)
 8001c5e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback for channel2 */
    hdac->DMA_Handle2->XferHalfCpltCallback = DAC_DMAHalfConvCpltCh2;
 8001c60:	68fb      	ldr	r3, [r7, #12]
 8001c62:	68db      	ldr	r3, [r3, #12]
 8001c64:	4a3c      	ldr	r2, [pc, #240]	; (8001d58 <HAL_DAC_Start_DMA+0x194>)
 8001c66:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback for channel2 */
    hdac->DMA_Handle2->XferErrorCallback = DAC_DMAErrorCh2;
 8001c68:	68fb      	ldr	r3, [r7, #12]
 8001c6a:	68db      	ldr	r3, [r3, #12]
 8001c6c:	4a3b      	ldr	r2, [pc, #236]	; (8001d5c <HAL_DAC_Start_DMA+0x198>)
 8001c6e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Enable the selected DAC channel2 DMA request */
    SET_BIT(hdac->Instance->CR, DAC_CR_DMAEN2);
 8001c70:	68fb      	ldr	r3, [r7, #12]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	681a      	ldr	r2, [r3, #0]
 8001c76:	68fb      	ldr	r3, [r7, #12]
 8001c78:	681b      	ldr	r3, [r3, #0]
 8001c7a:	f042 5280 	orr.w	r2, r2, #268435456	; 0x10000000
 8001c7e:	601a      	str	r2, [r3, #0]

    /* Case of use of channel 2 */
    switch (Alignment)
 8001c80:	6a3b      	ldr	r3, [r7, #32]
 8001c82:	2b08      	cmp	r3, #8
 8001c84:	d013      	beq.n	8001cae <HAL_DAC_Start_DMA+0xea>
 8001c86:	6a3b      	ldr	r3, [r7, #32]
 8001c88:	2b08      	cmp	r3, #8
 8001c8a:	d817      	bhi.n	8001cbc <HAL_DAC_Start_DMA+0xf8>
 8001c8c:	6a3b      	ldr	r3, [r7, #32]
 8001c8e:	2b00      	cmp	r3, #0
 8001c90:	d003      	beq.n	8001c9a <HAL_DAC_Start_DMA+0xd6>
 8001c92:	6a3b      	ldr	r3, [r7, #32]
 8001c94:	2b04      	cmp	r3, #4
 8001c96:	d005      	beq.n	8001ca4 <HAL_DAC_Start_DMA+0xe0>
      case DAC_ALIGN_8B_R:
        /* Get DHR8R2 address */
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
        break;
      default:
        break;
 8001c98:	e010      	b.n	8001cbc <HAL_DAC_Start_DMA+0xf8>
        tmpreg = (uint32_t)&hdac->Instance->DHR12R2;
 8001c9a:	68fb      	ldr	r3, [r7, #12]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	3314      	adds	r3, #20
 8001ca0:	613b      	str	r3, [r7, #16]
        break;
 8001ca2:	e00c      	b.n	8001cbe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR12L2;
 8001ca4:	68fb      	ldr	r3, [r7, #12]
 8001ca6:	681b      	ldr	r3, [r3, #0]
 8001ca8:	3318      	adds	r3, #24
 8001caa:	613b      	str	r3, [r7, #16]
        break;
 8001cac:	e007      	b.n	8001cbe <HAL_DAC_Start_DMA+0xfa>
        tmpreg = (uint32_t)&hdac->Instance->DHR8R2;
 8001cae:	68fb      	ldr	r3, [r7, #12]
 8001cb0:	681b      	ldr	r3, [r3, #0]
 8001cb2:	331c      	adds	r3, #28
 8001cb4:	613b      	str	r3, [r7, #16]
        break;
 8001cb6:	e002      	b.n	8001cbe <HAL_DAC_Start_DMA+0xfa>
        break;
 8001cb8:	bf00      	nop
 8001cba:	e000      	b.n	8001cbe <HAL_DAC_Start_DMA+0xfa>
        break;
 8001cbc:	bf00      	nop
    }
  }


  /* Enable the DMA Stream */
  if (Channel == DAC_CHANNEL_1)
 8001cbe:	68bb      	ldr	r3, [r7, #8]
 8001cc0:	2b00      	cmp	r3, #0
 8001cc2:	d111      	bne.n	8001ce8 <HAL_DAC_Start_DMA+0x124>
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR1);
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	681b      	ldr	r3, [r3, #0]
 8001cc8:	681a      	ldr	r2, [r3, #0]
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001cd2:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle1, (uint32_t)pData, tmpreg, Length);
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	6898      	ldr	r0, [r3, #8]
 8001cd8:	6879      	ldr	r1, [r7, #4]
 8001cda:	683b      	ldr	r3, [r7, #0]
 8001cdc:	693a      	ldr	r2, [r7, #16]
 8001cde:	f000 f9e5 	bl	80020ac <HAL_DMA_Start_IT>
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	75fb      	strb	r3, [r7, #23]
 8001ce6:	e010      	b.n	8001d0a <HAL_DAC_Start_DMA+0x146>
  }

  else
  {
    /* Enable the DAC DMA underrun interrupt */
    __HAL_DAC_ENABLE_IT(hdac, DAC_IT_DMAUDR2);
 8001ce8:	68fb      	ldr	r3, [r7, #12]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	681a      	ldr	r2, [r3, #0]
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
 8001cf6:	601a      	str	r2, [r3, #0]

    /* Enable the DMA Stream */
    status = HAL_DMA_Start_IT(hdac->DMA_Handle2, (uint32_t)pData, tmpreg, Length);
 8001cf8:	68fb      	ldr	r3, [r7, #12]
 8001cfa:	68d8      	ldr	r0, [r3, #12]
 8001cfc:	6879      	ldr	r1, [r7, #4]
 8001cfe:	683b      	ldr	r3, [r7, #0]
 8001d00:	693a      	ldr	r2, [r7, #16]
 8001d02:	f000 f9d3 	bl	80020ac <HAL_DMA_Start_IT>
 8001d06:	4603      	mov	r3, r0
 8001d08:	75fb      	strb	r3, [r7, #23]
  }


  /* Process Unlocked */
  __HAL_UNLOCK(hdac);
 8001d0a:	68fb      	ldr	r3, [r7, #12]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	715a      	strb	r2, [r3, #5]

  if (status == HAL_OK)
 8001d10:	7dfb      	ldrb	r3, [r7, #23]
 8001d12:	2b00      	cmp	r3, #0
 8001d14:	d10c      	bne.n	8001d30 <HAL_DAC_Start_DMA+0x16c>
  {
    /* Enable the Peripheral */
    __HAL_DAC_ENABLE(hdac, Channel);
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	681b      	ldr	r3, [r3, #0]
 8001d1a:	6819      	ldr	r1, [r3, #0]
 8001d1c:	68bb      	ldr	r3, [r7, #8]
 8001d1e:	f003 0310 	and.w	r3, r3, #16
 8001d22:	2201      	movs	r2, #1
 8001d24:	409a      	lsls	r2, r3
 8001d26:	68fb      	ldr	r3, [r7, #12]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	430a      	orrs	r2, r1
 8001d2c:	601a      	str	r2, [r3, #0]
 8001d2e:	e005      	b.n	8001d3c <HAL_DAC_Start_DMA+0x178>
  }
  else
  {
    hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001d30:	68fb      	ldr	r3, [r7, #12]
 8001d32:	691b      	ldr	r3, [r3, #16]
 8001d34:	f043 0204 	orr.w	r2, r3, #4
 8001d38:	68fb      	ldr	r3, [r7, #12]
 8001d3a:	611a      	str	r2, [r3, #16]
  }

  /* Return function status */
  return status;
 8001d3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8001d3e:	4618      	mov	r0, r3
 8001d40:	3718      	adds	r7, #24
 8001d42:	46bd      	mov	sp, r7
 8001d44:	bd80      	pop	{r7, pc}
 8001d46:	bf00      	nop
 8001d48:	08001e3b 	.word	0x08001e3b
 8001d4c:	08001e5d 	.word	0x08001e5d
 8001d50:	08001e79 	.word	0x08001e79
 8001d54:	08001ee3 	.word	0x08001ee3
 8001d58:	08001f05 	.word	0x08001f05
 8001d5c:	08001f21 	.word	0x08001f21

08001d60 <HAL_DAC_ConvCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d60:	b480      	push	{r7}
 8001d62:	b083      	sub	sp, #12
 8001d64:	af00      	add	r7, sp, #0
 8001d66:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d68:	bf00      	nop
 8001d6a:	370c      	adds	r7, #12
 8001d6c:	46bd      	mov	sp, r7
 8001d6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d72:	4770      	bx	lr

08001d74 <HAL_DAC_ConvHalfCpltCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ConvHalfCpltCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b083      	sub	sp, #12
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ConvHalfCpltCallbackCh1 could be implemented in the user file
   */
}
 8001d7c:	bf00      	nop
 8001d7e:	370c      	adds	r7, #12
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr

08001d88 <HAL_DAC_ErrorCallbackCh1>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DAC_ErrorCallbackCh1(DAC_HandleTypeDef *hdac)
{
 8001d88:	b480      	push	{r7}
 8001d8a:	b083      	sub	sp, #12
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DAC_ErrorCallbackCh1 could be implemented in the user file
   */
}
 8001d90:	bf00      	nop
 8001d92:	370c      	adds	r7, #12
 8001d94:	46bd      	mov	sp, r7
 8001d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d9a:	4770      	bx	lr

08001d9c <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac, DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8001d9c:	b480      	push	{r7}
 8001d9e:	b087      	sub	sp, #28
 8001da0:	af00      	add	r7, sp, #0
 8001da2:	60f8      	str	r0, [r7, #12]
 8001da4:	60b9      	str	r1, [r7, #8]
 8001da6:	607a      	str	r2, [r7, #4]
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8001da8:	68fb      	ldr	r3, [r7, #12]
 8001daa:	795b      	ldrb	r3, [r3, #5]
 8001dac:	2b01      	cmp	r3, #1
 8001dae:	d101      	bne.n	8001db4 <HAL_DAC_ConfigChannel+0x18>
 8001db0:	2302      	movs	r3, #2
 8001db2:	e03c      	b.n	8001e2e <HAL_DAC_ConfigChannel+0x92>
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2201      	movs	r2, #1
 8001db8:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	2202      	movs	r2, #2
 8001dbe:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	681b      	ldr	r3, [r3, #0]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	617b      	str	r3, [r7, #20]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1)) << (Channel & 0x10UL));
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	f003 0310 	and.w	r3, r3, #16
 8001dce:	f640 72fe 	movw	r2, #4094	; 0xffe
 8001dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8001dd6:	43db      	mvns	r3, r3
 8001dd8:	697a      	ldr	r2, [r7, #20]
 8001dda:	4013      	ands	r3, r2
 8001ddc:	617b      	str	r3, [r7, #20]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8001dde:	68bb      	ldr	r3, [r7, #8]
 8001de0:	681a      	ldr	r2, [r3, #0]
 8001de2:	68bb      	ldr	r3, [r7, #8]
 8001de4:	685b      	ldr	r3, [r3, #4]
 8001de6:	4313      	orrs	r3, r2
 8001de8:	613b      	str	r3, [r7, #16]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	f003 0310 	and.w	r3, r3, #16
 8001df0:	693a      	ldr	r2, [r7, #16]
 8001df2:	fa02 f303 	lsl.w	r3, r2, r3
 8001df6:	697a      	ldr	r2, [r7, #20]
 8001df8:	4313      	orrs	r3, r2
 8001dfa:	617b      	str	r3, [r7, #20]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	697a      	ldr	r2, [r7, #20]
 8001e02:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	6819      	ldr	r1, [r3, #0]
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	f003 0310 	and.w	r3, r3, #16
 8001e10:	22c0      	movs	r2, #192	; 0xc0
 8001e12:	fa02 f303 	lsl.w	r3, r2, r3
 8001e16:	43da      	mvns	r2, r3
 8001e18:	68fb      	ldr	r3, [r7, #12]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	400a      	ands	r2, r1
 8001e1e:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2201      	movs	r2, #1
 8001e24:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8001e26:	68fb      	ldr	r3, [r7, #12]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8001e2c:	2300      	movs	r3, #0
}
 8001e2e:	4618      	mov	r0, r3
 8001e30:	371c      	adds	r7, #28
 8001e32:	46bd      	mov	sp, r7
 8001e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e38:	4770      	bx	lr

08001e3a <DAC_DMAConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e3a:	b580      	push	{r7, lr}
 8001e3c:	b084      	sub	sp, #16
 8001e3e:	af00      	add	r7, sp, #0
 8001e40:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e42:	687b      	ldr	r3, [r7, #4]
 8001e44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e46:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvCpltCallbackCh1(hdac);
 8001e48:	68f8      	ldr	r0, [r7, #12]
 8001e4a:	f7ff ff89 	bl	8001d60 <HAL_DAC_ConvCpltCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e4e:	68fb      	ldr	r3, [r7, #12]
 8001e50:	2201      	movs	r2, #1
 8001e52:	711a      	strb	r2, [r3, #4]
}
 8001e54:	bf00      	nop
 8001e56:	3710      	adds	r7, #16
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <DAC_DMAHalfConvCpltCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh1(DMA_HandleTypeDef *hdma)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b084      	sub	sp, #16
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e68:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh1(hdac);
#else
  HAL_DAC_ConvHalfCpltCallbackCh1(hdac);
 8001e6a:	68f8      	ldr	r0, [r7, #12]
 8001e6c:	f7ff ff82 	bl	8001d74 <HAL_DAC_ConvHalfCpltCallbackCh1>
#endif  /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001e70:	bf00      	nop
 8001e72:	3710      	adds	r7, #16
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}

08001e78 <DAC_DMAErrorCh1>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh1(DMA_HandleTypeDef *hdma)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	b084      	sub	sp, #16
 8001e7c:	af00      	add	r7, sp, #0
 8001e7e:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001e84:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001e86:	68fb      	ldr	r3, [r7, #12]
 8001e88:	691b      	ldr	r3, [r3, #16]
 8001e8a:	f043 0204 	orr.w	r2, r3, #4
 8001e8e:	68fb      	ldr	r3, [r7, #12]
 8001e90:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh1(hdac);
#else
  HAL_DAC_ErrorCallbackCh1(hdac);
 8001e92:	68f8      	ldr	r0, [r7, #12]
 8001e94:	f7ff ff78 	bl	8001d88 <HAL_DAC_ErrorCallbackCh1>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001e98:	68fb      	ldr	r3, [r7, #12]
 8001e9a:	2201      	movs	r2, #1
 8001e9c:	711a      	strb	r2, [r3, #4]
}
 8001e9e:	bf00      	nop
 8001ea0:	3710      	adds	r7, #16
 8001ea2:	46bd      	mov	sp, r7
 8001ea4:	bd80      	pop	{r7, pc}

08001ea6 <HAL_DACEx_ConvCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ea6:	b480      	push	{r7}
 8001ea8:	b083      	sub	sp, #12
 8001eaa:	af00      	add	r7, sp, #0
 8001eac:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvCpltCallbackCh2 could be implemented in the user file
   */
}
 8001eae:	bf00      	nop
 8001eb0:	370c      	adds	r7, #12
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb8:	4770      	bx	lr

08001eba <HAL_DACEx_ConvHalfCpltCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ConvHalfCpltCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001eba:	b480      	push	{r7}
 8001ebc:	b083      	sub	sp, #12
 8001ebe:	af00      	add	r7, sp, #0
 8001ec0:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ConvHalfCpltCallbackCh2 could be implemented in the user file
   */
}
 8001ec2:	bf00      	nop
 8001ec4:	370c      	adds	r7, #12
 8001ec6:	46bd      	mov	sp, r7
 8001ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ecc:	4770      	bx	lr

08001ece <HAL_DACEx_ErrorCallbackCh2>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval None
  */
__weak void HAL_DACEx_ErrorCallbackCh2(DAC_HandleTypeDef *hdac)
{
 8001ece:	b480      	push	{r7}
 8001ed0:	b083      	sub	sp, #12
 8001ed2:	af00      	add	r7, sp, #0
 8001ed4:	6078      	str	r0, [r7, #4]
  UNUSED(hdac);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_DACEx_ErrorCallbackCh2 could be implemented in the user file
   */
}
 8001ed6:	bf00      	nop
 8001ed8:	370c      	adds	r7, #12
 8001eda:	46bd      	mov	sp, r7
 8001edc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ee0:	4770      	bx	lr

08001ee2 <DAC_DMAConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001ee2:	b580      	push	{r7, lr}
 8001ee4:	b084      	sub	sp, #16
 8001ee6:	af00      	add	r7, sp, #0
 8001ee8:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001eea:	687b      	ldr	r3, [r7, #4]
 8001eec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001eee:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvCpltCallbackCh2(hdac);
 8001ef0:	68f8      	ldr	r0, [r7, #12]
 8001ef2:	f7ff ffd8 	bl	8001ea6 <HAL_DACEx_ConvCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001ef6:	68fb      	ldr	r3, [r7, #12]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	711a      	strb	r2, [r3, #4]
}
 8001efc:	bf00      	nop
 8001efe:	3710      	adds	r7, #16
 8001f00:	46bd      	mov	sp, r7
 8001f02:	bd80      	pop	{r7, pc}

08001f04 <DAC_DMAHalfConvCpltCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAHalfConvCpltCh2(DMA_HandleTypeDef *hdma)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	b084      	sub	sp, #16
 8001f08:	af00      	add	r7, sp, #0
 8001f0a:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f10:	60fb      	str	r3, [r7, #12]
  /* Conversion complete callback */
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ConvHalfCpltCallbackCh2(hdac);
#else
  HAL_DACEx_ConvHalfCpltCallbackCh2(hdac);
 8001f12:	68f8      	ldr	r0, [r7, #12]
 8001f14:	f7ff ffd1 	bl	8001eba <HAL_DACEx_ConvHalfCpltCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
}
 8001f18:	bf00      	nop
 8001f1a:	3710      	adds	r7, #16
 8001f1c:	46bd      	mov	sp, r7
 8001f1e:	bd80      	pop	{r7, pc}

08001f20 <DAC_DMAErrorCh2>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
void DAC_DMAErrorCh2(DMA_HandleTypeDef *hdma)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  DAC_HandleTypeDef *hdac = (DAC_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8001f28:	687b      	ldr	r3, [r7, #4]
 8001f2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f2c:	60fb      	str	r3, [r7, #12]

  /* Set DAC error code to DMA error */
  hdac->ErrorCode |= HAL_DAC_ERROR_DMA;
 8001f2e:	68fb      	ldr	r3, [r7, #12]
 8001f30:	691b      	ldr	r3, [r3, #16]
 8001f32:	f043 0204 	orr.w	r2, r3, #4
 8001f36:	68fb      	ldr	r3, [r7, #12]
 8001f38:	611a      	str	r2, [r3, #16]

#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
  hdac->ErrorCallbackCh2(hdac);
#else
  HAL_DACEx_ErrorCallbackCh2(hdac);
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	f7ff ffc7 	bl	8001ece <HAL_DACEx_ErrorCallbackCh2>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

  hdac->State = HAL_DAC_STATE_READY;
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	2201      	movs	r2, #1
 8001f44:	711a      	strb	r2, [r3, #4]
}
 8001f46:	bf00      	nop
 8001f48:	3710      	adds	r7, #16
 8001f4a:	46bd      	mov	sp, r7
 8001f4c:	bd80      	pop	{r7, pc}
	...

08001f50 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8001f50:	b580      	push	{r7, lr}
 8001f52:	b086      	sub	sp, #24
 8001f54:	af00      	add	r7, sp, #0
 8001f56:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8001f58:	2300      	movs	r3, #0
 8001f5a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8001f5c:	f7ff fc7c 	bl	8001858 <HAL_GetTick>
 8001f60:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8001f62:	687b      	ldr	r3, [r7, #4]
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d101      	bne.n	8001f6c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8001f68:	2301      	movs	r3, #1
 8001f6a:	e099      	b.n	80020a0 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8001f6c:	687b      	ldr	r3, [r7, #4]
 8001f6e:	2200      	movs	r2, #0
 8001f70:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8001f74:	687b      	ldr	r3, [r7, #4]
 8001f76:	2202      	movs	r2, #2
 8001f78:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	681a      	ldr	r2, [r3, #0]
 8001f82:	687b      	ldr	r3, [r7, #4]
 8001f84:	681b      	ldr	r3, [r3, #0]
 8001f86:	f022 0201 	bic.w	r2, r2, #1
 8001f8a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001f8c:	e00f      	b.n	8001fae <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8001f8e:	f7ff fc63 	bl	8001858 <HAL_GetTick>
 8001f92:	4602      	mov	r2, r0
 8001f94:	693b      	ldr	r3, [r7, #16]
 8001f96:	1ad3      	subs	r3, r2, r3
 8001f98:	2b05      	cmp	r3, #5
 8001f9a:	d908      	bls.n	8001fae <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8001f9c:	687b      	ldr	r3, [r7, #4]
 8001f9e:	2220      	movs	r2, #32
 8001fa0:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	2203      	movs	r2, #3
 8001fa6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8001faa:	2303      	movs	r3, #3
 8001fac:	e078      	b.n	80020a0 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	681b      	ldr	r3, [r3, #0]
 8001fb4:	f003 0301 	and.w	r3, r3, #1
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d1e8      	bne.n	8001f8e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8001fbc:	687b      	ldr	r3, [r7, #4]
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8001fc4:	697a      	ldr	r2, [r7, #20]
 8001fc6:	4b38      	ldr	r3, [pc, #224]	; (80020a8 <HAL_DMA_Init+0x158>)
 8001fc8:	4013      	ands	r3, r2
 8001fca:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fcc:	687b      	ldr	r3, [r7, #4]
 8001fce:	685a      	ldr	r2, [r3, #4]
 8001fd0:	687b      	ldr	r3, [r7, #4]
 8001fd2:	689b      	ldr	r3, [r3, #8]
 8001fd4:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001fda:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	691b      	ldr	r3, [r3, #16]
 8001fe0:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8001fe6:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001fe8:	687b      	ldr	r3, [r7, #4]
 8001fea:	699b      	ldr	r3, [r3, #24]
 8001fec:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8001ff2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8001ff4:	687b      	ldr	r3, [r7, #4]
 8001ff6:	6a1b      	ldr	r3, [r3, #32]
 8001ff8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8001ffa:	697a      	ldr	r2, [r7, #20]
 8001ffc:	4313      	orrs	r3, r2
 8001ffe:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002004:	2b04      	cmp	r3, #4
 8002006:	d107      	bne.n	8002018 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002010:	4313      	orrs	r3, r2
 8002012:	697a      	ldr	r2, [r7, #20]
 8002014:	4313      	orrs	r3, r2
 8002016:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	681b      	ldr	r3, [r3, #0]
 800201c:	697a      	ldr	r2, [r7, #20]
 800201e:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8002020:	687b      	ldr	r3, [r7, #4]
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	695b      	ldr	r3, [r3, #20]
 8002026:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8002028:	697b      	ldr	r3, [r7, #20]
 800202a:	f023 0307 	bic.w	r3, r3, #7
 800202e:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002034:	697a      	ldr	r2, [r7, #20]
 8002036:	4313      	orrs	r3, r2
 8002038:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800203e:	2b04      	cmp	r3, #4
 8002040:	d117      	bne.n	8002072 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002046:	697a      	ldr	r2, [r7, #20]
 8002048:	4313      	orrs	r3, r2
 800204a:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002050:	2b00      	cmp	r3, #0
 8002052:	d00e      	beq.n	8002072 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8002054:	6878      	ldr	r0, [r7, #4]
 8002056:	f000 fa77 	bl	8002548 <DMA_CheckFifoParam>
 800205a:	4603      	mov	r3, r0
 800205c:	2b00      	cmp	r3, #0
 800205e:	d008      	beq.n	8002072 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2240      	movs	r2, #64	; 0x40
 8002064:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8002066:	687b      	ldr	r3, [r7, #4]
 8002068:	2201      	movs	r2, #1
 800206a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800206e:	2301      	movs	r3, #1
 8002070:	e016      	b.n	80020a0 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	697a      	ldr	r2, [r7, #20]
 8002078:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800207a:	6878      	ldr	r0, [r7, #4]
 800207c:	f000 fa2e 	bl	80024dc <DMA_CalcBaseAndBitshift>
 8002080:	4603      	mov	r3, r0
 8002082:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002088:	223f      	movs	r2, #63	; 0x3f
 800208a:	409a      	lsls	r2, r3
 800208c:	68fb      	ldr	r3, [r7, #12]
 800208e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2200      	movs	r2, #0
 8002094:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	2201      	movs	r2, #1
 800209a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800209e:	2300      	movs	r3, #0
}
 80020a0:	4618      	mov	r0, r3
 80020a2:	3718      	adds	r7, #24
 80020a4:	46bd      	mov	sp, r7
 80020a6:	bd80      	pop	{r7, pc}
 80020a8:	f010803f 	.word	0xf010803f

080020ac <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80020ac:	b580      	push	{r7, lr}
 80020ae:	b086      	sub	sp, #24
 80020b0:	af00      	add	r7, sp, #0
 80020b2:	60f8      	str	r0, [r7, #12]
 80020b4:	60b9      	str	r1, [r7, #8]
 80020b6:	607a      	str	r2, [r7, #4]
 80020b8:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80020ba:	2300      	movs	r3, #0
 80020bc:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80020be:	68fb      	ldr	r3, [r7, #12]
 80020c0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80020c2:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80020c4:	68fb      	ldr	r3, [r7, #12]
 80020c6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80020ca:	2b01      	cmp	r3, #1
 80020cc:	d101      	bne.n	80020d2 <HAL_DMA_Start_IT+0x26>
 80020ce:	2302      	movs	r3, #2
 80020d0:	e048      	b.n	8002164 <HAL_DMA_Start_IT+0xb8>
 80020d2:	68fb      	ldr	r3, [r7, #12]
 80020d4:	2201      	movs	r2, #1
 80020d6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80020e0:	b2db      	uxtb	r3, r3
 80020e2:	2b01      	cmp	r3, #1
 80020e4:	d137      	bne.n	8002156 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	2202      	movs	r2, #2
 80020ea:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80020ee:	68fb      	ldr	r3, [r7, #12]
 80020f0:	2200      	movs	r2, #0
 80020f2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80020f4:	683b      	ldr	r3, [r7, #0]
 80020f6:	687a      	ldr	r2, [r7, #4]
 80020f8:	68b9      	ldr	r1, [r7, #8]
 80020fa:	68f8      	ldr	r0, [r7, #12]
 80020fc:	f000 f9c0 	bl	8002480 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002104:	223f      	movs	r2, #63	; 0x3f
 8002106:	409a      	lsls	r2, r3
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	681a      	ldr	r2, [r3, #0]
 8002112:	68fb      	ldr	r3, [r7, #12]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f042 0216 	orr.w	r2, r2, #22
 800211a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 800211c:	68fb      	ldr	r3, [r7, #12]
 800211e:	681b      	ldr	r3, [r3, #0]
 8002120:	695a      	ldr	r2, [r3, #20]
 8002122:	68fb      	ldr	r3, [r7, #12]
 8002124:	681b      	ldr	r3, [r3, #0]
 8002126:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 800212a:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 800212c:	68fb      	ldr	r3, [r7, #12]
 800212e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002130:	2b00      	cmp	r3, #0
 8002132:	d007      	beq.n	8002144 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8002134:	68fb      	ldr	r3, [r7, #12]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	681a      	ldr	r2, [r3, #0]
 800213a:	68fb      	ldr	r3, [r7, #12]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f042 0208 	orr.w	r2, r2, #8
 8002142:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8002144:	68fb      	ldr	r3, [r7, #12]
 8002146:	681b      	ldr	r3, [r3, #0]
 8002148:	681a      	ldr	r2, [r3, #0]
 800214a:	68fb      	ldr	r3, [r7, #12]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f042 0201 	orr.w	r2, r2, #1
 8002152:	601a      	str	r2, [r3, #0]
 8002154:	e005      	b.n	8002162 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	2200      	movs	r2, #0
 800215a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800215e:	2302      	movs	r3, #2
 8002160:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8002162:	7dfb      	ldrb	r3, [r7, #23]
}
 8002164:	4618      	mov	r0, r3
 8002166:	3718      	adds	r7, #24
 8002168:	46bd      	mov	sp, r7
 800216a:	bd80      	pop	{r7, pc}

0800216c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800216c:	b580      	push	{r7, lr}
 800216e:	b086      	sub	sp, #24
 8002170:	af00      	add	r7, sp, #0
 8002172:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8002174:	2300      	movs	r3, #0
 8002176:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8002178:	4b92      	ldr	r3, [pc, #584]	; (80023c4 <HAL_DMA_IRQHandler+0x258>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a92      	ldr	r2, [pc, #584]	; (80023c8 <HAL_DMA_IRQHandler+0x25c>)
 800217e:	fba2 2303 	umull	r2, r3, r2, r3
 8002182:	0a9b      	lsrs	r3, r3, #10
 8002184:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800218a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800218c:	693b      	ldr	r3, [r7, #16]
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002196:	2208      	movs	r2, #8
 8002198:	409a      	lsls	r2, r3
 800219a:	68fb      	ldr	r3, [r7, #12]
 800219c:	4013      	ands	r3, r2
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d01a      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80021a2:	687b      	ldr	r3, [r7, #4]
 80021a4:	681b      	ldr	r3, [r3, #0]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f003 0304 	and.w	r3, r3, #4
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d013      	beq.n	80021d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	681b      	ldr	r3, [r3, #0]
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	681b      	ldr	r3, [r3, #0]
 80021ba:	f022 0204 	bic.w	r2, r2, #4
 80021be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80021c0:	687b      	ldr	r3, [r7, #4]
 80021c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021c4:	2208      	movs	r2, #8
 80021c6:	409a      	lsls	r2, r3
 80021c8:	693b      	ldr	r3, [r7, #16]
 80021ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80021d0:	f043 0201 	orr.w	r2, r3, #1
 80021d4:	687b      	ldr	r3, [r7, #4]
 80021d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021dc:	2201      	movs	r2, #1
 80021de:	409a      	lsls	r2, r3
 80021e0:	68fb      	ldr	r3, [r7, #12]
 80021e2:	4013      	ands	r3, r2
 80021e4:	2b00      	cmp	r3, #0
 80021e6:	d012      	beq.n	800220e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	695b      	ldr	r3, [r3, #20]
 80021ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80021f2:	2b00      	cmp	r3, #0
 80021f4:	d00b      	beq.n	800220e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80021fa:	2201      	movs	r2, #1
 80021fc:	409a      	lsls	r2, r3
 80021fe:	693b      	ldr	r3, [r7, #16]
 8002200:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002206:	f043 0202 	orr.w	r2, r3, #2
 800220a:	687b      	ldr	r3, [r7, #4]
 800220c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002212:	2204      	movs	r2, #4
 8002214:	409a      	lsls	r2, r3
 8002216:	68fb      	ldr	r3, [r7, #12]
 8002218:	4013      	ands	r3, r2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d012      	beq.n	8002244 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	681b      	ldr	r3, [r3, #0]
 8002224:	f003 0302 	and.w	r3, r3, #2
 8002228:	2b00      	cmp	r3, #0
 800222a:	d00b      	beq.n	8002244 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800222c:	687b      	ldr	r3, [r7, #4]
 800222e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002230:	2204      	movs	r2, #4
 8002232:	409a      	lsls	r2, r3
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8002238:	687b      	ldr	r3, [r7, #4]
 800223a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800223c:	f043 0204 	orr.w	r2, r3, #4
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002248:	2210      	movs	r2, #16
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	4013      	ands	r3, r2
 8002250:	2b00      	cmp	r3, #0
 8002252:	d043      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f003 0308 	and.w	r3, r3, #8
 800225e:	2b00      	cmp	r3, #0
 8002260:	d03c      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8002262:	687b      	ldr	r3, [r7, #4]
 8002264:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002266:	2210      	movs	r2, #16
 8002268:	409a      	lsls	r2, r3
 800226a:	693b      	ldr	r3, [r7, #16]
 800226c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800226e:	687b      	ldr	r3, [r7, #4]
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	681b      	ldr	r3, [r3, #0]
 8002274:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002278:	2b00      	cmp	r3, #0
 800227a:	d018      	beq.n	80022ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	681b      	ldr	r3, [r3, #0]
 8002280:	681b      	ldr	r3, [r3, #0]
 8002282:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8002286:	2b00      	cmp	r3, #0
 8002288:	d108      	bne.n	800229c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800228a:	687b      	ldr	r3, [r7, #4]
 800228c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800228e:	2b00      	cmp	r3, #0
 8002290:	d024      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002296:	6878      	ldr	r0, [r7, #4]
 8002298:	4798      	blx	r3
 800229a:	e01f      	b.n	80022dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d01b      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80022a8:	6878      	ldr	r0, [r7, #4]
 80022aa:	4798      	blx	r3
 80022ac:	e016      	b.n	80022dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	d107      	bne.n	80022cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80022bc:	687b      	ldr	r3, [r7, #4]
 80022be:	681b      	ldr	r3, [r3, #0]
 80022c0:	681a      	ldr	r2, [r3, #0]
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f022 0208 	bic.w	r2, r2, #8
 80022ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d0:	2b00      	cmp	r3, #0
 80022d2:	d003      	beq.n	80022dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80022d8:	6878      	ldr	r0, [r7, #4]
 80022da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80022e0:	2220      	movs	r2, #32
 80022e2:	409a      	lsls	r2, r3
 80022e4:	68fb      	ldr	r3, [r7, #12]
 80022e6:	4013      	ands	r3, r2
 80022e8:	2b00      	cmp	r3, #0
 80022ea:	f000 808e 	beq.w	800240a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80022ee:	687b      	ldr	r3, [r7, #4]
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	f003 0310 	and.w	r3, r3, #16
 80022f8:	2b00      	cmp	r3, #0
 80022fa:	f000 8086 	beq.w	800240a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8002302:	2220      	movs	r2, #32
 8002304:	409a      	lsls	r2, r3
 8002306:	693b      	ldr	r3, [r7, #16]
 8002308:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002310:	b2db      	uxtb	r3, r3
 8002312:	2b05      	cmp	r3, #5
 8002314:	d136      	bne.n	8002384 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	681b      	ldr	r3, [r3, #0]
 800231a:	681a      	ldr	r2, [r3, #0]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	f022 0216 	bic.w	r2, r2, #22
 8002324:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	695a      	ldr	r2, [r3, #20]
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8002334:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800233a:	2b00      	cmp	r3, #0
 800233c:	d103      	bne.n	8002346 <HAL_DMA_IRQHandler+0x1da>
 800233e:	687b      	ldr	r3, [r7, #4]
 8002340:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002342:	2b00      	cmp	r3, #0
 8002344:	d007      	beq.n	8002356 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	681a      	ldr	r2, [r3, #0]
 800234c:	687b      	ldr	r3, [r7, #4]
 800234e:	681b      	ldr	r3, [r3, #0]
 8002350:	f022 0208 	bic.w	r2, r2, #8
 8002354:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800235a:	223f      	movs	r2, #63	; 0x3f
 800235c:	409a      	lsls	r2, r3
 800235e:	693b      	ldr	r3, [r7, #16]
 8002360:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002362:	687b      	ldr	r3, [r7, #4]
 8002364:	2200      	movs	r2, #0
 8002366:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800236a:	687b      	ldr	r3, [r7, #4]
 800236c:	2201      	movs	r2, #1
 800236e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8002372:	687b      	ldr	r3, [r7, #4]
 8002374:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8002376:	2b00      	cmp	r3, #0
 8002378:	d07d      	beq.n	8002476 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800237a:	687b      	ldr	r3, [r7, #4]
 800237c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800237e:	6878      	ldr	r0, [r7, #4]
 8002380:	4798      	blx	r3
        }
        return;
 8002382:	e078      	b.n	8002476 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8002384:	687b      	ldr	r3, [r7, #4]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800238e:	2b00      	cmp	r3, #0
 8002390:	d01c      	beq.n	80023cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8002392:	687b      	ldr	r3, [r7, #4]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800239c:	2b00      	cmp	r3, #0
 800239e:	d108      	bne.n	80023b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80023a0:	687b      	ldr	r3, [r7, #4]
 80023a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023a4:	2b00      	cmp	r3, #0
 80023a6:	d030      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80023a8:	687b      	ldr	r3, [r7, #4]
 80023aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80023ac:	6878      	ldr	r0, [r7, #4]
 80023ae:	4798      	blx	r3
 80023b0:	e02b      	b.n	800240a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023b6:	2b00      	cmp	r3, #0
 80023b8:	d027      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80023ba:	687b      	ldr	r3, [r7, #4]
 80023bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023be:	6878      	ldr	r0, [r7, #4]
 80023c0:	4798      	blx	r3
 80023c2:	e022      	b.n	800240a <HAL_DMA_IRQHandler+0x29e>
 80023c4:	20000000 	.word	0x20000000
 80023c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80023d6:	2b00      	cmp	r3, #0
 80023d8:	d10f      	bne.n	80023fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80023da:	687b      	ldr	r3, [r7, #4]
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	681a      	ldr	r2, [r3, #0]
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	f022 0210 	bic.w	r2, r2, #16
 80023e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	2200      	movs	r2, #0
 80023ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	2201      	movs	r2, #1
 80023f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d003      	beq.n	800240a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002406:	6878      	ldr	r0, [r7, #4]
 8002408:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800240a:	687b      	ldr	r3, [r7, #4]
 800240c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800240e:	2b00      	cmp	r3, #0
 8002410:	d032      	beq.n	8002478 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8002412:	687b      	ldr	r3, [r7, #4]
 8002414:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002416:	f003 0301 	and.w	r3, r3, #1
 800241a:	2b00      	cmp	r3, #0
 800241c:	d022      	beq.n	8002464 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	2205      	movs	r2, #5
 8002422:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	681a      	ldr	r2, [r3, #0]
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	f022 0201 	bic.w	r2, r2, #1
 8002434:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8002436:	68bb      	ldr	r3, [r7, #8]
 8002438:	3301      	adds	r3, #1
 800243a:	60bb      	str	r3, [r7, #8]
 800243c:	697a      	ldr	r2, [r7, #20]
 800243e:	429a      	cmp	r2, r3
 8002440:	d307      	bcc.n	8002452 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8002442:	687b      	ldr	r3, [r7, #4]
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	f003 0301 	and.w	r3, r3, #1
 800244c:	2b00      	cmp	r3, #0
 800244e:	d1f2      	bne.n	8002436 <HAL_DMA_IRQHandler+0x2ca>
 8002450:	e000      	b.n	8002454 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8002452:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	2200      	movs	r2, #0
 8002458:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800245c:	687b      	ldr	r3, [r7, #4]
 800245e:	2201      	movs	r2, #1
 8002460:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002468:	2b00      	cmp	r3, #0
 800246a:	d005      	beq.n	8002478 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8002470:	6878      	ldr	r0, [r7, #4]
 8002472:	4798      	blx	r3
 8002474:	e000      	b.n	8002478 <HAL_DMA_IRQHandler+0x30c>
        return;
 8002476:	bf00      	nop
    }
  }
}
 8002478:	3718      	adds	r7, #24
 800247a:	46bd      	mov	sp, r7
 800247c:	bd80      	pop	{r7, pc}
 800247e:	bf00      	nop

08002480 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8002480:	b480      	push	{r7}
 8002482:	b085      	sub	sp, #20
 8002484:	af00      	add	r7, sp, #0
 8002486:	60f8      	str	r0, [r7, #12]
 8002488:	60b9      	str	r1, [r7, #8]
 800248a:	607a      	str	r2, [r7, #4]
 800248c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800248e:	68fb      	ldr	r3, [r7, #12]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	681a      	ldr	r2, [r3, #0]
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800249c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	681b      	ldr	r3, [r3, #0]
 80024a2:	683a      	ldr	r2, [r7, #0]
 80024a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	689b      	ldr	r3, [r3, #8]
 80024aa:	2b40      	cmp	r3, #64	; 0x40
 80024ac:	d108      	bne.n	80024c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80024ae:	68fb      	ldr	r3, [r7, #12]
 80024b0:	681b      	ldr	r3, [r3, #0]
 80024b2:	687a      	ldr	r2, [r7, #4]
 80024b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80024b6:	68fb      	ldr	r3, [r7, #12]
 80024b8:	681b      	ldr	r3, [r3, #0]
 80024ba:	68ba      	ldr	r2, [r7, #8]
 80024bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80024be:	e007      	b.n	80024d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	68ba      	ldr	r2, [r7, #8]
 80024c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80024c8:	68fb      	ldr	r3, [r7, #12]
 80024ca:	681b      	ldr	r3, [r3, #0]
 80024cc:	687a      	ldr	r2, [r7, #4]
 80024ce:	60da      	str	r2, [r3, #12]
}
 80024d0:	bf00      	nop
 80024d2:	3714      	adds	r7, #20
 80024d4:	46bd      	mov	sp, r7
 80024d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024da:	4770      	bx	lr

080024dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80024dc:	b480      	push	{r7}
 80024de:	b085      	sub	sp, #20
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	b2db      	uxtb	r3, r3
 80024ea:	3b10      	subs	r3, #16
 80024ec:	4a13      	ldr	r2, [pc, #76]	; (800253c <DMA_CalcBaseAndBitshift+0x60>)
 80024ee:	fba2 2303 	umull	r2, r3, r2, r3
 80024f2:	091b      	lsrs	r3, r3, #4
 80024f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80024f6:	4a12      	ldr	r2, [pc, #72]	; (8002540 <DMA_CalcBaseAndBitshift+0x64>)
 80024f8:	68fb      	ldr	r3, [r7, #12]
 80024fa:	4413      	add	r3, r2
 80024fc:	781b      	ldrb	r3, [r3, #0]
 80024fe:	461a      	mov	r2, r3
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8002504:	68fb      	ldr	r3, [r7, #12]
 8002506:	2b03      	cmp	r3, #3
 8002508:	d908      	bls.n	800251c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800250a:	687b      	ldr	r3, [r7, #4]
 800250c:	681b      	ldr	r3, [r3, #0]
 800250e:	461a      	mov	r2, r3
 8002510:	4b0c      	ldr	r3, [pc, #48]	; (8002544 <DMA_CalcBaseAndBitshift+0x68>)
 8002512:	4013      	ands	r3, r2
 8002514:	1d1a      	adds	r2, r3, #4
 8002516:	687b      	ldr	r3, [r7, #4]
 8002518:	659a      	str	r2, [r3, #88]	; 0x58
 800251a:	e006      	b.n	800252a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	681b      	ldr	r3, [r3, #0]
 8002520:	461a      	mov	r2, r3
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <DMA_CalcBaseAndBitshift+0x68>)
 8002524:	4013      	ands	r3, r2
 8002526:	687a      	ldr	r2, [r7, #4]
 8002528:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800252e:	4618      	mov	r0, r3
 8002530:	3714      	adds	r7, #20
 8002532:	46bd      	mov	sp, r7
 8002534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002538:	4770      	bx	lr
 800253a:	bf00      	nop
 800253c:	aaaaaaab 	.word	0xaaaaaaab
 8002540:	080062c0 	.word	0x080062c0
 8002544:	fffffc00 	.word	0xfffffc00

08002548 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8002548:	b480      	push	{r7}
 800254a:	b085      	sub	sp, #20
 800254c:	af00      	add	r7, sp, #0
 800254e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002550:	2300      	movs	r3, #0
 8002552:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8002554:	687b      	ldr	r3, [r7, #4]
 8002556:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002558:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	699b      	ldr	r3, [r3, #24]
 800255e:	2b00      	cmp	r3, #0
 8002560:	d11f      	bne.n	80025a2 <DMA_CheckFifoParam+0x5a>
 8002562:	68bb      	ldr	r3, [r7, #8]
 8002564:	2b03      	cmp	r3, #3
 8002566:	d856      	bhi.n	8002616 <DMA_CheckFifoParam+0xce>
 8002568:	a201      	add	r2, pc, #4	; (adr r2, 8002570 <DMA_CheckFifoParam+0x28>)
 800256a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800256e:	bf00      	nop
 8002570:	08002581 	.word	0x08002581
 8002574:	08002593 	.word	0x08002593
 8002578:	08002581 	.word	0x08002581
 800257c:	08002617 	.word	0x08002617
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002580:	687b      	ldr	r3, [r7, #4]
 8002582:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002584:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002588:	2b00      	cmp	r3, #0
 800258a:	d046      	beq.n	800261a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800258c:	2301      	movs	r3, #1
 800258e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8002590:	e043      	b.n	800261a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002596:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800259a:	d140      	bne.n	800261e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800259c:	2301      	movs	r3, #1
 800259e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025a0:	e03d      	b.n	800261e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	699b      	ldr	r3, [r3, #24]
 80025a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80025aa:	d121      	bne.n	80025f0 <DMA_CheckFifoParam+0xa8>
 80025ac:	68bb      	ldr	r3, [r7, #8]
 80025ae:	2b03      	cmp	r3, #3
 80025b0:	d837      	bhi.n	8002622 <DMA_CheckFifoParam+0xda>
 80025b2:	a201      	add	r2, pc, #4	; (adr r2, 80025b8 <DMA_CheckFifoParam+0x70>)
 80025b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025b8:	080025c9 	.word	0x080025c9
 80025bc:	080025cf 	.word	0x080025cf
 80025c0:	080025c9 	.word	0x080025c9
 80025c4:	080025e1 	.word	0x080025e1
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80025c8:	2301      	movs	r3, #1
 80025ca:	73fb      	strb	r3, [r7, #15]
      break;
 80025cc:	e030      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80025d6:	2b00      	cmp	r3, #0
 80025d8:	d025      	beq.n	8002626 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80025da:	2301      	movs	r3, #1
 80025dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80025de:	e022      	b.n	8002626 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80025e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80025e8:	d11f      	bne.n	800262a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80025ee:	e01c      	b.n	800262a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80025f0:	68bb      	ldr	r3, [r7, #8]
 80025f2:	2b02      	cmp	r3, #2
 80025f4:	d903      	bls.n	80025fe <DMA_CheckFifoParam+0xb6>
 80025f6:	68bb      	ldr	r3, [r7, #8]
 80025f8:	2b03      	cmp	r3, #3
 80025fa:	d003      	beq.n	8002604 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80025fc:	e018      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80025fe:	2301      	movs	r3, #1
 8002600:	73fb      	strb	r3, [r7, #15]
      break;
 8002602:	e015      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8002604:	687b      	ldr	r3, [r7, #4]
 8002606:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002608:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800260c:	2b00      	cmp	r3, #0
 800260e:	d00e      	beq.n	800262e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8002610:	2301      	movs	r3, #1
 8002612:	73fb      	strb	r3, [r7, #15]
      break;
 8002614:	e00b      	b.n	800262e <DMA_CheckFifoParam+0xe6>
      break;
 8002616:	bf00      	nop
 8002618:	e00a      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800261a:	bf00      	nop
 800261c:	e008      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800261e:	bf00      	nop
 8002620:	e006      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 8002622:	bf00      	nop
 8002624:	e004      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 8002626:	bf00      	nop
 8002628:	e002      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;   
 800262a:	bf00      	nop
 800262c:	e000      	b.n	8002630 <DMA_CheckFifoParam+0xe8>
      break;
 800262e:	bf00      	nop
    }
  } 
  
  return status; 
 8002630:	7bfb      	ldrb	r3, [r7, #15]
}
 8002632:	4618      	mov	r0, r3
 8002634:	3714      	adds	r7, #20
 8002636:	46bd      	mov	sp, r7
 8002638:	f85d 7b04 	ldr.w	r7, [sp], #4
 800263c:	4770      	bx	lr
 800263e:	bf00      	nop

08002640 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002640:	b480      	push	{r7}
 8002642:	b089      	sub	sp, #36	; 0x24
 8002644:	af00      	add	r7, sp, #0
 8002646:	6078      	str	r0, [r7, #4]
 8002648:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 800264a:	2300      	movs	r3, #0
 800264c:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 800264e:	2300      	movs	r3, #0
 8002650:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8002652:	2300      	movs	r3, #0
 8002654:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 8002656:	2300      	movs	r3, #0
 8002658:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0; position < GPIO_NUMBER; position++)
 800265a:	2300      	movs	r3, #0
 800265c:	61fb      	str	r3, [r7, #28]
 800265e:	e175      	b.n	800294c <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8002660:	2201      	movs	r2, #1
 8002662:	69fb      	ldr	r3, [r7, #28]
 8002664:	fa02 f303 	lsl.w	r3, r2, r3
 8002668:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800266a:	683b      	ldr	r3, [r7, #0]
 800266c:	681b      	ldr	r3, [r3, #0]
 800266e:	697a      	ldr	r2, [r7, #20]
 8002670:	4013      	ands	r3, r2
 8002672:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002674:	693a      	ldr	r2, [r7, #16]
 8002676:	697b      	ldr	r3, [r7, #20]
 8002678:	429a      	cmp	r2, r3
 800267a:	f040 8164 	bne.w	8002946 <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800267e:	683b      	ldr	r3, [r7, #0]
 8002680:	685b      	ldr	r3, [r3, #4]
 8002682:	2b01      	cmp	r3, #1
 8002684:	d00b      	beq.n	800269e <HAL_GPIO_Init+0x5e>
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	2b02      	cmp	r3, #2
 800268c:	d007      	beq.n	800269e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800268e:	683b      	ldr	r3, [r7, #0]
 8002690:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002692:	2b11      	cmp	r3, #17
 8002694:	d003      	beq.n	800269e <HAL_GPIO_Init+0x5e>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	685b      	ldr	r3, [r3, #4]
 800269a:	2b12      	cmp	r3, #18
 800269c:	d130      	bne.n	8002700 <HAL_GPIO_Init+0xc0>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	689b      	ldr	r3, [r3, #8]
 80026a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 80026a4:	69fb      	ldr	r3, [r7, #28]
 80026a6:	005b      	lsls	r3, r3, #1
 80026a8:	2203      	movs	r2, #3
 80026aa:	fa02 f303 	lsl.w	r3, r2, r3
 80026ae:	43db      	mvns	r3, r3
 80026b0:	69ba      	ldr	r2, [r7, #24]
 80026b2:	4013      	ands	r3, r2
 80026b4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 80026b6:	683b      	ldr	r3, [r7, #0]
 80026b8:	68da      	ldr	r2, [r3, #12]
 80026ba:	69fb      	ldr	r3, [r7, #28]
 80026bc:	005b      	lsls	r3, r3, #1
 80026be:	fa02 f303 	lsl.w	r3, r2, r3
 80026c2:	69ba      	ldr	r2, [r7, #24]
 80026c4:	4313      	orrs	r3, r2
 80026c6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	69ba      	ldr	r2, [r7, #24]
 80026cc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	685b      	ldr	r3, [r3, #4]
 80026d2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80026d4:	2201      	movs	r2, #1
 80026d6:	69fb      	ldr	r3, [r7, #28]
 80026d8:	fa02 f303 	lsl.w	r3, r2, r3
 80026dc:	43db      	mvns	r3, r3
 80026de:	69ba      	ldr	r2, [r7, #24]
 80026e0:	4013      	ands	r3, r2
 80026e2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4) << position);
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	685b      	ldr	r3, [r3, #4]
 80026e8:	091b      	lsrs	r3, r3, #4
 80026ea:	f003 0201 	and.w	r2, r3, #1
 80026ee:	69fb      	ldr	r3, [r7, #28]
 80026f0:	fa02 f303 	lsl.w	r3, r2, r3
 80026f4:	69ba      	ldr	r2, [r7, #24]
 80026f6:	4313      	orrs	r3, r2
 80026f8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80026fa:	687b      	ldr	r3, [r7, #4]
 80026fc:	69ba      	ldr	r2, [r7, #24]
 80026fe:	605a      	str	r2, [r3, #4]
      }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	68db      	ldr	r3, [r3, #12]
 8002704:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 8002706:	69fb      	ldr	r3, [r7, #28]
 8002708:	005b      	lsls	r3, r3, #1
 800270a:	2203      	movs	r2, #3
 800270c:	fa02 f303 	lsl.w	r3, r2, r3
 8002710:	43db      	mvns	r3, r3
 8002712:	69ba      	ldr	r2, [r7, #24]
 8002714:	4013      	ands	r3, r2
 8002716:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2));
 8002718:	683b      	ldr	r3, [r7, #0]
 800271a:	689a      	ldr	r2, [r3, #8]
 800271c:	69fb      	ldr	r3, [r7, #28]
 800271e:	005b      	lsls	r3, r3, #1
 8002720:	fa02 f303 	lsl.w	r3, r2, r3
 8002724:	69ba      	ldr	r2, [r7, #24]
 8002726:	4313      	orrs	r3, r2
 8002728:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	69ba      	ldr	r2, [r7, #24]
 800272e:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	685b      	ldr	r3, [r3, #4]
 8002734:	2b02      	cmp	r3, #2
 8002736:	d003      	beq.n	8002740 <HAL_GPIO_Init+0x100>
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	685b      	ldr	r3, [r3, #4]
 800273c:	2b12      	cmp	r3, #18
 800273e:	d123      	bne.n	8002788 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 8002740:	69fb      	ldr	r3, [r7, #28]
 8002742:	08da      	lsrs	r2, r3, #3
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	3208      	adds	r2, #8
 8002748:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800274c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 800274e:	69fb      	ldr	r3, [r7, #28]
 8002750:	f003 0307 	and.w	r3, r3, #7
 8002754:	009b      	lsls	r3, r3, #2
 8002756:	220f      	movs	r2, #15
 8002758:	fa02 f303 	lsl.w	r3, r2, r3
 800275c:	43db      	mvns	r3, r3
 800275e:	69ba      	ldr	r2, [r7, #24]
 8002760:	4013      	ands	r3, r2
 8002762:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	691a      	ldr	r2, [r3, #16]
 8002768:	69fb      	ldr	r3, [r7, #28]
 800276a:	f003 0307 	and.w	r3, r3, #7
 800276e:	009b      	lsls	r3, r3, #2
 8002770:	fa02 f303 	lsl.w	r3, r2, r3
 8002774:	69ba      	ldr	r2, [r7, #24]
 8002776:	4313      	orrs	r3, r2
 8002778:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 800277a:	69fb      	ldr	r3, [r7, #28]
 800277c:	08da      	lsrs	r2, r3, #3
 800277e:	687b      	ldr	r3, [r7, #4]
 8002780:	3208      	adds	r2, #8
 8002782:	69b9      	ldr	r1, [r7, #24]
 8002784:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }
      
      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 800278e:	69fb      	ldr	r3, [r7, #28]
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	2203      	movs	r2, #3
 8002794:	fa02 f303 	lsl.w	r3, r2, r3
 8002798:	43db      	mvns	r3, r3
 800279a:	69ba      	ldr	r2, [r7, #24]
 800279c:	4013      	ands	r3, r2
 800279e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 80027a0:	683b      	ldr	r3, [r7, #0]
 80027a2:	685b      	ldr	r3, [r3, #4]
 80027a4:	f003 0203 	and.w	r2, r3, #3
 80027a8:	69fb      	ldr	r3, [r7, #28]
 80027aa:	005b      	lsls	r3, r3, #1
 80027ac:	fa02 f303 	lsl.w	r3, r2, r3
 80027b0:	69ba      	ldr	r2, [r7, #24]
 80027b2:	4313      	orrs	r3, r2
 80027b4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	69ba      	ldr	r2, [r7, #24]
 80027ba:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	685b      	ldr	r3, [r3, #4]
 80027c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80027c4:	2b00      	cmp	r3, #0
 80027c6:	f000 80be 	beq.w	8002946 <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80027ca:	4b66      	ldr	r3, [pc, #408]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027ce:	4a65      	ldr	r2, [pc, #404]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80027d4:	6453      	str	r3, [r2, #68]	; 0x44
 80027d6:	4b63      	ldr	r3, [pc, #396]	; (8002964 <HAL_GPIO_Init+0x324>)
 80027d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80027da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80027de:	60fb      	str	r3, [r7, #12]
 80027e0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 80027e2:	4a61      	ldr	r2, [pc, #388]	; (8002968 <HAL_GPIO_Init+0x328>)
 80027e4:	69fb      	ldr	r3, [r7, #28]
 80027e6:	089b      	lsrs	r3, r3, #2
 80027e8:	3302      	adds	r3, #2
 80027ea:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80027ee:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 80027f0:	69fb      	ldr	r3, [r7, #28]
 80027f2:	f003 0303 	and.w	r3, r3, #3
 80027f6:	009b      	lsls	r3, r3, #2
 80027f8:	220f      	movs	r2, #15
 80027fa:	fa02 f303 	lsl.w	r3, r2, r3
 80027fe:	43db      	mvns	r3, r3
 8002800:	69ba      	ldr	r2, [r7, #24]
 8002802:	4013      	ands	r3, r2
 8002804:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	4a58      	ldr	r2, [pc, #352]	; (800296c <HAL_GPIO_Init+0x32c>)
 800280a:	4293      	cmp	r3, r2
 800280c:	d037      	beq.n	800287e <HAL_GPIO_Init+0x23e>
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	4a57      	ldr	r2, [pc, #348]	; (8002970 <HAL_GPIO_Init+0x330>)
 8002812:	4293      	cmp	r3, r2
 8002814:	d031      	beq.n	800287a <HAL_GPIO_Init+0x23a>
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	4a56      	ldr	r2, [pc, #344]	; (8002974 <HAL_GPIO_Init+0x334>)
 800281a:	4293      	cmp	r3, r2
 800281c:	d02b      	beq.n	8002876 <HAL_GPIO_Init+0x236>
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4a55      	ldr	r2, [pc, #340]	; (8002978 <HAL_GPIO_Init+0x338>)
 8002822:	4293      	cmp	r3, r2
 8002824:	d025      	beq.n	8002872 <HAL_GPIO_Init+0x232>
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	4a54      	ldr	r2, [pc, #336]	; (800297c <HAL_GPIO_Init+0x33c>)
 800282a:	4293      	cmp	r3, r2
 800282c:	d01f      	beq.n	800286e <HAL_GPIO_Init+0x22e>
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	4a53      	ldr	r2, [pc, #332]	; (8002980 <HAL_GPIO_Init+0x340>)
 8002832:	4293      	cmp	r3, r2
 8002834:	d019      	beq.n	800286a <HAL_GPIO_Init+0x22a>
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	4a52      	ldr	r2, [pc, #328]	; (8002984 <HAL_GPIO_Init+0x344>)
 800283a:	4293      	cmp	r3, r2
 800283c:	d013      	beq.n	8002866 <HAL_GPIO_Init+0x226>
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	4a51      	ldr	r2, [pc, #324]	; (8002988 <HAL_GPIO_Init+0x348>)
 8002842:	4293      	cmp	r3, r2
 8002844:	d00d      	beq.n	8002862 <HAL_GPIO_Init+0x222>
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	4a50      	ldr	r2, [pc, #320]	; (800298c <HAL_GPIO_Init+0x34c>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d007      	beq.n	800285e <HAL_GPIO_Init+0x21e>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	4a4f      	ldr	r2, [pc, #316]	; (8002990 <HAL_GPIO_Init+0x350>)
 8002852:	4293      	cmp	r3, r2
 8002854:	d101      	bne.n	800285a <HAL_GPIO_Init+0x21a>
 8002856:	2309      	movs	r3, #9
 8002858:	e012      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800285a:	230a      	movs	r3, #10
 800285c:	e010      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800285e:	2308      	movs	r3, #8
 8002860:	e00e      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002862:	2307      	movs	r3, #7
 8002864:	e00c      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002866:	2306      	movs	r3, #6
 8002868:	e00a      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800286a:	2305      	movs	r3, #5
 800286c:	e008      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800286e:	2304      	movs	r3, #4
 8002870:	e006      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002872:	2303      	movs	r3, #3
 8002874:	e004      	b.n	8002880 <HAL_GPIO_Init+0x240>
 8002876:	2302      	movs	r3, #2
 8002878:	e002      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800287a:	2301      	movs	r3, #1
 800287c:	e000      	b.n	8002880 <HAL_GPIO_Init+0x240>
 800287e:	2300      	movs	r3, #0
 8002880:	69fa      	ldr	r2, [r7, #28]
 8002882:	f002 0203 	and.w	r2, r2, #3
 8002886:	0092      	lsls	r2, r2, #2
 8002888:	4093      	lsls	r3, r2
 800288a:	69ba      	ldr	r2, [r7, #24]
 800288c:	4313      	orrs	r3, r2
 800288e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8002890:	4935      	ldr	r1, [pc, #212]	; (8002968 <HAL_GPIO_Init+0x328>)
 8002892:	69fb      	ldr	r3, [r7, #28]
 8002894:	089b      	lsrs	r3, r3, #2
 8002896:	3302      	adds	r3, #2
 8002898:	69ba      	ldr	r2, [r7, #24]
 800289a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800289e:	4b3d      	ldr	r3, [pc, #244]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028a0:	681b      	ldr	r3, [r3, #0]
 80028a2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028a4:	693b      	ldr	r3, [r7, #16]
 80028a6:	43db      	mvns	r3, r3
 80028a8:	69ba      	ldr	r2, [r7, #24]
 80028aa:	4013      	ands	r3, r2
 80028ac:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80028ae:	683b      	ldr	r3, [r7, #0]
 80028b0:	685b      	ldr	r3, [r3, #4]
 80028b2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d003      	beq.n	80028c2 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 80028ba:	69ba      	ldr	r2, [r7, #24]
 80028bc:	693b      	ldr	r3, [r7, #16]
 80028be:	4313      	orrs	r3, r2
 80028c0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80028c2:	4a34      	ldr	r2, [pc, #208]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028c4:	69bb      	ldr	r3, [r7, #24]
 80028c6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80028c8:	4b32      	ldr	r3, [pc, #200]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028ca:	685b      	ldr	r3, [r3, #4]
 80028cc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028ce:	693b      	ldr	r3, [r7, #16]
 80028d0:	43db      	mvns	r3, r3
 80028d2:	69ba      	ldr	r2, [r7, #24]
 80028d4:	4013      	ands	r3, r2
 80028d6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80028d8:	683b      	ldr	r3, [r7, #0]
 80028da:	685b      	ldr	r3, [r3, #4]
 80028dc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80028e0:	2b00      	cmp	r3, #0
 80028e2:	d003      	beq.n	80028ec <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 80028e4:	69ba      	ldr	r2, [r7, #24]
 80028e6:	693b      	ldr	r3, [r7, #16]
 80028e8:	4313      	orrs	r3, r2
 80028ea:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80028ec:	4a29      	ldr	r2, [pc, #164]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028ee:	69bb      	ldr	r3, [r7, #24]
 80028f0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80028f2:	4b28      	ldr	r3, [pc, #160]	; (8002994 <HAL_GPIO_Init+0x354>)
 80028f4:	689b      	ldr	r3, [r3, #8]
 80028f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	43db      	mvns	r3, r3
 80028fc:	69ba      	ldr	r2, [r7, #24]
 80028fe:	4013      	ands	r3, r2
 8002900:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002902:	683b      	ldr	r3, [r7, #0]
 8002904:	685b      	ldr	r3, [r3, #4]
 8002906:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800290a:	2b00      	cmp	r3, #0
 800290c:	d003      	beq.n	8002916 <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 800290e:	69ba      	ldr	r2, [r7, #24]
 8002910:	693b      	ldr	r3, [r7, #16]
 8002912:	4313      	orrs	r3, r2
 8002914:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002916:	4a1f      	ldr	r2, [pc, #124]	; (8002994 <HAL_GPIO_Init+0x354>)
 8002918:	69bb      	ldr	r3, [r7, #24]
 800291a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800291c:	4b1d      	ldr	r3, [pc, #116]	; (8002994 <HAL_GPIO_Init+0x354>)
 800291e:	68db      	ldr	r3, [r3, #12]
 8002920:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002922:	693b      	ldr	r3, [r7, #16]
 8002924:	43db      	mvns	r3, r3
 8002926:	69ba      	ldr	r2, [r7, #24]
 8002928:	4013      	ands	r3, r2
 800292a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800292c:	683b      	ldr	r3, [r7, #0]
 800292e:	685b      	ldr	r3, [r3, #4]
 8002930:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002934:	2b00      	cmp	r3, #0
 8002936:	d003      	beq.n	8002940 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8002938:	69ba      	ldr	r2, [r7, #24]
 800293a:	693b      	ldr	r3, [r7, #16]
 800293c:	4313      	orrs	r3, r2
 800293e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002940:	4a14      	ldr	r2, [pc, #80]	; (8002994 <HAL_GPIO_Init+0x354>)
 8002942:	69bb      	ldr	r3, [r7, #24]
 8002944:	60d3      	str	r3, [r2, #12]
  for(position = 0; position < GPIO_NUMBER; position++)
 8002946:	69fb      	ldr	r3, [r7, #28]
 8002948:	3301      	adds	r3, #1
 800294a:	61fb      	str	r3, [r7, #28]
 800294c:	69fb      	ldr	r3, [r7, #28]
 800294e:	2b0f      	cmp	r3, #15
 8002950:	f67f ae86 	bls.w	8002660 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8002954:	bf00      	nop
 8002956:	bf00      	nop
 8002958:	3724      	adds	r7, #36	; 0x24
 800295a:	46bd      	mov	sp, r7
 800295c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	40023800 	.word	0x40023800
 8002968:	40013800 	.word	0x40013800
 800296c:	40020000 	.word	0x40020000
 8002970:	40020400 	.word	0x40020400
 8002974:	40020800 	.word	0x40020800
 8002978:	40020c00 	.word	0x40020c00
 800297c:	40021000 	.word	0x40021000
 8002980:	40021400 	.word	0x40021400
 8002984:	40021800 	.word	0x40021800
 8002988:	40021c00 	.word	0x40021c00
 800298c:	40022000 	.word	0x40022000
 8002990:	40022400 	.word	0x40022400
 8002994:	40013c00 	.word	0x40013c00

08002998 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002998:	b480      	push	{r7}
 800299a:	b083      	sub	sp, #12
 800299c:	af00      	add	r7, sp, #0
 800299e:	6078      	str	r0, [r7, #4]
 80029a0:	460b      	mov	r3, r1
 80029a2:	807b      	strh	r3, [r7, #2]
 80029a4:	4613      	mov	r3, r2
 80029a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80029a8:	787b      	ldrb	r3, [r7, #1]
 80029aa:	2b00      	cmp	r3, #0
 80029ac:	d003      	beq.n	80029b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80029ae:	887a      	ldrh	r2, [r7, #2]
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 80029b4:	e003      	b.n	80029be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 80029b6:	887b      	ldrh	r3, [r7, #2]
 80029b8:	041a      	lsls	r2, r3, #16
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	619a      	str	r2, [r3, #24]
}
 80029be:	bf00      	nop
 80029c0:	370c      	adds	r7, #12
 80029c2:	46bd      	mov	sp, r7
 80029c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c8:	4770      	bx	lr

080029ca <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 80029ca:	b5f0      	push	{r4, r5, r6, r7, lr}
 80029cc:	b08f      	sub	sp, #60	; 0x3c
 80029ce:	af0a      	add	r7, sp, #40	; 0x28
 80029d0:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d101      	bne.n	80029dc <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 80029d8:	2301      	movs	r3, #1
 80029da:	e116      	b.n	8002c0a <HAL_PCD_Init+0x240>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  USBx = hpcd->Instance;
 80029dc:	687b      	ldr	r3, [r7, #4]
 80029de:	681b      	ldr	r3, [r3, #0]
 80029e0:	60bb      	str	r3, [r7, #8]

  if (hpcd->State == HAL_PCD_STATE_RESET)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	f893 33bd 	ldrb.w	r3, [r3, #957]	; 0x3bd
 80029e8:	b2db      	uxtb	r3, r3
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d106      	bne.n	80029fc <HAL_PCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 80029ee:	687b      	ldr	r3, [r7, #4]
 80029f0:	2200      	movs	r2, #0
 80029f2:	f883 23bc 	strb.w	r2, [r3, #956]	; 0x3bc

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 80029f6:	6878      	ldr	r0, [r7, #4]
 80029f8:	f7fe fe12 	bl	8001620 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	2203      	movs	r2, #3
 8002a00:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8002a04:	68bb      	ldr	r3, [r7, #8]
 8002a06:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8002a08:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0c:	2b00      	cmp	r3, #0
 8002a0e:	d102      	bne.n	8002a16 <HAL_PCD_Init+0x4c>
  {
    hpcd->Init.dma_enable = 0U;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	2200      	movs	r2, #0
 8002a14:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 8002a16:	687b      	ldr	r3, [r7, #4]
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f002 f974 	bl	8004d08 <USB_DisableGlobalInt>

  /*Init the Core (common init.) */
  if (USB_CoreInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	603b      	str	r3, [r7, #0]
 8002a26:	687e      	ldr	r6, [r7, #4]
 8002a28:	466d      	mov	r5, sp
 8002a2a:	f106 0410 	add.w	r4, r6, #16
 8002a2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a32:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002a34:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002a36:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002a3a:	e885 0003 	stmia.w	r5, {r0, r1}
 8002a3e:	1d33      	adds	r3, r6, #4
 8002a40:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002a42:	6838      	ldr	r0, [r7, #0]
 8002a44:	f002 f908 	bl	8004c58 <USB_CoreInit>
 8002a48:	4603      	mov	r3, r0
 8002a4a:	2b00      	cmp	r3, #0
 8002a4c:	d005      	beq.n	8002a5a <HAL_PCD_Init+0x90>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	2202      	movs	r2, #2
 8002a52:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002a56:	2301      	movs	r3, #1
 8002a58:	e0d7      	b.n	8002c0a <HAL_PCD_Init+0x240>
  }

  /* Force Device Mode*/
  (void)USB_SetCurrentMode(hpcd->Instance, USB_DEVICE_MODE);
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	681b      	ldr	r3, [r3, #0]
 8002a5e:	2100      	movs	r1, #0
 8002a60:	4618      	mov	r0, r3
 8002a62:	f002 f962 	bl	8004d2a <USB_SetCurrentMode>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002a66:	2300      	movs	r3, #0
 8002a68:	73fb      	strb	r3, [r7, #15]
 8002a6a:	e04a      	b.n	8002b02 <HAL_PCD_Init+0x138>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 8002a6c:	7bfa      	ldrb	r2, [r7, #15]
 8002a6e:	6879      	ldr	r1, [r7, #4]
 8002a70:	4613      	mov	r3, r2
 8002a72:	00db      	lsls	r3, r3, #3
 8002a74:	1a9b      	subs	r3, r3, r2
 8002a76:	009b      	lsls	r3, r3, #2
 8002a78:	440b      	add	r3, r1
 8002a7a:	333d      	adds	r3, #61	; 0x3d
 8002a7c:	2201      	movs	r2, #1
 8002a7e:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 8002a80:	7bfa      	ldrb	r2, [r7, #15]
 8002a82:	6879      	ldr	r1, [r7, #4]
 8002a84:	4613      	mov	r3, r2
 8002a86:	00db      	lsls	r3, r3, #3
 8002a88:	1a9b      	subs	r3, r3, r2
 8002a8a:	009b      	lsls	r3, r3, #2
 8002a8c:	440b      	add	r3, r1
 8002a8e:	333c      	adds	r3, #60	; 0x3c
 8002a90:	7bfa      	ldrb	r2, [r7, #15]
 8002a92:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].tx_fifo_num = i;
 8002a94:	7bfa      	ldrb	r2, [r7, #15]
 8002a96:	7bfb      	ldrb	r3, [r7, #15]
 8002a98:	b298      	uxth	r0, r3
 8002a9a:	6879      	ldr	r1, [r7, #4]
 8002a9c:	4613      	mov	r3, r2
 8002a9e:	00db      	lsls	r3, r3, #3
 8002aa0:	1a9b      	subs	r3, r3, r2
 8002aa2:	009b      	lsls	r3, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	3342      	adds	r3, #66	; 0x42
 8002aa8:	4602      	mov	r2, r0
 8002aaa:	801a      	strh	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 8002aac:	7bfa      	ldrb	r2, [r7, #15]
 8002aae:	6879      	ldr	r1, [r7, #4]
 8002ab0:	4613      	mov	r3, r2
 8002ab2:	00db      	lsls	r3, r3, #3
 8002ab4:	1a9b      	subs	r3, r3, r2
 8002ab6:	009b      	lsls	r3, r3, #2
 8002ab8:	440b      	add	r3, r1
 8002aba:	333f      	adds	r3, #63	; 0x3f
 8002abc:	2200      	movs	r2, #0
 8002abe:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 8002ac0:	7bfa      	ldrb	r2, [r7, #15]
 8002ac2:	6879      	ldr	r1, [r7, #4]
 8002ac4:	4613      	mov	r3, r2
 8002ac6:	00db      	lsls	r3, r3, #3
 8002ac8:	1a9b      	subs	r3, r3, r2
 8002aca:	009b      	lsls	r3, r3, #2
 8002acc:	440b      	add	r3, r1
 8002ace:	3344      	adds	r3, #68	; 0x44
 8002ad0:	2200      	movs	r2, #0
 8002ad2:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 8002ad4:	7bfa      	ldrb	r2, [r7, #15]
 8002ad6:	6879      	ldr	r1, [r7, #4]
 8002ad8:	4613      	mov	r3, r2
 8002ada:	00db      	lsls	r3, r3, #3
 8002adc:	1a9b      	subs	r3, r3, r2
 8002ade:	009b      	lsls	r3, r3, #2
 8002ae0:	440b      	add	r3, r1
 8002ae2:	3348      	adds	r3, #72	; 0x48
 8002ae4:	2200      	movs	r2, #0
 8002ae6:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 8002ae8:	7bfa      	ldrb	r2, [r7, #15]
 8002aea:	6879      	ldr	r1, [r7, #4]
 8002aec:	4613      	mov	r3, r2
 8002aee:	00db      	lsls	r3, r3, #3
 8002af0:	1a9b      	subs	r3, r3, r2
 8002af2:	009b      	lsls	r3, r3, #2
 8002af4:	440b      	add	r3, r1
 8002af6:	3350      	adds	r3, #80	; 0x50
 8002af8:	2200      	movs	r2, #0
 8002afa:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002afc:	7bfb      	ldrb	r3, [r7, #15]
 8002afe:	3301      	adds	r3, #1
 8002b00:	73fb      	strb	r3, [r7, #15]
 8002b02:	7bfa      	ldrb	r2, [r7, #15]
 8002b04:	687b      	ldr	r3, [r7, #4]
 8002b06:	685b      	ldr	r3, [r3, #4]
 8002b08:	429a      	cmp	r2, r3
 8002b0a:	d3af      	bcc.n	8002a6c <HAL_PCD_Init+0xa2>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b0c:	2300      	movs	r3, #0
 8002b0e:	73fb      	strb	r3, [r7, #15]
 8002b10:	e044      	b.n	8002b9c <HAL_PCD_Init+0x1d2>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 8002b12:	7bfa      	ldrb	r2, [r7, #15]
 8002b14:	6879      	ldr	r1, [r7, #4]
 8002b16:	4613      	mov	r3, r2
 8002b18:	00db      	lsls	r3, r3, #3
 8002b1a:	1a9b      	subs	r3, r3, r2
 8002b1c:	009b      	lsls	r3, r3, #2
 8002b1e:	440b      	add	r3, r1
 8002b20:	f203 13fd 	addw	r3, r3, #509	; 0x1fd
 8002b24:	2200      	movs	r2, #0
 8002b26:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 8002b28:	7bfa      	ldrb	r2, [r7, #15]
 8002b2a:	6879      	ldr	r1, [r7, #4]
 8002b2c:	4613      	mov	r3, r2
 8002b2e:	00db      	lsls	r3, r3, #3
 8002b30:	1a9b      	subs	r3, r3, r2
 8002b32:	009b      	lsls	r3, r3, #2
 8002b34:	440b      	add	r3, r1
 8002b36:	f503 73fe 	add.w	r3, r3, #508	; 0x1fc
 8002b3a:	7bfa      	ldrb	r2, [r7, #15]
 8002b3c:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 8002b3e:	7bfa      	ldrb	r2, [r7, #15]
 8002b40:	6879      	ldr	r1, [r7, #4]
 8002b42:	4613      	mov	r3, r2
 8002b44:	00db      	lsls	r3, r3, #3
 8002b46:	1a9b      	subs	r3, r3, r2
 8002b48:	009b      	lsls	r3, r3, #2
 8002b4a:	440b      	add	r3, r1
 8002b4c:	f203 13ff 	addw	r3, r3, #511	; 0x1ff
 8002b50:	2200      	movs	r2, #0
 8002b52:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 8002b54:	7bfa      	ldrb	r2, [r7, #15]
 8002b56:	6879      	ldr	r1, [r7, #4]
 8002b58:	4613      	mov	r3, r2
 8002b5a:	00db      	lsls	r3, r3, #3
 8002b5c:	1a9b      	subs	r3, r3, r2
 8002b5e:	009b      	lsls	r3, r3, #2
 8002b60:	440b      	add	r3, r1
 8002b62:	f503 7301 	add.w	r3, r3, #516	; 0x204
 8002b66:	2200      	movs	r2, #0
 8002b68:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 8002b6a:	7bfa      	ldrb	r2, [r7, #15]
 8002b6c:	6879      	ldr	r1, [r7, #4]
 8002b6e:	4613      	mov	r3, r2
 8002b70:	00db      	lsls	r3, r3, #3
 8002b72:	1a9b      	subs	r3, r3, r2
 8002b74:	009b      	lsls	r3, r3, #2
 8002b76:	440b      	add	r3, r1
 8002b78:	f503 7302 	add.w	r3, r3, #520	; 0x208
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 8002b80:	7bfa      	ldrb	r2, [r7, #15]
 8002b82:	6879      	ldr	r1, [r7, #4]
 8002b84:	4613      	mov	r3, r2
 8002b86:	00db      	lsls	r3, r3, #3
 8002b88:	1a9b      	subs	r3, r3, r2
 8002b8a:	009b      	lsls	r3, r3, #2
 8002b8c:	440b      	add	r3, r1
 8002b8e:	f503 7304 	add.w	r3, r3, #528	; 0x210
 8002b92:	2200      	movs	r2, #0
 8002b94:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 8002b96:	7bfb      	ldrb	r3, [r7, #15]
 8002b98:	3301      	adds	r3, #1
 8002b9a:	73fb      	strb	r3, [r7, #15]
 8002b9c:	7bfa      	ldrb	r2, [r7, #15]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	685b      	ldr	r3, [r3, #4]
 8002ba2:	429a      	cmp	r2, r3
 8002ba4:	d3b5      	bcc.n	8002b12 <HAL_PCD_Init+0x148>
  }

  /* Init Device */
  if (USB_DevInit(hpcd->Instance, hpcd->Init) != HAL_OK)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	603b      	str	r3, [r7, #0]
 8002bac:	687e      	ldr	r6, [r7, #4]
 8002bae:	466d      	mov	r5, sp
 8002bb0:	f106 0410 	add.w	r4, r6, #16
 8002bb4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bb6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bb8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002bba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002bbc:	e894 0003 	ldmia.w	r4, {r0, r1}
 8002bc0:	e885 0003 	stmia.w	r5, {r0, r1}
 8002bc4:	1d33      	adds	r3, r6, #4
 8002bc6:	cb0e      	ldmia	r3, {r1, r2, r3}
 8002bc8:	6838      	ldr	r0, [r7, #0]
 8002bca:	f002 f8d9 	bl	8004d80 <USB_DevInit>
 8002bce:	4603      	mov	r3, r0
 8002bd0:	2b00      	cmp	r3, #0
 8002bd2:	d005      	beq.n	8002be0 <HAL_PCD_Init+0x216>
  {
    hpcd->State = HAL_PCD_STATE_ERROR;
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	2202      	movs	r2, #2
 8002bd8:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
    return HAL_ERROR;
 8002bdc:	2301      	movs	r3, #1
 8002bde:	e014      	b.n	8002c0a <HAL_PCD_Init+0x240>
  }

  hpcd->USB_Address = 0U;
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	2200      	movs	r2, #0
 8002be4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  hpcd->State = HAL_PCD_STATE_READY;
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	2201      	movs	r2, #1
 8002bec:	f883 23bd 	strb.w	r2, [r3, #957]	; 0x3bd
  
  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 8002bf0:	687b      	ldr	r3, [r7, #4]
 8002bf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002bf4:	2b01      	cmp	r3, #1
 8002bf6:	d102      	bne.n	8002bfe <HAL_PCD_Init+0x234>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 f80b 	bl	8002c14 <HAL_PCDEx_ActivateLPM>
  }

  (void)USB_DevDisconnect(hpcd->Instance);
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	4618      	mov	r0, r3
 8002c04:	f002 fa8b 	bl	800511e <USB_DevDisconnect>

  return HAL_OK;
 8002c08:	2300      	movs	r3, #0
}
 8002c0a:	4618      	mov	r0, r3
 8002c0c:	3714      	adds	r7, #20
 8002c0e:	46bd      	mov	sp, r7
 8002c10:	bdf0      	pop	{r4, r5, r6, r7, pc}
	...

08002c14 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 8002c14:	b480      	push	{r7}
 8002c16:	b085      	sub	sp, #20
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hpcd->Instance;
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	60fb      	str	r3, [r7, #12]

  hpcd->lpm_active = 1U;
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	2201      	movs	r2, #1
 8002c26:	f8c3 23fc 	str.w	r2, [r3, #1020]	; 0x3fc
  hpcd->LPM_State = LPM_L0;
 8002c2a:	687b      	ldr	r3, [r7, #4]
 8002c2c:	2200      	movs	r2, #0
 8002c2e:	f883 23f4 	strb.w	r2, [r3, #1012]	; 0x3f4
  USBx->GINTMSK |= USB_OTG_GINTMSK_LPMINTM;
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	699b      	ldr	r3, [r3, #24]
 8002c36:	f043 6200 	orr.w	r2, r3, #134217728	; 0x8000000
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	619a      	str	r2, [r3, #24]
  USBx->GLPMCFG |= (USB_OTG_GLPMCFG_LPMEN | USB_OTG_GLPMCFG_LPMACK | USB_OTG_GLPMCFG_ENBESL);
 8002c3e:	68fb      	ldr	r3, [r7, #12]
 8002c40:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8002c42:	4b05      	ldr	r3, [pc, #20]	; (8002c58 <HAL_PCDEx_ActivateLPM+0x44>)
 8002c44:	4313      	orrs	r3, r2
 8002c46:	68fa      	ldr	r2, [r7, #12]
 8002c48:	6553      	str	r3, [r2, #84]	; 0x54

  return HAL_OK;
 8002c4a:	2300      	movs	r3, #0
}
 8002c4c:	4618      	mov	r0, r3
 8002c4e:	3714      	adds	r7, #20
 8002c50:	46bd      	mov	sp, r7
 8002c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c56:	4770      	bx	lr
 8002c58:	10000003 	.word	0x10000003

08002c5c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002c5c:	b480      	push	{r7}
 8002c5e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8002c60:	4b05      	ldr	r3, [pc, #20]	; (8002c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c62:	681b      	ldr	r3, [r3, #0]
 8002c64:	4a04      	ldr	r2, [pc, #16]	; (8002c78 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8002c66:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002c6a:	6013      	str	r3, [r2, #0]
}
 8002c6c:	bf00      	nop
 8002c6e:	46bd      	mov	sp, r7
 8002c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c74:	4770      	bx	lr
 8002c76:	bf00      	nop
 8002c78:	40007000 	.word	0x40007000

08002c7c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002c7c:	b580      	push	{r7, lr}
 8002c7e:	b086      	sub	sp, #24
 8002c80:	af00      	add	r7, sp, #0
 8002c82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8002c84:	2300      	movs	r3, #0
 8002c86:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d101      	bne.n	8002c92 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e291      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	681b      	ldr	r3, [r3, #0]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	2b00      	cmp	r3, #0
 8002c9c:	f000 8087 	beq.w	8002dae <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ca0:	4b96      	ldr	r3, [pc, #600]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002ca2:	689b      	ldr	r3, [r3, #8]
 8002ca4:	f003 030c 	and.w	r3, r3, #12
 8002ca8:	2b04      	cmp	r3, #4
 8002caa:	d00c      	beq.n	8002cc6 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002cac:	4b93      	ldr	r3, [pc, #588]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002cae:	689b      	ldr	r3, [r3, #8]
 8002cb0:	f003 030c 	and.w	r3, r3, #12
 8002cb4:	2b08      	cmp	r3, #8
 8002cb6:	d112      	bne.n	8002cde <HAL_RCC_OscConfig+0x62>
 8002cb8:	4b90      	ldr	r3, [pc, #576]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002cba:	685b      	ldr	r3, [r3, #4]
 8002cbc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002cc0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8002cc4:	d10b      	bne.n	8002cde <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002cc6:	4b8d      	ldr	r3, [pc, #564]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002cc8:	681b      	ldr	r3, [r3, #0]
 8002cca:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cce:	2b00      	cmp	r3, #0
 8002cd0:	d06c      	beq.n	8002dac <HAL_RCC_OscConfig+0x130>
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	685b      	ldr	r3, [r3, #4]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	d168      	bne.n	8002dac <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8002cda:	2301      	movs	r3, #1
 8002cdc:	e26b      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002cde:	687b      	ldr	r3, [r7, #4]
 8002ce0:	685b      	ldr	r3, [r3, #4]
 8002ce2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002ce6:	d106      	bne.n	8002cf6 <HAL_RCC_OscConfig+0x7a>
 8002ce8:	4b84      	ldr	r3, [pc, #528]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	4a83      	ldr	r2, [pc, #524]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002cee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002cf2:	6013      	str	r3, [r2, #0]
 8002cf4:	e02e      	b.n	8002d54 <HAL_RCC_OscConfig+0xd8>
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	685b      	ldr	r3, [r3, #4]
 8002cfa:	2b00      	cmp	r3, #0
 8002cfc:	d10c      	bne.n	8002d18 <HAL_RCC_OscConfig+0x9c>
 8002cfe:	4b7f      	ldr	r3, [pc, #508]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	4a7e      	ldr	r2, [pc, #504]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d04:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d08:	6013      	str	r3, [r2, #0]
 8002d0a:	4b7c      	ldr	r3, [pc, #496]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d0c:	681b      	ldr	r3, [r3, #0]
 8002d0e:	4a7b      	ldr	r2, [pc, #492]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d10:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d14:	6013      	str	r3, [r2, #0]
 8002d16:	e01d      	b.n	8002d54 <HAL_RCC_OscConfig+0xd8>
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	685b      	ldr	r3, [r3, #4]
 8002d1c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8002d20:	d10c      	bne.n	8002d3c <HAL_RCC_OscConfig+0xc0>
 8002d22:	4b76      	ldr	r3, [pc, #472]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	4a75      	ldr	r2, [pc, #468]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d28:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d2c:	6013      	str	r3, [r2, #0]
 8002d2e:	4b73      	ldr	r3, [pc, #460]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a72      	ldr	r2, [pc, #456]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002d38:	6013      	str	r3, [r2, #0]
 8002d3a:	e00b      	b.n	8002d54 <HAL_RCC_OscConfig+0xd8>
 8002d3c:	4b6f      	ldr	r3, [pc, #444]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	4a6e      	ldr	r2, [pc, #440]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d42:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8002d46:	6013      	str	r3, [r2, #0]
 8002d48:	4b6c      	ldr	r3, [pc, #432]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	4a6b      	ldr	r2, [pc, #428]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d4e:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8002d52:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	685b      	ldr	r3, [r3, #4]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d013      	beq.n	8002d84 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d5c:	f7fe fd7c 	bl	8001858 <HAL_GetTick>
 8002d60:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d62:	e008      	b.n	8002d76 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d64:	f7fe fd78 	bl	8001858 <HAL_GetTick>
 8002d68:	4602      	mov	r2, r0
 8002d6a:	693b      	ldr	r3, [r7, #16]
 8002d6c:	1ad3      	subs	r3, r2, r3
 8002d6e:	2b64      	cmp	r3, #100	; 0x64
 8002d70:	d901      	bls.n	8002d76 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8002d72:	2303      	movs	r3, #3
 8002d74:	e21f      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002d76:	4b61      	ldr	r3, [pc, #388]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d7e:	2b00      	cmp	r3, #0
 8002d80:	d0f0      	beq.n	8002d64 <HAL_RCC_OscConfig+0xe8>
 8002d82:	e014      	b.n	8002dae <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002d84:	f7fe fd68 	bl	8001858 <HAL_GetTick>
 8002d88:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d8a:	e008      	b.n	8002d9e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002d8c:	f7fe fd64 	bl	8001858 <HAL_GetTick>
 8002d90:	4602      	mov	r2, r0
 8002d92:	693b      	ldr	r3, [r7, #16]
 8002d94:	1ad3      	subs	r3, r2, r3
 8002d96:	2b64      	cmp	r3, #100	; 0x64
 8002d98:	d901      	bls.n	8002d9e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8002d9a:	2303      	movs	r3, #3
 8002d9c:	e20b      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002d9e:	4b57      	ldr	r3, [pc, #348]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002da0:	681b      	ldr	r3, [r3, #0]
 8002da2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	d1f0      	bne.n	8002d8c <HAL_RCC_OscConfig+0x110>
 8002daa:	e000      	b.n	8002dae <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002dac:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	681b      	ldr	r3, [r3, #0]
 8002db2:	f003 0302 	and.w	r3, r3, #2
 8002db6:	2b00      	cmp	r3, #0
 8002db8:	d069      	beq.n	8002e8e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002dba:	4b50      	ldr	r3, [pc, #320]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002dbc:	689b      	ldr	r3, [r3, #8]
 8002dbe:	f003 030c 	and.w	r3, r3, #12
 8002dc2:	2b00      	cmp	r3, #0
 8002dc4:	d00b      	beq.n	8002dde <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8002dc6:	4b4d      	ldr	r3, [pc, #308]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002dc8:	689b      	ldr	r3, [r3, #8]
 8002dca:	f003 030c 	and.w	r3, r3, #12
 8002dce:	2b08      	cmp	r3, #8
 8002dd0:	d11c      	bne.n	8002e0c <HAL_RCC_OscConfig+0x190>
 8002dd2:	4b4a      	ldr	r3, [pc, #296]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002dd4:	685b      	ldr	r3, [r3, #4]
 8002dd6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d116      	bne.n	8002e0c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002dde:	4b47      	ldr	r3, [pc, #284]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f003 0302 	and.w	r3, r3, #2
 8002de6:	2b00      	cmp	r3, #0
 8002de8:	d005      	beq.n	8002df6 <HAL_RCC_OscConfig+0x17a>
 8002dea:	687b      	ldr	r3, [r7, #4]
 8002dec:	68db      	ldr	r3, [r3, #12]
 8002dee:	2b01      	cmp	r3, #1
 8002df0:	d001      	beq.n	8002df6 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8002df2:	2301      	movs	r3, #1
 8002df4:	e1df      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002df6:	4b41      	ldr	r3, [pc, #260]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002df8:	681b      	ldr	r3, [r3, #0]
 8002dfa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	691b      	ldr	r3, [r3, #16]
 8002e02:	00db      	lsls	r3, r3, #3
 8002e04:	493d      	ldr	r1, [pc, #244]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e06:	4313      	orrs	r3, r2
 8002e08:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002e0a:	e040      	b.n	8002e8e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	68db      	ldr	r3, [r3, #12]
 8002e10:	2b00      	cmp	r3, #0
 8002e12:	d023      	beq.n	8002e5c <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002e14:	4b39      	ldr	r3, [pc, #228]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a38      	ldr	r2, [pc, #224]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e1a:	f043 0301 	orr.w	r3, r3, #1
 8002e1e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e20:	f7fe fd1a 	bl	8001858 <HAL_GetTick>
 8002e24:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e26:	e008      	b.n	8002e3a <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e28:	f7fe fd16 	bl	8001858 <HAL_GetTick>
 8002e2c:	4602      	mov	r2, r0
 8002e2e:	693b      	ldr	r3, [r7, #16]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b02      	cmp	r3, #2
 8002e34:	d901      	bls.n	8002e3a <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8002e36:	2303      	movs	r3, #3
 8002e38:	e1bd      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002e3a:	4b30      	ldr	r3, [pc, #192]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e3c:	681b      	ldr	r3, [r3, #0]
 8002e3e:	f003 0302 	and.w	r3, r3, #2
 8002e42:	2b00      	cmp	r3, #0
 8002e44:	d0f0      	beq.n	8002e28 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002e46:	4b2d      	ldr	r3, [pc, #180]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	691b      	ldr	r3, [r3, #16]
 8002e52:	00db      	lsls	r3, r3, #3
 8002e54:	4929      	ldr	r1, [pc, #164]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e56:	4313      	orrs	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
 8002e5a:	e018      	b.n	8002e8e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002e5c:	4b27      	ldr	r3, [pc, #156]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4a26      	ldr	r2, [pc, #152]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e62:	f023 0301 	bic.w	r3, r3, #1
 8002e66:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002e68:	f7fe fcf6 	bl	8001858 <HAL_GetTick>
 8002e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e6e:	e008      	b.n	8002e82 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002e70:	f7fe fcf2 	bl	8001858 <HAL_GetTick>
 8002e74:	4602      	mov	r2, r0
 8002e76:	693b      	ldr	r3, [r7, #16]
 8002e78:	1ad3      	subs	r3, r2, r3
 8002e7a:	2b02      	cmp	r3, #2
 8002e7c:	d901      	bls.n	8002e82 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8002e7e:	2303      	movs	r3, #3
 8002e80:	e199      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002e82:	4b1e      	ldr	r3, [pc, #120]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002e84:	681b      	ldr	r3, [r3, #0]
 8002e86:	f003 0302 	and.w	r3, r3, #2
 8002e8a:	2b00      	cmp	r3, #0
 8002e8c:	d1f0      	bne.n	8002e70 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002e8e:	687b      	ldr	r3, [r7, #4]
 8002e90:	681b      	ldr	r3, [r3, #0]
 8002e92:	f003 0308 	and.w	r3, r3, #8
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	d038      	beq.n	8002f0c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8002e9a:	687b      	ldr	r3, [r7, #4]
 8002e9c:	695b      	ldr	r3, [r3, #20]
 8002e9e:	2b00      	cmp	r3, #0
 8002ea0:	d019      	beq.n	8002ed6 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002ea2:	4b16      	ldr	r3, [pc, #88]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002ea4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ea6:	4a15      	ldr	r2, [pc, #84]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002ea8:	f043 0301 	orr.w	r3, r3, #1
 8002eac:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002eae:	f7fe fcd3 	bl	8001858 <HAL_GetTick>
 8002eb2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002eb4:	e008      	b.n	8002ec8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eb6:	f7fe fccf 	bl	8001858 <HAL_GetTick>
 8002eba:	4602      	mov	r2, r0
 8002ebc:	693b      	ldr	r3, [r7, #16]
 8002ebe:	1ad3      	subs	r3, r2, r3
 8002ec0:	2b02      	cmp	r3, #2
 8002ec2:	d901      	bls.n	8002ec8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002ec4:	2303      	movs	r3, #3
 8002ec6:	e176      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002ec8:	4b0c      	ldr	r3, [pc, #48]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002eca:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002ecc:	f003 0302 	and.w	r3, r3, #2
 8002ed0:	2b00      	cmp	r3, #0
 8002ed2:	d0f0      	beq.n	8002eb6 <HAL_RCC_OscConfig+0x23a>
 8002ed4:	e01a      	b.n	8002f0c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002ed6:	4b09      	ldr	r3, [pc, #36]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002ed8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002eda:	4a08      	ldr	r2, [pc, #32]	; (8002efc <HAL_RCC_OscConfig+0x280>)
 8002edc:	f023 0301 	bic.w	r3, r3, #1
 8002ee0:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ee2:	f7fe fcb9 	bl	8001858 <HAL_GetTick>
 8002ee6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002ee8:	e00a      	b.n	8002f00 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002eea:	f7fe fcb5 	bl	8001858 <HAL_GetTick>
 8002eee:	4602      	mov	r2, r0
 8002ef0:	693b      	ldr	r3, [r7, #16]
 8002ef2:	1ad3      	subs	r3, r2, r3
 8002ef4:	2b02      	cmp	r3, #2
 8002ef6:	d903      	bls.n	8002f00 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8002ef8:	2303      	movs	r3, #3
 8002efa:	e15c      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
 8002efc:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002f00:	4b91      	ldr	r3, [pc, #580]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002f02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8002f04:	f003 0302 	and.w	r3, r3, #2
 8002f08:	2b00      	cmp	r3, #0
 8002f0a:	d1ee      	bne.n	8002eea <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002f0c:	687b      	ldr	r3, [r7, #4]
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	f003 0304 	and.w	r3, r3, #4
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	f000 80a4 	beq.w	8003062 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f1a:	4b8b      	ldr	r3, [pc, #556]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002f1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f1e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f22:	2b00      	cmp	r3, #0
 8002f24:	d10d      	bne.n	8002f42 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8002f26:	4b88      	ldr	r3, [pc, #544]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002f28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f2a:	4a87      	ldr	r2, [pc, #540]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002f2c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002f30:	6413      	str	r3, [r2, #64]	; 0x40
 8002f32:	4b85      	ldr	r3, [pc, #532]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002f34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002f36:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002f3a:	60bb      	str	r3, [r7, #8]
 8002f3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002f3e:	2301      	movs	r3, #1
 8002f40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f42:	4b82      	ldr	r3, [pc, #520]	; (800314c <HAL_RCC_OscConfig+0x4d0>)
 8002f44:	681b      	ldr	r3, [r3, #0]
 8002f46:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f4a:	2b00      	cmp	r3, #0
 8002f4c:	d118      	bne.n	8002f80 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8002f4e:	4b7f      	ldr	r3, [pc, #508]	; (800314c <HAL_RCC_OscConfig+0x4d0>)
 8002f50:	681b      	ldr	r3, [r3, #0]
 8002f52:	4a7e      	ldr	r2, [pc, #504]	; (800314c <HAL_RCC_OscConfig+0x4d0>)
 8002f54:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002f58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002f5a:	f7fe fc7d 	bl	8001858 <HAL_GetTick>
 8002f5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f60:	e008      	b.n	8002f74 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002f62:	f7fe fc79 	bl	8001858 <HAL_GetTick>
 8002f66:	4602      	mov	r2, r0
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	1ad3      	subs	r3, r2, r3
 8002f6c:	2b64      	cmp	r3, #100	; 0x64
 8002f6e:	d901      	bls.n	8002f74 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8002f70:	2303      	movs	r3, #3
 8002f72:	e120      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8002f74:	4b75      	ldr	r3, [pc, #468]	; (800314c <HAL_RCC_OscConfig+0x4d0>)
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d0f0      	beq.n	8002f62 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	689b      	ldr	r3, [r3, #8]
 8002f84:	2b01      	cmp	r3, #1
 8002f86:	d106      	bne.n	8002f96 <HAL_RCC_OscConfig+0x31a>
 8002f88:	4b6f      	ldr	r3, [pc, #444]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002f8a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002f8c:	4a6e      	ldr	r2, [pc, #440]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002f8e:	f043 0301 	orr.w	r3, r3, #1
 8002f92:	6713      	str	r3, [r2, #112]	; 0x70
 8002f94:	e02d      	b.n	8002ff2 <HAL_RCC_OscConfig+0x376>
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	689b      	ldr	r3, [r3, #8]
 8002f9a:	2b00      	cmp	r3, #0
 8002f9c:	d10c      	bne.n	8002fb8 <HAL_RCC_OscConfig+0x33c>
 8002f9e:	4b6a      	ldr	r3, [pc, #424]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fa2:	4a69      	ldr	r2, [pc, #420]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fa4:	f023 0301 	bic.w	r3, r3, #1
 8002fa8:	6713      	str	r3, [r2, #112]	; 0x70
 8002faa:	4b67      	ldr	r3, [pc, #412]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fae:	4a66      	ldr	r2, [pc, #408]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fb0:	f023 0304 	bic.w	r3, r3, #4
 8002fb4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fb6:	e01c      	b.n	8002ff2 <HAL_RCC_OscConfig+0x376>
 8002fb8:	687b      	ldr	r3, [r7, #4]
 8002fba:	689b      	ldr	r3, [r3, #8]
 8002fbc:	2b05      	cmp	r3, #5
 8002fbe:	d10c      	bne.n	8002fda <HAL_RCC_OscConfig+0x35e>
 8002fc0:	4b61      	ldr	r3, [pc, #388]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fc2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fc4:	4a60      	ldr	r2, [pc, #384]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fc6:	f043 0304 	orr.w	r3, r3, #4
 8002fca:	6713      	str	r3, [r2, #112]	; 0x70
 8002fcc:	4b5e      	ldr	r3, [pc, #376]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fd0:	4a5d      	ldr	r2, [pc, #372]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fd2:	f043 0301 	orr.w	r3, r3, #1
 8002fd6:	6713      	str	r3, [r2, #112]	; 0x70
 8002fd8:	e00b      	b.n	8002ff2 <HAL_RCC_OscConfig+0x376>
 8002fda:	4b5b      	ldr	r3, [pc, #364]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fdc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fde:	4a5a      	ldr	r2, [pc, #360]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fe0:	f023 0301 	bic.w	r3, r3, #1
 8002fe4:	6713      	str	r3, [r2, #112]	; 0x70
 8002fe6:	4b58      	ldr	r3, [pc, #352]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fe8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8002fea:	4a57      	ldr	r2, [pc, #348]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8002fec:	f023 0304 	bic.w	r3, r3, #4
 8002ff0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	689b      	ldr	r3, [r3, #8]
 8002ff6:	2b00      	cmp	r3, #0
 8002ff8:	d015      	beq.n	8003026 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002ffa:	f7fe fc2d 	bl	8001858 <HAL_GetTick>
 8002ffe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003000:	e00a      	b.n	8003018 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003002:	f7fe fc29 	bl	8001858 <HAL_GetTick>
 8003006:	4602      	mov	r2, r0
 8003008:	693b      	ldr	r3, [r7, #16]
 800300a:	1ad3      	subs	r3, r2, r3
 800300c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003010:	4293      	cmp	r3, r2
 8003012:	d901      	bls.n	8003018 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 8003014:	2303      	movs	r3, #3
 8003016:	e0ce      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003018:	4b4b      	ldr	r3, [pc, #300]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 800301a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800301c:	f003 0302 	and.w	r3, r3, #2
 8003020:	2b00      	cmp	r3, #0
 8003022:	d0ee      	beq.n	8003002 <HAL_RCC_OscConfig+0x386>
 8003024:	e014      	b.n	8003050 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003026:	f7fe fc17 	bl	8001858 <HAL_GetTick>
 800302a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800302c:	e00a      	b.n	8003044 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800302e:	f7fe fc13 	bl	8001858 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	693b      	ldr	r3, [r7, #16]
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	f241 3288 	movw	r2, #5000	; 0x1388
 800303c:	4293      	cmp	r3, r2
 800303e:	d901      	bls.n	8003044 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 8003040:	2303      	movs	r3, #3
 8003042:	e0b8      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003044:	4b40      	ldr	r3, [pc, #256]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8003046:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003048:	f003 0302 	and.w	r3, r3, #2
 800304c:	2b00      	cmp	r3, #0
 800304e:	d1ee      	bne.n	800302e <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8003050:	7dfb      	ldrb	r3, [r7, #23]
 8003052:	2b01      	cmp	r3, #1
 8003054:	d105      	bne.n	8003062 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003056:	4b3c      	ldr	r3, [pc, #240]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8003058:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800305a:	4a3b      	ldr	r2, [pc, #236]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 800305c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003060:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003062:	687b      	ldr	r3, [r7, #4]
 8003064:	699b      	ldr	r3, [r3, #24]
 8003066:	2b00      	cmp	r3, #0
 8003068:	f000 80a4 	beq.w	80031b4 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800306c:	4b36      	ldr	r3, [pc, #216]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 800306e:	689b      	ldr	r3, [r3, #8]
 8003070:	f003 030c 	and.w	r3, r3, #12
 8003074:	2b08      	cmp	r3, #8
 8003076:	d06b      	beq.n	8003150 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	699b      	ldr	r3, [r3, #24]
 800307c:	2b02      	cmp	r3, #2
 800307e:	d149      	bne.n	8003114 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003080:	4b31      	ldr	r3, [pc, #196]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8003082:	681b      	ldr	r3, [r3, #0]
 8003084:	4a30      	ldr	r2, [pc, #192]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8003086:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800308a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800308c:	f7fe fbe4 	bl	8001858 <HAL_GetTick>
 8003090:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003092:	e008      	b.n	80030a6 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003094:	f7fe fbe0 	bl	8001858 <HAL_GetTick>
 8003098:	4602      	mov	r2, r0
 800309a:	693b      	ldr	r3, [r7, #16]
 800309c:	1ad3      	subs	r3, r2, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d901      	bls.n	80030a6 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 80030a2:	2303      	movs	r3, #3
 80030a4:	e087      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80030a6:	4b28      	ldr	r3, [pc, #160]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d1f0      	bne.n	8003094 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	69da      	ldr	r2, [r3, #28]
 80030b6:	687b      	ldr	r3, [r7, #4]
 80030b8:	6a1b      	ldr	r3, [r3, #32]
 80030ba:	431a      	orrs	r2, r3
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80030c0:	019b      	lsls	r3, r3, #6
 80030c2:	431a      	orrs	r2, r3
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80030c8:	085b      	lsrs	r3, r3, #1
 80030ca:	3b01      	subs	r3, #1
 80030cc:	041b      	lsls	r3, r3, #16
 80030ce:	431a      	orrs	r2, r3
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80030d4:	061b      	lsls	r3, r3, #24
 80030d6:	4313      	orrs	r3, r2
 80030d8:	4a1b      	ldr	r2, [pc, #108]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 80030da:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80030de:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80030e0:	4b19      	ldr	r3, [pc, #100]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4a18      	ldr	r2, [pc, #96]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 80030e6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80030ea:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80030ec:	f7fe fbb4 	bl	8001858 <HAL_GetTick>
 80030f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80030f2:	e008      	b.n	8003106 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80030f4:	f7fe fbb0 	bl	8001858 <HAL_GetTick>
 80030f8:	4602      	mov	r2, r0
 80030fa:	693b      	ldr	r3, [r7, #16]
 80030fc:	1ad3      	subs	r3, r2, r3
 80030fe:	2b02      	cmp	r3, #2
 8003100:	d901      	bls.n	8003106 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8003102:	2303      	movs	r3, #3
 8003104:	e057      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003106:	4b10      	ldr	r3, [pc, #64]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8003108:	681b      	ldr	r3, [r3, #0]
 800310a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800310e:	2b00      	cmp	r3, #0
 8003110:	d0f0      	beq.n	80030f4 <HAL_RCC_OscConfig+0x478>
 8003112:	e04f      	b.n	80031b4 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003114:	4b0c      	ldr	r3, [pc, #48]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	4a0b      	ldr	r2, [pc, #44]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 800311a:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800311e:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003120:	f7fe fb9a 	bl	8001858 <HAL_GetTick>
 8003124:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003126:	e008      	b.n	800313a <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003128:	f7fe fb96 	bl	8001858 <HAL_GetTick>
 800312c:	4602      	mov	r2, r0
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	1ad3      	subs	r3, r2, r3
 8003132:	2b02      	cmp	r3, #2
 8003134:	d901      	bls.n	800313a <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 8003136:	2303      	movs	r3, #3
 8003138:	e03d      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800313a:	4b03      	ldr	r3, [pc, #12]	; (8003148 <HAL_RCC_OscConfig+0x4cc>)
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d1f0      	bne.n	8003128 <HAL_RCC_OscConfig+0x4ac>
 8003146:	e035      	b.n	80031b4 <HAL_RCC_OscConfig+0x538>
 8003148:	40023800 	.word	0x40023800
 800314c:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 8003150:	4b1b      	ldr	r3, [pc, #108]	; (80031c0 <HAL_RCC_OscConfig+0x544>)
 8003152:	685b      	ldr	r3, [r3, #4]
 8003154:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	699b      	ldr	r3, [r3, #24]
 800315a:	2b01      	cmp	r3, #1
 800315c:	d028      	beq.n	80031b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800315e:	68fb      	ldr	r3, [r7, #12]
 8003160:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003168:	429a      	cmp	r2, r3
 800316a:	d121      	bne.n	80031b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003176:	429a      	cmp	r2, r3
 8003178:	d11a      	bne.n	80031b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800317a:	68fa      	ldr	r2, [r7, #12]
 800317c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003180:	4013      	ands	r3, r2
 8003182:	687a      	ldr	r2, [r7, #4]
 8003184:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8003186:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8003188:	4293      	cmp	r3, r2
 800318a:	d111      	bne.n	80031b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003192:	687b      	ldr	r3, [r7, #4]
 8003194:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003196:	085b      	lsrs	r3, r3, #1
 8003198:	3b01      	subs	r3, #1
 800319a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 800319c:	429a      	cmp	r2, r3
 800319e:	d107      	bne.n	80031b0 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80031aa:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 80031ac:	429a      	cmp	r2, r3
 80031ae:	d001      	beq.n	80031b4 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 80031b4:	2300      	movs	r3, #0
}
 80031b6:	4618      	mov	r0, r3
 80031b8:	3718      	adds	r7, #24
 80031ba:	46bd      	mov	sp, r7
 80031bc:	bd80      	pop	{r7, pc}
 80031be:	bf00      	nop
 80031c0:	40023800 	.word	0x40023800

080031c4 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80031c4:	b580      	push	{r7, lr}
 80031c6:	b084      	sub	sp, #16
 80031c8:	af00      	add	r7, sp, #0
 80031ca:	6078      	str	r0, [r7, #4]
 80031cc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 80031ce:	2300      	movs	r3, #0
 80031d0:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2b00      	cmp	r3, #0
 80031d6:	d101      	bne.n	80031dc <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 80031d8:	2301      	movs	r3, #1
 80031da:	e0d0      	b.n	800337e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80031dc:	4b6a      	ldr	r3, [pc, #424]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f003 030f 	and.w	r3, r3, #15
 80031e4:	683a      	ldr	r2, [r7, #0]
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d910      	bls.n	800320c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80031ea:	4b67      	ldr	r3, [pc, #412]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80031ec:	681b      	ldr	r3, [r3, #0]
 80031ee:	f023 020f 	bic.w	r2, r3, #15
 80031f2:	4965      	ldr	r1, [pc, #404]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80031f4:	683b      	ldr	r3, [r7, #0]
 80031f6:	4313      	orrs	r3, r2
 80031f8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80031fa:	4b63      	ldr	r3, [pc, #396]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	f003 030f 	and.w	r3, r3, #15
 8003202:	683a      	ldr	r2, [r7, #0]
 8003204:	429a      	cmp	r2, r3
 8003206:	d001      	beq.n	800320c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8003208:	2301      	movs	r3, #1
 800320a:	e0b8      	b.n	800337e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	f003 0302 	and.w	r3, r3, #2
 8003214:	2b00      	cmp	r3, #0
 8003216:	d020      	beq.n	800325a <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	f003 0304 	and.w	r3, r3, #4
 8003220:	2b00      	cmp	r3, #0
 8003222:	d005      	beq.n	8003230 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003224:	4b59      	ldr	r3, [pc, #356]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003226:	689b      	ldr	r3, [r3, #8]
 8003228:	4a58      	ldr	r2, [pc, #352]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 800322a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800322e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	f003 0308 	and.w	r3, r3, #8
 8003238:	2b00      	cmp	r3, #0
 800323a:	d005      	beq.n	8003248 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800323c:	4b53      	ldr	r3, [pc, #332]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 800323e:	689b      	ldr	r3, [r3, #8]
 8003240:	4a52      	ldr	r2, [pc, #328]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003242:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003246:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003248:	4b50      	ldr	r3, [pc, #320]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003250:	687b      	ldr	r3, [r7, #4]
 8003252:	689b      	ldr	r3, [r3, #8]
 8003254:	494d      	ldr	r1, [pc, #308]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003256:	4313      	orrs	r3, r2
 8003258:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800325a:	687b      	ldr	r3, [r7, #4]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b00      	cmp	r3, #0
 8003264:	d040      	beq.n	80032e8 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b01      	cmp	r3, #1
 800326c:	d107      	bne.n	800327e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800326e:	4b47      	ldr	r3, [pc, #284]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003270:	681b      	ldr	r3, [r3, #0]
 8003272:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003276:	2b00      	cmp	r3, #0
 8003278:	d115      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800327a:	2301      	movs	r3, #1
 800327c:	e07f      	b.n	800337e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800327e:	687b      	ldr	r3, [r7, #4]
 8003280:	685b      	ldr	r3, [r3, #4]
 8003282:	2b02      	cmp	r3, #2
 8003284:	d107      	bne.n	8003296 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003286:	4b41      	ldr	r3, [pc, #260]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800328e:	2b00      	cmp	r3, #0
 8003290:	d109      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8003292:	2301      	movs	r3, #1
 8003294:	e073      	b.n	800337e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003296:	4b3d      	ldr	r3, [pc, #244]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	f003 0302 	and.w	r3, r3, #2
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d101      	bne.n	80032a6 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 80032a2:	2301      	movs	r3, #1
 80032a4:	e06b      	b.n	800337e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80032a6:	4b39      	ldr	r3, [pc, #228]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 80032a8:	689b      	ldr	r3, [r3, #8]
 80032aa:	f023 0203 	bic.w	r2, r3, #3
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	685b      	ldr	r3, [r3, #4]
 80032b2:	4936      	ldr	r1, [pc, #216]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 80032b4:	4313      	orrs	r3, r2
 80032b6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80032b8:	f7fe face 	bl	8001858 <HAL_GetTick>
 80032bc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032be:	e00a      	b.n	80032d6 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80032c0:	f7fe faca 	bl	8001858 <HAL_GetTick>
 80032c4:	4602      	mov	r2, r0
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	1ad3      	subs	r3, r2, r3
 80032ca:	f241 3288 	movw	r2, #5000	; 0x1388
 80032ce:	4293      	cmp	r3, r2
 80032d0:	d901      	bls.n	80032d6 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 80032d2:	2303      	movs	r3, #3
 80032d4:	e053      	b.n	800337e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80032d6:	4b2d      	ldr	r3, [pc, #180]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	f003 020c 	and.w	r2, r3, #12
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	685b      	ldr	r3, [r3, #4]
 80032e2:	009b      	lsls	r3, r3, #2
 80032e4:	429a      	cmp	r2, r3
 80032e6:	d1eb      	bne.n	80032c0 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80032e8:	4b27      	ldr	r3, [pc, #156]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80032ea:	681b      	ldr	r3, [r3, #0]
 80032ec:	f003 030f 	and.w	r3, r3, #15
 80032f0:	683a      	ldr	r2, [r7, #0]
 80032f2:	429a      	cmp	r2, r3
 80032f4:	d210      	bcs.n	8003318 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80032f6:	4b24      	ldr	r3, [pc, #144]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f023 020f 	bic.w	r2, r3, #15
 80032fe:	4922      	ldr	r1, [pc, #136]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003300:	683b      	ldr	r3, [r7, #0]
 8003302:	4313      	orrs	r3, r2
 8003304:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003306:	4b20      	ldr	r3, [pc, #128]	; (8003388 <HAL_RCC_ClockConfig+0x1c4>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f003 030f 	and.w	r3, r3, #15
 800330e:	683a      	ldr	r2, [r7, #0]
 8003310:	429a      	cmp	r2, r3
 8003312:	d001      	beq.n	8003318 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8003314:	2301      	movs	r3, #1
 8003316:	e032      	b.n	800337e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f003 0304 	and.w	r3, r3, #4
 8003320:	2b00      	cmp	r3, #0
 8003322:	d008      	beq.n	8003336 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003324:	4b19      	ldr	r3, [pc, #100]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003326:	689b      	ldr	r3, [r3, #8]
 8003328:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	68db      	ldr	r3, [r3, #12]
 8003330:	4916      	ldr	r1, [pc, #88]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003332:	4313      	orrs	r3, r2
 8003334:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	f003 0308 	and.w	r3, r3, #8
 800333e:	2b00      	cmp	r3, #0
 8003340:	d009      	beq.n	8003356 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003342:	4b12      	ldr	r3, [pc, #72]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003344:	689b      	ldr	r3, [r3, #8]
 8003346:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	691b      	ldr	r3, [r3, #16]
 800334e:	00db      	lsls	r3, r3, #3
 8003350:	490e      	ldr	r1, [pc, #56]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 8003352:	4313      	orrs	r3, r2
 8003354:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003356:	f000 f821 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800335a:	4602      	mov	r2, r0
 800335c:	4b0b      	ldr	r3, [pc, #44]	; (800338c <HAL_RCC_ClockConfig+0x1c8>)
 800335e:	689b      	ldr	r3, [r3, #8]
 8003360:	091b      	lsrs	r3, r3, #4
 8003362:	f003 030f 	and.w	r3, r3, #15
 8003366:	490a      	ldr	r1, [pc, #40]	; (8003390 <HAL_RCC_ClockConfig+0x1cc>)
 8003368:	5ccb      	ldrb	r3, [r1, r3]
 800336a:	fa22 f303 	lsr.w	r3, r2, r3
 800336e:	4a09      	ldr	r2, [pc, #36]	; (8003394 <HAL_RCC_ClockConfig+0x1d0>)
 8003370:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003372:	4b09      	ldr	r3, [pc, #36]	; (8003398 <HAL_RCC_ClockConfig+0x1d4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fe fa2a 	bl	80017d0 <HAL_InitTick>

  return HAL_OK;
 800337c:	2300      	movs	r3, #0
}
 800337e:	4618      	mov	r0, r3
 8003380:	3710      	adds	r7, #16
 8003382:	46bd      	mov	sp, r7
 8003384:	bd80      	pop	{r7, pc}
 8003386:	bf00      	nop
 8003388:	40023c00 	.word	0x40023c00
 800338c:	40023800 	.word	0x40023800
 8003390:	080062a8 	.word	0x080062a8
 8003394:	20000000 	.word	0x20000000
 8003398:	20000004 	.word	0x20000004

0800339c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800339c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80033a0:	b084      	sub	sp, #16
 80033a2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 80033a4:	2300      	movs	r3, #0
 80033a6:	607b      	str	r3, [r7, #4]
 80033a8:	2300      	movs	r3, #0
 80033aa:	60fb      	str	r3, [r7, #12]
 80033ac:	2300      	movs	r3, #0
 80033ae:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0;
 80033b0:	2300      	movs	r3, #0
 80033b2:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80033b4:	4b67      	ldr	r3, [pc, #412]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033b6:	689b      	ldr	r3, [r3, #8]
 80033b8:	f003 030c 	and.w	r3, r3, #12
 80033bc:	2b08      	cmp	r3, #8
 80033be:	d00d      	beq.n	80033dc <HAL_RCC_GetSysClockFreq+0x40>
 80033c0:	2b08      	cmp	r3, #8
 80033c2:	f200 80bd 	bhi.w	8003540 <HAL_RCC_GetSysClockFreq+0x1a4>
 80033c6:	2b00      	cmp	r3, #0
 80033c8:	d002      	beq.n	80033d0 <HAL_RCC_GetSysClockFreq+0x34>
 80033ca:	2b04      	cmp	r3, #4
 80033cc:	d003      	beq.n	80033d6 <HAL_RCC_GetSysClockFreq+0x3a>
 80033ce:	e0b7      	b.n	8003540 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80033d0:	4b61      	ldr	r3, [pc, #388]	; (8003558 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80033d2:	60bb      	str	r3, [r7, #8]
      break;
 80033d4:	e0b7      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80033d6:	4b61      	ldr	r3, [pc, #388]	; (800355c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80033d8:	60bb      	str	r3, [r7, #8]
      break;
 80033da:	e0b4      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80033dc:	4b5d      	ldr	r3, [pc, #372]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033de:	685b      	ldr	r3, [r3, #4]
 80033e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80033e4:	607b      	str	r3, [r7, #4]
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 80033e6:	4b5b      	ldr	r3, [pc, #364]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033e8:	685b      	ldr	r3, [r3, #4]
 80033ea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80033ee:	2b00      	cmp	r3, #0
 80033f0:	d04d      	beq.n	800348e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80033f2:	4b58      	ldr	r3, [pc, #352]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80033f4:	685b      	ldr	r3, [r3, #4]
 80033f6:	099b      	lsrs	r3, r3, #6
 80033f8:	461a      	mov	r2, r3
 80033fa:	f04f 0300 	mov.w	r3, #0
 80033fe:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003402:	f04f 0100 	mov.w	r1, #0
 8003406:	ea02 0800 	and.w	r8, r2, r0
 800340a:	ea03 0901 	and.w	r9, r3, r1
 800340e:	4640      	mov	r0, r8
 8003410:	4649      	mov	r1, r9
 8003412:	f04f 0200 	mov.w	r2, #0
 8003416:	f04f 0300 	mov.w	r3, #0
 800341a:	014b      	lsls	r3, r1, #5
 800341c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003420:	0142      	lsls	r2, r0, #5
 8003422:	4610      	mov	r0, r2
 8003424:	4619      	mov	r1, r3
 8003426:	ebb0 0008 	subs.w	r0, r0, r8
 800342a:	eb61 0109 	sbc.w	r1, r1, r9
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	f04f 0300 	mov.w	r3, #0
 8003436:	018b      	lsls	r3, r1, #6
 8003438:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800343c:	0182      	lsls	r2, r0, #6
 800343e:	1a12      	subs	r2, r2, r0
 8003440:	eb63 0301 	sbc.w	r3, r3, r1
 8003444:	f04f 0000 	mov.w	r0, #0
 8003448:	f04f 0100 	mov.w	r1, #0
 800344c:	00d9      	lsls	r1, r3, #3
 800344e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003452:	00d0      	lsls	r0, r2, #3
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	eb12 0208 	adds.w	r2, r2, r8
 800345c:	eb43 0309 	adc.w	r3, r3, r9
 8003460:	f04f 0000 	mov.w	r0, #0
 8003464:	f04f 0100 	mov.w	r1, #0
 8003468:	0259      	lsls	r1, r3, #9
 800346a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800346e:	0250      	lsls	r0, r2, #9
 8003470:	4602      	mov	r2, r0
 8003472:	460b      	mov	r3, r1
 8003474:	4610      	mov	r0, r2
 8003476:	4619      	mov	r1, r3
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	461a      	mov	r2, r3
 800347c:	f04f 0300 	mov.w	r3, #0
 8003480:	f7fd fb60 	bl	8000b44 <__aeabi_uldivmod>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4613      	mov	r3, r2
 800348a:	60fb      	str	r3, [r7, #12]
 800348c:	e04a      	b.n	8003524 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800348e:	4b31      	ldr	r3, [pc, #196]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	099b      	lsrs	r3, r3, #6
 8003494:	461a      	mov	r2, r3
 8003496:	f04f 0300 	mov.w	r3, #0
 800349a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800349e:	f04f 0100 	mov.w	r1, #0
 80034a2:	ea02 0400 	and.w	r4, r2, r0
 80034a6:	ea03 0501 	and.w	r5, r3, r1
 80034aa:	4620      	mov	r0, r4
 80034ac:	4629      	mov	r1, r5
 80034ae:	f04f 0200 	mov.w	r2, #0
 80034b2:	f04f 0300 	mov.w	r3, #0
 80034b6:	014b      	lsls	r3, r1, #5
 80034b8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80034bc:	0142      	lsls	r2, r0, #5
 80034be:	4610      	mov	r0, r2
 80034c0:	4619      	mov	r1, r3
 80034c2:	1b00      	subs	r0, r0, r4
 80034c4:	eb61 0105 	sbc.w	r1, r1, r5
 80034c8:	f04f 0200 	mov.w	r2, #0
 80034cc:	f04f 0300 	mov.w	r3, #0
 80034d0:	018b      	lsls	r3, r1, #6
 80034d2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80034d6:	0182      	lsls	r2, r0, #6
 80034d8:	1a12      	subs	r2, r2, r0
 80034da:	eb63 0301 	sbc.w	r3, r3, r1
 80034de:	f04f 0000 	mov.w	r0, #0
 80034e2:	f04f 0100 	mov.w	r1, #0
 80034e6:	00d9      	lsls	r1, r3, #3
 80034e8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80034ec:	00d0      	lsls	r0, r2, #3
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	1912      	adds	r2, r2, r4
 80034f4:	eb45 0303 	adc.w	r3, r5, r3
 80034f8:	f04f 0000 	mov.w	r0, #0
 80034fc:	f04f 0100 	mov.w	r1, #0
 8003500:	0299      	lsls	r1, r3, #10
 8003502:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8003506:	0290      	lsls	r0, r2, #10
 8003508:	4602      	mov	r2, r0
 800350a:	460b      	mov	r3, r1
 800350c:	4610      	mov	r0, r2
 800350e:	4619      	mov	r1, r3
 8003510:	687b      	ldr	r3, [r7, #4]
 8003512:	461a      	mov	r2, r3
 8003514:	f04f 0300 	mov.w	r3, #0
 8003518:	f7fd fb14 	bl	8000b44 <__aeabi_uldivmod>
 800351c:	4602      	mov	r2, r0
 800351e:	460b      	mov	r3, r1
 8003520:	4613      	mov	r3, r2
 8003522:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8003524:	4b0b      	ldr	r3, [pc, #44]	; (8003554 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003526:	685b      	ldr	r3, [r3, #4]
 8003528:	0c1b      	lsrs	r3, r3, #16
 800352a:	f003 0303 	and.w	r3, r3, #3
 800352e:	3301      	adds	r3, #1
 8003530:	005b      	lsls	r3, r3, #1
 8003532:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco / pllp;
 8003534:	68fa      	ldr	r2, [r7, #12]
 8003536:	683b      	ldr	r3, [r7, #0]
 8003538:	fbb2 f3f3 	udiv	r3, r2, r3
 800353c:	60bb      	str	r3, [r7, #8]
      break;
 800353e:	e002      	b.n	8003546 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8003540:	4b05      	ldr	r3, [pc, #20]	; (8003558 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8003542:	60bb      	str	r3, [r7, #8]
      break;
 8003544:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003546:	68bb      	ldr	r3, [r7, #8]
}
 8003548:	4618      	mov	r0, r3
 800354a:	3710      	adds	r7, #16
 800354c:	46bd      	mov	sp, r7
 800354e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003552:	bf00      	nop
 8003554:	40023800 	.word	0x40023800
 8003558:	00f42400 	.word	0x00f42400
 800355c:	007a1200 	.word	0x007a1200

08003560 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003560:	b480      	push	{r7}
 8003562:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003564:	4b03      	ldr	r3, [pc, #12]	; (8003574 <HAL_RCC_GetHCLKFreq+0x14>)
 8003566:	681b      	ldr	r3, [r3, #0]
}
 8003568:	4618      	mov	r0, r3
 800356a:	46bd      	mov	sp, r7
 800356c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003570:	4770      	bx	lr
 8003572:	bf00      	nop
 8003574:	20000000 	.word	0x20000000

08003578 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003578:	b580      	push	{r7, lr}
 800357a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 800357c:	f7ff fff0 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 8003580:	4602      	mov	r2, r0
 8003582:	4b05      	ldr	r3, [pc, #20]	; (8003598 <HAL_RCC_GetPCLK1Freq+0x20>)
 8003584:	689b      	ldr	r3, [r3, #8]
 8003586:	0a9b      	lsrs	r3, r3, #10
 8003588:	f003 0307 	and.w	r3, r3, #7
 800358c:	4903      	ldr	r1, [pc, #12]	; (800359c <HAL_RCC_GetPCLK1Freq+0x24>)
 800358e:	5ccb      	ldrb	r3, [r1, r3]
 8003590:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003594:	4618      	mov	r0, r3
 8003596:	bd80      	pop	{r7, pc}
 8003598:	40023800 	.word	0x40023800
 800359c:	080062b8 	.word	0x080062b8

080035a0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80035a4:	f7ff ffdc 	bl	8003560 <HAL_RCC_GetHCLKFreq>
 80035a8:	4602      	mov	r2, r0
 80035aa:	4b05      	ldr	r3, [pc, #20]	; (80035c0 <HAL_RCC_GetPCLK2Freq+0x20>)
 80035ac:	689b      	ldr	r3, [r3, #8]
 80035ae:	0b5b      	lsrs	r3, r3, #13
 80035b0:	f003 0307 	and.w	r3, r3, #7
 80035b4:	4903      	ldr	r1, [pc, #12]	; (80035c4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80035b6:	5ccb      	ldrb	r3, [r1, r3]
 80035b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80035bc:	4618      	mov	r0, r3
 80035be:	bd80      	pop	{r7, pc}
 80035c0:	40023800 	.word	0x40023800
 80035c4:	080062b8 	.word	0x080062b8

080035c8 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 80035c8:	b580      	push	{r7, lr}
 80035ca:	b088      	sub	sp, #32
 80035cc:	af00      	add	r7, sp, #0
 80035ce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 80035d0:	2300      	movs	r3, #0
 80035d2:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 80035d4:	2300      	movs	r3, #0
 80035d6:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 80035d8:	2300      	movs	r3, #0
 80035da:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 80035dc:	2300      	movs	r3, #0
 80035de:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 80035e0:	2300      	movs	r3, #0
 80035e2:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 0301 	and.w	r3, r3, #1
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d012      	beq.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 80035f0:	4b69      	ldr	r3, [pc, #420]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f2:	689b      	ldr	r3, [r3, #8]
 80035f4:	4a68      	ldr	r2, [pc, #416]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035f6:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80035fa:	6093      	str	r3, [r2, #8]
 80035fc:	4b66      	ldr	r3, [pc, #408]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80035fe:	689a      	ldr	r2, [r3, #8]
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003604:	4964      	ldr	r1, [pc, #400]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003606:	4313      	orrs	r3, r2
 8003608:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8003612:	2301      	movs	r3, #1
 8003614:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	681b      	ldr	r3, [r3, #0]
 800361a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800361e:	2b00      	cmp	r3, #0
 8003620:	d017      	beq.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8003622:	4b5d      	ldr	r3, [pc, #372]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003624:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003628:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003630:	4959      	ldr	r1, [pc, #356]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003632:	4313      	orrs	r3, r2
 8003634:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800363c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003640:	d101      	bne.n	8003646 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8003642:	2301      	movs	r3, #1
 8003644:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800364a:	2b00      	cmp	r3, #0
 800364c:	d101      	bne.n	8003652 <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 800364e:	2301      	movs	r3, #1
 8003650:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800365a:	2b00      	cmp	r3, #0
 800365c:	d017      	beq.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 800365e:	4b4e      	ldr	r3, [pc, #312]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003660:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003664:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800366c:	494a      	ldr	r1, [pc, #296]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800366e:	4313      	orrs	r3, r2
 8003670:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003678:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800367c:	d101      	bne.n	8003682 <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 800367e:	2301      	movs	r3, #1
 8003680:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003686:	2b00      	cmp	r3, #0
 8003688:	d101      	bne.n	800368e <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 800368a:	2301      	movs	r3, #1
 800368c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	681b      	ldr	r3, [r3, #0]
 8003692:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d001      	beq.n	800369e <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 800369a:	2301      	movs	r3, #1
 800369c:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0320 	and.w	r3, r3, #32
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	f000 808b 	beq.w	80037c2 <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 80036ac:	4b3a      	ldr	r3, [pc, #232]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a39      	ldr	r2, [pc, #228]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
 80036b8:	4b37      	ldr	r3, [pc, #220]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80036c0:	60bb      	str	r3, [r7, #8]
 80036c2:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036c4:	4b35      	ldr	r3, [pc, #212]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a34      	ldr	r2, [pc, #208]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036ce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80036d0:	f7fe f8c2 	bl	8001858 <HAL_GetTick>
 80036d4:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036d6:	e008      	b.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036d8:	f7fe f8be 	bl	8001858 <HAL_GetTick>
 80036dc:	4602      	mov	r2, r0
 80036de:	697b      	ldr	r3, [r7, #20]
 80036e0:	1ad3      	subs	r3, r2, r3
 80036e2:	2b64      	cmp	r3, #100	; 0x64
 80036e4:	d901      	bls.n	80036ea <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 80036e6:	2303      	movs	r3, #3
 80036e8:	e357      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 80036ea:	4b2c      	ldr	r3, [pc, #176]	; (800379c <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 80036ec:	681b      	ldr	r3, [r3, #0]
 80036ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036f2:	2b00      	cmp	r3, #0
 80036f4:	d0f0      	beq.n	80036d8 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 80036f6:	4b28      	ldr	r3, [pc, #160]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80036f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80036fa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80036fe:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8003700:	693b      	ldr	r3, [r7, #16]
 8003702:	2b00      	cmp	r3, #0
 8003704:	d035      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800370a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	429a      	cmp	r2, r3
 8003712:	d02e      	beq.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003714:	4b20      	ldr	r3, [pc, #128]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003716:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003718:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800371c:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800371e:	4b1e      	ldr	r3, [pc, #120]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003720:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003722:	4a1d      	ldr	r2, [pc, #116]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003724:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003728:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 800372a:	4b1b      	ldr	r3, [pc, #108]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800372c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800372e:	4a1a      	ldr	r2, [pc, #104]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003730:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003734:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8003736:	4a18      	ldr	r2, [pc, #96]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003738:	693b      	ldr	r3, [r7, #16]
 800373a:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 800373c:	4b16      	ldr	r3, [pc, #88]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800373e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003740:	f003 0301 	and.w	r3, r3, #1
 8003744:	2b01      	cmp	r3, #1
 8003746:	d114      	bne.n	8003772 <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003748:	f7fe f886 	bl	8001858 <HAL_GetTick>
 800374c:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800374e:	e00a      	b.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003750:	f7fe f882 	bl	8001858 <HAL_GetTick>
 8003754:	4602      	mov	r2, r0
 8003756:	697b      	ldr	r3, [r7, #20]
 8003758:	1ad3      	subs	r3, r2, r3
 800375a:	f241 3288 	movw	r2, #5000	; 0x1388
 800375e:	4293      	cmp	r3, r2
 8003760:	d901      	bls.n	8003766 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 8003762:	2303      	movs	r3, #3
 8003764:	e319      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003766:	4b0c      	ldr	r3, [pc, #48]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003768:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376a:	f003 0302 	and.w	r3, r3, #2
 800376e:	2b00      	cmp	r3, #0
 8003770:	d0ee      	beq.n	8003750 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800377a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800377e:	d111      	bne.n	80037a4 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 8003780:	4b05      	ldr	r3, [pc, #20]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003782:	689b      	ldr	r3, [r3, #8]
 8003784:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800378c:	4b04      	ldr	r3, [pc, #16]	; (80037a0 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 800378e:	400b      	ands	r3, r1
 8003790:	4901      	ldr	r1, [pc, #4]	; (8003798 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8003792:	4313      	orrs	r3, r2
 8003794:	608b      	str	r3, [r1, #8]
 8003796:	e00b      	b.n	80037b0 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 8003798:	40023800 	.word	0x40023800
 800379c:	40007000 	.word	0x40007000
 80037a0:	0ffffcff 	.word	0x0ffffcff
 80037a4:	4bb1      	ldr	r3, [pc, #708]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037a6:	689b      	ldr	r3, [r3, #8]
 80037a8:	4ab0      	ldr	r2, [pc, #704]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037aa:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80037ae:	6093      	str	r3, [r2, #8]
 80037b0:	4bae      	ldr	r3, [pc, #696]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037b2:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80037b8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80037bc:	49ab      	ldr	r1, [pc, #684]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037be:	4313      	orrs	r3, r2
 80037c0:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 0310 	and.w	r3, r3, #16
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d010      	beq.n	80037f0 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80037ce:	4ba7      	ldr	r3, [pc, #668]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037d0:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80037d4:	4aa5      	ldr	r2, [pc, #660]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037d6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037da:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 80037de:	4ba3      	ldr	r3, [pc, #652]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037e0:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80037e8:	49a0      	ldr	r1, [pc, #640]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037ea:	4313      	orrs	r3, r2
 80037ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d00a      	beq.n	8003812 <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 80037fc:	4b9b      	ldr	r3, [pc, #620]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80037fe:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003802:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800380a:	4998      	ldr	r1, [pc, #608]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800380c:	4313      	orrs	r3, r2
 800380e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800381a:	2b00      	cmp	r3, #0
 800381c:	d00a      	beq.n	8003834 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800381e:	4b93      	ldr	r3, [pc, #588]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003820:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003824:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800382c:	498f      	ldr	r1, [pc, #572]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800382e:	4313      	orrs	r3, r2
 8003830:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800383c:	2b00      	cmp	r3, #0
 800383e:	d00a      	beq.n	8003856 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8003840:	4b8a      	ldr	r3, [pc, #552]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003842:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003846:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800384e:	4987      	ldr	r1, [pc, #540]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003850:	4313      	orrs	r3, r2
 8003852:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800385e:	2b00      	cmp	r3, #0
 8003860:	d00a      	beq.n	8003878 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8003862:	4b82      	ldr	r3, [pc, #520]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003864:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003868:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003870:	497e      	ldr	r1, [pc, #504]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003872:	4313      	orrs	r3, r2
 8003874:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003880:	2b00      	cmp	r3, #0
 8003882:	d00a      	beq.n	800389a <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8003884:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800388a:	f023 0203 	bic.w	r2, r3, #3
 800388e:	687b      	ldr	r3, [r7, #4]
 8003890:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003892:	4976      	ldr	r1, [pc, #472]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003894:	4313      	orrs	r3, r2
 8003896:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	681b      	ldr	r3, [r3, #0]
 800389e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d00a      	beq.n	80038bc <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80038a6:	4b71      	ldr	r3, [pc, #452]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ac:	f023 020c 	bic.w	r2, r3, #12
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038b4:	496d      	ldr	r1, [pc, #436]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80038c4:	2b00      	cmp	r3, #0
 80038c6:	d00a      	beq.n	80038de <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 80038c8:	4b68      	ldr	r3, [pc, #416]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038ca:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038ce:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80038d6:	4965      	ldr	r1, [pc, #404]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038d8:	4313      	orrs	r3, r2
 80038da:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80038e6:	2b00      	cmp	r3, #0
 80038e8:	d00a      	beq.n	8003900 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 80038ea:	4b60      	ldr	r3, [pc, #384]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038ec:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80038f0:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80038f8:	495c      	ldr	r1, [pc, #368]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80038fa:	4313      	orrs	r3, r2
 80038fc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003908:	2b00      	cmp	r3, #0
 800390a:	d00a      	beq.n	8003922 <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 800390c:	4b57      	ldr	r3, [pc, #348]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800390e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003912:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800391a:	4954      	ldr	r1, [pc, #336]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800391c:	4313      	orrs	r3, r2
 800391e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800392e:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003930:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003934:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800393c:	494b      	ldr	r1, [pc, #300]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	681b      	ldr	r3, [r3, #0]
 8003948:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800394c:	2b00      	cmp	r3, #0
 800394e:	d00a      	beq.n	8003966 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8003950:	4b46      	ldr	r3, [pc, #280]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003952:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003956:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800395e:	4943      	ldr	r1, [pc, #268]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003960:	4313      	orrs	r3, r2
 8003962:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800396e:	2b00      	cmp	r3, #0
 8003970:	d00a      	beq.n	8003988 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8003972:	4b3e      	ldr	r3, [pc, #248]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003974:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003978:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8003980:	493a      	ldr	r1, [pc, #232]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003982:	4313      	orrs	r3, r2
 8003984:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003990:	2b00      	cmp	r3, #0
 8003992:	d00a      	beq.n	80039aa <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8003994:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003996:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800399a:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80039a2:	4932      	ldr	r1, [pc, #200]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039a4:	4313      	orrs	r3, r2
 80039a6:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d011      	beq.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80039b6:	4b2d      	ldr	r3, [pc, #180]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039bc:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039c4:	4929      	ldr	r1, [pc, #164]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039c6:	4313      	orrs	r3, r2
 80039c8:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80039d0:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80039d4:	d101      	bne.n	80039da <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 80039d6:	2301      	movs	r3, #1
 80039d8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	681b      	ldr	r3, [r3, #0]
 80039de:	f003 0308 	and.w	r3, r3, #8
 80039e2:	2b00      	cmp	r3, #0
 80039e4:	d001      	beq.n	80039ea <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 80039e6:	2301      	movs	r3, #1
 80039e8:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d00a      	beq.n	8003a0c <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80039f6:	4b1d      	ldr	r3, [pc, #116]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 80039f8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80039fc:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003a04:	4919      	ldr	r1, [pc, #100]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00b      	beq.n	8003a30 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8003a18:	4b14      	ldr	r3, [pc, #80]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a1a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003a1e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8003a28:	4910      	ldr	r1, [pc, #64]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a2a:	4313      	orrs	r3, r2
 8003a2c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8003a30:	69fb      	ldr	r3, [r7, #28]
 8003a32:	2b01      	cmp	r3, #1
 8003a34:	d006      	beq.n	8003a44 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	f000 80d9 	beq.w	8003bf6 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8003a44:	4b09      	ldr	r3, [pc, #36]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a46:	681b      	ldr	r3, [r3, #0]
 8003a48:	4a08      	ldr	r2, [pc, #32]	; (8003a6c <HAL_RCCEx_PeriphCLKConfig+0x4a4>)
 8003a4a:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8003a4e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003a50:	f7fd ff02 	bl	8001858 <HAL_GetTick>
 8003a54:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a56:	e00b      	b.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003a58:	f7fd fefe 	bl	8001858 <HAL_GetTick>
 8003a5c:	4602      	mov	r2, r0
 8003a5e:	697b      	ldr	r3, [r7, #20]
 8003a60:	1ad3      	subs	r3, r2, r3
 8003a62:	2b64      	cmp	r3, #100	; 0x64
 8003a64:	d904      	bls.n	8003a70 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003a66:	2303      	movs	r3, #3
 8003a68:	e197      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003a6a:	bf00      	nop
 8003a6c:	40023800 	.word	0x40023800
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8003a70:	4b6c      	ldr	r3, [pc, #432]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a72:	681b      	ldr	r3, [r3, #0]
 8003a74:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003a78:	2b00      	cmp	r3, #0
 8003a7a:	d1ed      	bne.n	8003a58 <HAL_RCCEx_PeriphCLKConfig+0x490>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f003 0301 	and.w	r3, r3, #1
 8003a84:	2b00      	cmp	r3, #0
 8003a86:	d021      	beq.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x504>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003a8c:	2b00      	cmp	r3, #0
 8003a8e:	d11d      	bne.n	8003acc <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003a90:	4b64      	ldr	r3, [pc, #400]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003a92:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003a96:	0c1b      	lsrs	r3, r3, #16
 8003a98:	f003 0303 	and.w	r3, r3, #3
 8003a9c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003a9e:	4b61      	ldr	r3, [pc, #388]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003aa0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003aa4:	0e1b      	lsrs	r3, r3, #24
 8003aa6:	f003 030f 	and.w	r3, r3, #15
 8003aaa:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8003aac:	687b      	ldr	r3, [r7, #4]
 8003aae:	685b      	ldr	r3, [r3, #4]
 8003ab0:	019a      	lsls	r2, r3, #6
 8003ab2:	693b      	ldr	r3, [r7, #16]
 8003ab4:	041b      	lsls	r3, r3, #16
 8003ab6:	431a      	orrs	r2, r3
 8003ab8:	68fb      	ldr	r3, [r7, #12]
 8003aba:	061b      	lsls	r3, r3, #24
 8003abc:	431a      	orrs	r2, r3
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	689b      	ldr	r3, [r3, #8]
 8003ac2:	071b      	lsls	r3, r3, #28
 8003ac4:	4957      	ldr	r1, [pc, #348]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003ac6:	4313      	orrs	r3, r2
 8003ac8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003acc:	687b      	ldr	r3, [r7, #4]
 8003ace:	681b      	ldr	r3, [r3, #0]
 8003ad0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d004      	beq.n	8003ae2 <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003adc:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8003ae0:	d00a      	beq.n	8003af8 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d02e      	beq.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003af2:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8003af6:	d129      	bne.n	8003b4c <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8003af8:	4b4a      	ldr	r3, [pc, #296]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003afa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003afe:	0c1b      	lsrs	r3, r3, #16
 8003b00:	f003 0303 	and.w	r3, r3, #3
 8003b04:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b06:	4b47      	ldr	r3, [pc, #284]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b08:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b0c:	0f1b      	lsrs	r3, r3, #28
 8003b0e:	f003 0307 	and.w	r3, r3, #7
 8003b12:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	685b      	ldr	r3, [r3, #4]
 8003b18:	019a      	lsls	r2, r3, #6
 8003b1a:	693b      	ldr	r3, [r7, #16]
 8003b1c:	041b      	lsls	r3, r3, #16
 8003b1e:	431a      	orrs	r2, r3
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	68db      	ldr	r3, [r3, #12]
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	431a      	orrs	r2, r3
 8003b28:	68fb      	ldr	r3, [r7, #12]
 8003b2a:	071b      	lsls	r3, r3, #28
 8003b2c:	493d      	ldr	r1, [pc, #244]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b2e:	4313      	orrs	r3, r2
 8003b30:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8003b34:	4b3b      	ldr	r3, [pc, #236]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b36:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003b3a:	f023 021f 	bic.w	r2, r3, #31
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b42:	3b01      	subs	r3, #1
 8003b44:	4937      	ldr	r1, [pc, #220]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b46:	4313      	orrs	r3, r2
 8003b48:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b54:	2b00      	cmp	r3, #0
 8003b56:	d01d      	beq.n	8003b94 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8003b58:	4b32      	ldr	r3, [pc, #200]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b5a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b5e:	0e1b      	lsrs	r3, r3, #24
 8003b60:	f003 030f 	and.w	r3, r3, #15
 8003b64:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8003b66:	4b2f      	ldr	r3, [pc, #188]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b68:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8003b6c:	0f1b      	lsrs	r3, r3, #28
 8003b6e:	f003 0307 	and.w	r3, r3, #7
 8003b72:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	685b      	ldr	r3, [r3, #4]
 8003b78:	019a      	lsls	r2, r3, #6
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	691b      	ldr	r3, [r3, #16]
 8003b7e:	041b      	lsls	r3, r3, #16
 8003b80:	431a      	orrs	r2, r3
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	061b      	lsls	r3, r3, #24
 8003b86:	431a      	orrs	r2, r3
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	071b      	lsls	r3, r3, #28
 8003b8c:	4925      	ldr	r1, [pc, #148]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003b8e:	4313      	orrs	r3, r2
 8003b90:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003b9c:	2b00      	cmp	r3, #0
 8003b9e:	d011      	beq.n	8003bc4 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	685b      	ldr	r3, [r3, #4]
 8003ba4:	019a      	lsls	r2, r3, #6
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	041b      	lsls	r3, r3, #16
 8003bac:	431a      	orrs	r2, r3
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	68db      	ldr	r3, [r3, #12]
 8003bb2:	061b      	lsls	r3, r3, #24
 8003bb4:	431a      	orrs	r2, r3
 8003bb6:	687b      	ldr	r3, [r7, #4]
 8003bb8:	689b      	ldr	r3, [r3, #8]
 8003bba:	071b      	lsls	r3, r3, #28
 8003bbc:	4919      	ldr	r1, [pc, #100]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bbe:	4313      	orrs	r3, r2
 8003bc0:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8003bc4:	4b17      	ldr	r3, [pc, #92]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a16      	ldr	r2, [pc, #88]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bca:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8003bce:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bd0:	f7fd fe42 	bl	8001858 <HAL_GetTick>
 8003bd4:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bd6:	e008      	b.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8003bd8:	f7fd fe3e 	bl	8001858 <HAL_GetTick>
 8003bdc:	4602      	mov	r2, r0
 8003bde:	697b      	ldr	r3, [r7, #20]
 8003be0:	1ad3      	subs	r3, r2, r3
 8003be2:	2b64      	cmp	r3, #100	; 0x64
 8003be4:	d901      	bls.n	8003bea <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003be6:	2303      	movs	r3, #3
 8003be8:	e0d7      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8003bea:	4b0e      	ldr	r3, [pc, #56]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003bec:	681b      	ldr	r3, [r3, #0]
 8003bee:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d0f0      	beq.n	8003bd8 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8003bf6:	69bb      	ldr	r3, [r7, #24]
 8003bf8:	2b01      	cmp	r3, #1
 8003bfa:	f040 80cd 	bne.w	8003d98 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8003bfe:	4b09      	ldr	r3, [pc, #36]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c00:	681b      	ldr	r3, [r3, #0]
 8003c02:	4a08      	ldr	r2, [pc, #32]	; (8003c24 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8003c04:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003c08:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003c0a:	f7fd fe25 	bl	8001858 <HAL_GetTick>
 8003c0e:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c10:	e00a      	b.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003c12:	f7fd fe21 	bl	8001858 <HAL_GetTick>
 8003c16:	4602      	mov	r2, r0
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	1ad3      	subs	r3, r2, r3
 8003c1c:	2b64      	cmp	r3, #100	; 0x64
 8003c1e:	d903      	bls.n	8003c28 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003c20:	2303      	movs	r3, #3
 8003c22:	e0ba      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8003c24:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8003c28:	4b5e      	ldr	r3, [pc, #376]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c2a:	681b      	ldr	r3, [r3, #0]
 8003c2c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003c30:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003c34:	d0ed      	beq.n	8003c12 <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d003      	beq.n	8003c4a <HAL_RCCEx_PeriphCLKConfig+0x682>
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003c46:	2b00      	cmp	r3, #0
 8003c48:	d009      	beq.n	8003c5e <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d02e      	beq.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d12a      	bne.n	8003cb4 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003c5e:	4b51      	ldr	r3, [pc, #324]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c60:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c64:	0c1b      	lsrs	r3, r3, #16
 8003c66:	f003 0303 	and.w	r3, r3, #3
 8003c6a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003c6c:	4b4d      	ldr	r3, [pc, #308]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c6e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003c72:	0f1b      	lsrs	r3, r3, #28
 8003c74:	f003 0307 	and.w	r3, r3, #7
 8003c78:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	695b      	ldr	r3, [r3, #20]
 8003c7e:	019a      	lsls	r2, r3, #6
 8003c80:	693b      	ldr	r3, [r7, #16]
 8003c82:	041b      	lsls	r3, r3, #16
 8003c84:	431a      	orrs	r2, r3
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	061b      	lsls	r3, r3, #24
 8003c8c:	431a      	orrs	r2, r3
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	071b      	lsls	r3, r3, #28
 8003c92:	4944      	ldr	r1, [pc, #272]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c94:	4313      	orrs	r3, r2
 8003c96:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8003c9a:	4b42      	ldr	r3, [pc, #264]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003c9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003ca0:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003ca8:	3b01      	subs	r3, #1
 8003caa:	021b      	lsls	r3, r3, #8
 8003cac:	493d      	ldr	r1, [pc, #244]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d022      	beq.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8003cc4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8003cc8:	d11d      	bne.n	8003d06 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003cca:	4b36      	ldr	r3, [pc, #216]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003ccc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cd0:	0e1b      	lsrs	r3, r3, #24
 8003cd2:	f003 030f 	and.w	r3, r3, #15
 8003cd6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8003cd8:	4b32      	ldr	r3, [pc, #200]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003cda:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003cde:	0f1b      	lsrs	r3, r3, #28
 8003ce0:	f003 0307 	and.w	r3, r3, #7
 8003ce4:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	695b      	ldr	r3, [r3, #20]
 8003cea:	019a      	lsls	r2, r3, #6
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	6a1b      	ldr	r3, [r3, #32]
 8003cf0:	041b      	lsls	r3, r3, #16
 8003cf2:	431a      	orrs	r2, r3
 8003cf4:	693b      	ldr	r3, [r7, #16]
 8003cf6:	061b      	lsls	r3, r3, #24
 8003cf8:	431a      	orrs	r2, r3
 8003cfa:	68fb      	ldr	r3, [r7, #12]
 8003cfc:	071b      	lsls	r3, r3, #28
 8003cfe:	4929      	ldr	r1, [pc, #164]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d00:	4313      	orrs	r3, r2
 8003d02:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	f003 0308 	and.w	r3, r3, #8
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d028      	beq.n	8003d64 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8003d12:	4b24      	ldr	r3, [pc, #144]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d14:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d18:	0e1b      	lsrs	r3, r3, #24
 8003d1a:	f003 030f 	and.w	r3, r3, #15
 8003d1e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8003d20:	4b20      	ldr	r3, [pc, #128]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d22:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003d26:	0c1b      	lsrs	r3, r3, #16
 8003d28:	f003 0303 	and.w	r3, r3, #3
 8003d2c:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	695b      	ldr	r3, [r3, #20]
 8003d32:	019a      	lsls	r2, r3, #6
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	041b      	lsls	r3, r3, #16
 8003d38:	431a      	orrs	r2, r3
 8003d3a:	693b      	ldr	r3, [r7, #16]
 8003d3c:	061b      	lsls	r3, r3, #24
 8003d3e:	431a      	orrs	r2, r3
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	69db      	ldr	r3, [r3, #28]
 8003d44:	071b      	lsls	r3, r3, #28
 8003d46:	4917      	ldr	r1, [pc, #92]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d48:	4313      	orrs	r3, r2
 8003d4a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8003d4e:	4b15      	ldr	r3, [pc, #84]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d50:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8003d54:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d5c:	4911      	ldr	r1, [pc, #68]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d5e:	4313      	orrs	r3, r2
 8003d60:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8003d64:	4b0f      	ldr	r3, [pc, #60]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	4a0e      	ldr	r2, [pc, #56]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d6a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003d6e:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003d70:	f7fd fd72 	bl	8001858 <HAL_GetTick>
 8003d74:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d76:	e008      	b.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8003d78:	f7fd fd6e 	bl	8001858 <HAL_GetTick>
 8003d7c:	4602      	mov	r2, r0
 8003d7e:	697b      	ldr	r3, [r7, #20]
 8003d80:	1ad3      	subs	r3, r2, r3
 8003d82:	2b64      	cmp	r3, #100	; 0x64
 8003d84:	d901      	bls.n	8003d8a <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8003d86:	2303      	movs	r3, #3
 8003d88:	e007      	b.n	8003d9a <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8003d8a:	4b06      	ldr	r3, [pc, #24]	; (8003da4 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8003d92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8003d96:	d1ef      	bne.n	8003d78 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8003d98:	2300      	movs	r3, #0
}
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	3720      	adds	r7, #32
 8003d9e:	46bd      	mov	sp, r7
 8003da0:	bd80      	pop	{r7, pc}
 8003da2:	bf00      	nop
 8003da4:	40023800 	.word	0x40023800

08003da8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d101      	bne.n	8003dba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003db6:	2301      	movs	r3, #1
 8003db8:	e049      	b.n	8003e4e <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dc0:	b2db      	uxtb	r3, r3
 8003dc2:	2b00      	cmp	r3, #0
 8003dc4:	d106      	bne.n	8003dd4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2200      	movs	r2, #0
 8003dca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003dce:	6878      	ldr	r0, [r7, #4]
 8003dd0:	f7fd fbc2 	bl	8001558 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003dd4:	687b      	ldr	r3, [r7, #4]
 8003dd6:	2202      	movs	r2, #2
 8003dd8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	681a      	ldr	r2, [r3, #0]
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	3304      	adds	r3, #4
 8003de4:	4619      	mov	r1, r3
 8003de6:	4610      	mov	r0, r2
 8003de8:	f000 f96c 	bl	80040c4 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	2201      	movs	r2, #1
 8003df0:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	2201      	movs	r2, #1
 8003df8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	2201      	movs	r2, #1
 8003e00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	2201      	movs	r2, #1
 8003e08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e0c:	687b      	ldr	r3, [r7, #4]
 8003e0e:	2201      	movs	r2, #1
 8003e10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	2201      	movs	r2, #1
 8003e18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	2201      	movs	r2, #1
 8003e20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2201      	movs	r2, #1
 8003e28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	2201      	movs	r2, #1
 8003e30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2201      	movs	r2, #1
 8003e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 8003e3c:	687b      	ldr	r3, [r7, #4]
 8003e3e:	2201      	movs	r2, #1
 8003e40:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2201      	movs	r2, #1
 8003e48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003e4c:	2300      	movs	r3, #0
}
 8003e4e:	4618      	mov	r0, r3
 8003e50:	3708      	adds	r7, #8
 8003e52:	46bd      	mov	sp, r7
 8003e54:	bd80      	pop	{r7, pc}
	...

08003e58 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003e58:	b480      	push	{r7}
 8003e5a:	b085      	sub	sp, #20
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e66:	b2db      	uxtb	r3, r3
 8003e68:	2b01      	cmp	r3, #1
 8003e6a:	d001      	beq.n	8003e70 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003e6c:	2301      	movs	r3, #1
 8003e6e:	e04c      	b.n	8003f0a <HAL_TIM_Base_Start+0xb2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a26      	ldr	r2, [pc, #152]	; (8003f18 <HAL_TIM_Base_Start+0xc0>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d022      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x70>
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003e8a:	d01d      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x70>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	681b      	ldr	r3, [r3, #0]
 8003e90:	4a22      	ldr	r2, [pc, #136]	; (8003f1c <HAL_TIM_Base_Start+0xc4>)
 8003e92:	4293      	cmp	r3, r2
 8003e94:	d018      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x70>
 8003e96:	687b      	ldr	r3, [r7, #4]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	4a21      	ldr	r2, [pc, #132]	; (8003f20 <HAL_TIM_Base_Start+0xc8>)
 8003e9c:	4293      	cmp	r3, r2
 8003e9e:	d013      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x70>
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1f      	ldr	r2, [pc, #124]	; (8003f24 <HAL_TIM_Base_Start+0xcc>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d00e      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x70>
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	4a1e      	ldr	r2, [pc, #120]	; (8003f28 <HAL_TIM_Base_Start+0xd0>)
 8003eb0:	4293      	cmp	r3, r2
 8003eb2:	d009      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x70>
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a1c      	ldr	r2, [pc, #112]	; (8003f2c <HAL_TIM_Base_Start+0xd4>)
 8003eba:	4293      	cmp	r3, r2
 8003ebc:	d004      	beq.n	8003ec8 <HAL_TIM_Base_Start+0x70>
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	4a1b      	ldr	r2, [pc, #108]	; (8003f30 <HAL_TIM_Base_Start+0xd8>)
 8003ec4:	4293      	cmp	r3, r2
 8003ec6:	d115      	bne.n	8003ef4 <HAL_TIM_Base_Start+0x9c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	689a      	ldr	r2, [r3, #8]
 8003ece:	4b19      	ldr	r3, [pc, #100]	; (8003f34 <HAL_TIM_Base_Start+0xdc>)
 8003ed0:	4013      	ands	r3, r2
 8003ed2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	2b06      	cmp	r3, #6
 8003ed8:	d015      	beq.n	8003f06 <HAL_TIM_Base_Start+0xae>
 8003eda:	68fb      	ldr	r3, [r7, #12]
 8003edc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003ee0:	d011      	beq.n	8003f06 <HAL_TIM_Base_Start+0xae>
    {
      __HAL_TIM_ENABLE(htim);
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	687b      	ldr	r3, [r7, #4]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f042 0201 	orr.w	r2, r2, #1
 8003ef0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ef2:	e008      	b.n	8003f06 <HAL_TIM_Base_Start+0xae>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
 8003f04:	e000      	b.n	8003f08 <HAL_TIM_Base_Start+0xb0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f06:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
 8003f16:	bf00      	nop
 8003f18:	40010000 	.word	0x40010000
 8003f1c:	40000400 	.word	0x40000400
 8003f20:	40000800 	.word	0x40000800
 8003f24:	40000c00 	.word	0x40000c00
 8003f28:	40010400 	.word	0x40010400
 8003f2c:	40014000 	.word	0x40014000
 8003f30:	40001800 	.word	0x40001800
 8003f34:	00010007 	.word	0x00010007

08003f38 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f38:	b580      	push	{r7, lr}
 8003f3a:	b084      	sub	sp, #16
 8003f3c:	af00      	add	r7, sp, #0
 8003f3e:	6078      	str	r0, [r7, #4]
 8003f40:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003f48:	2b01      	cmp	r3, #1
 8003f4a:	d101      	bne.n	8003f50 <HAL_TIM_ConfigClockSource+0x18>
 8003f4c:	2302      	movs	r3, #2
 8003f4e:	e0b3      	b.n	80040b8 <HAL_TIM_ConfigClockSource+0x180>
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	2201      	movs	r2, #1
 8003f54:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2202      	movs	r2, #2
 8003f5c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	689b      	ldr	r3, [r3, #8]
 8003f66:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003f68:	68fa      	ldr	r2, [r7, #12]
 8003f6a:	4b55      	ldr	r3, [pc, #340]	; (80040c0 <HAL_TIM_ConfigClockSource+0x188>)
 8003f6c:	4013      	ands	r3, r2
 8003f6e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8003f76:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	68fa      	ldr	r2, [r7, #12]
 8003f7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f88:	d03e      	beq.n	8004008 <HAL_TIM_ConfigClockSource+0xd0>
 8003f8a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003f8e:	f200 8087 	bhi.w	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003f92:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f96:	f000 8085 	beq.w	80040a4 <HAL_TIM_ConfigClockSource+0x16c>
 8003f9a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003f9e:	d87f      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fa0:	2b70      	cmp	r3, #112	; 0x70
 8003fa2:	d01a      	beq.n	8003fda <HAL_TIM_ConfigClockSource+0xa2>
 8003fa4:	2b70      	cmp	r3, #112	; 0x70
 8003fa6:	d87b      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fa8:	2b60      	cmp	r3, #96	; 0x60
 8003faa:	d050      	beq.n	800404e <HAL_TIM_ConfigClockSource+0x116>
 8003fac:	2b60      	cmp	r3, #96	; 0x60
 8003fae:	d877      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fb0:	2b50      	cmp	r3, #80	; 0x50
 8003fb2:	d03c      	beq.n	800402e <HAL_TIM_ConfigClockSource+0xf6>
 8003fb4:	2b50      	cmp	r3, #80	; 0x50
 8003fb6:	d873      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fb8:	2b40      	cmp	r3, #64	; 0x40
 8003fba:	d058      	beq.n	800406e <HAL_TIM_ConfigClockSource+0x136>
 8003fbc:	2b40      	cmp	r3, #64	; 0x40
 8003fbe:	d86f      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fc0:	2b30      	cmp	r3, #48	; 0x30
 8003fc2:	d064      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x156>
 8003fc4:	2b30      	cmp	r3, #48	; 0x30
 8003fc6:	d86b      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fc8:	2b20      	cmp	r3, #32
 8003fca:	d060      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x156>
 8003fcc:	2b20      	cmp	r3, #32
 8003fce:	d867      	bhi.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d05c      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x156>
 8003fd4:	2b10      	cmp	r3, #16
 8003fd6:	d05a      	beq.n	800408e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8003fd8:	e062      	b.n	80040a0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	6818      	ldr	r0, [r3, #0]
 8003fde:	683b      	ldr	r3, [r7, #0]
 8003fe0:	6899      	ldr	r1, [r3, #8]
 8003fe2:	683b      	ldr	r3, [r7, #0]
 8003fe4:	685a      	ldr	r2, [r3, #4]
 8003fe6:	683b      	ldr	r3, [r7, #0]
 8003fe8:	68db      	ldr	r3, [r3, #12]
 8003fea:	f000 f985 	bl	80042f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	689b      	ldr	r3, [r3, #8]
 8003ff4:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8003ffc:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8003ffe:	687b      	ldr	r3, [r7, #4]
 8004000:	681b      	ldr	r3, [r3, #0]
 8004002:	68fa      	ldr	r2, [r7, #12]
 8004004:	609a      	str	r2, [r3, #8]
      break;
 8004006:	e04e      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	6818      	ldr	r0, [r3, #0]
 800400c:	683b      	ldr	r3, [r7, #0]
 800400e:	6899      	ldr	r1, [r3, #8]
 8004010:	683b      	ldr	r3, [r7, #0]
 8004012:	685a      	ldr	r2, [r3, #4]
 8004014:	683b      	ldr	r3, [r7, #0]
 8004016:	68db      	ldr	r3, [r3, #12]
 8004018:	f000 f96e 	bl	80042f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	689a      	ldr	r2, [r3, #8]
 8004022:	687b      	ldr	r3, [r7, #4]
 8004024:	681b      	ldr	r3, [r3, #0]
 8004026:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800402a:	609a      	str	r2, [r3, #8]
      break;
 800402c:	e03b      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6818      	ldr	r0, [r3, #0]
 8004032:	683b      	ldr	r3, [r7, #0]
 8004034:	6859      	ldr	r1, [r3, #4]
 8004036:	683b      	ldr	r3, [r7, #0]
 8004038:	68db      	ldr	r3, [r3, #12]
 800403a:	461a      	mov	r2, r3
 800403c:	f000 f8e2 	bl	8004204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	2150      	movs	r1, #80	; 0x50
 8004046:	4618      	mov	r0, r3
 8004048:	f000 f93b 	bl	80042c2 <TIM_ITRx_SetConfig>
      break;
 800404c:	e02b      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	6818      	ldr	r0, [r3, #0]
 8004052:	683b      	ldr	r3, [r7, #0]
 8004054:	6859      	ldr	r1, [r3, #4]
 8004056:	683b      	ldr	r3, [r7, #0]
 8004058:	68db      	ldr	r3, [r3, #12]
 800405a:	461a      	mov	r2, r3
 800405c:	f000 f901 	bl	8004262 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	2160      	movs	r1, #96	; 0x60
 8004066:	4618      	mov	r0, r3
 8004068:	f000 f92b 	bl	80042c2 <TIM_ITRx_SetConfig>
      break;
 800406c:	e01b      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	6818      	ldr	r0, [r3, #0]
 8004072:	683b      	ldr	r3, [r7, #0]
 8004074:	6859      	ldr	r1, [r3, #4]
 8004076:	683b      	ldr	r3, [r7, #0]
 8004078:	68db      	ldr	r3, [r3, #12]
 800407a:	461a      	mov	r2, r3
 800407c:	f000 f8c2 	bl	8004204 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	2140      	movs	r1, #64	; 0x40
 8004086:	4618      	mov	r0, r3
 8004088:	f000 f91b 	bl	80042c2 <TIM_ITRx_SetConfig>
      break;
 800408c:	e00b      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	681a      	ldr	r2, [r3, #0]
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	4619      	mov	r1, r3
 8004098:	4610      	mov	r0, r2
 800409a:	f000 f912 	bl	80042c2 <TIM_ITRx_SetConfig>
        break;
 800409e:	e002      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040a0:	bf00      	nop
 80040a2:	e000      	b.n	80040a6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80040a4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	2201      	movs	r2, #1
 80040aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	2200      	movs	r2, #0
 80040b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80040b6:	2300      	movs	r3, #0
}
 80040b8:	4618      	mov	r0, r3
 80040ba:	3710      	adds	r7, #16
 80040bc:	46bd      	mov	sp, r7
 80040be:	bd80      	pop	{r7, pc}
 80040c0:	fffeff88 	.word	0xfffeff88

080040c4 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80040c4:	b480      	push	{r7}
 80040c6:	b085      	sub	sp, #20
 80040c8:	af00      	add	r7, sp, #0
 80040ca:	6078      	str	r0, [r7, #4]
 80040cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	4a40      	ldr	r2, [pc, #256]	; (80041d8 <TIM_Base_SetConfig+0x114>)
 80040d8:	4293      	cmp	r3, r2
 80040da:	d013      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80040e2:	d00f      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	4a3d      	ldr	r2, [pc, #244]	; (80041dc <TIM_Base_SetConfig+0x118>)
 80040e8:	4293      	cmp	r3, r2
 80040ea:	d00b      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	4a3c      	ldr	r2, [pc, #240]	; (80041e0 <TIM_Base_SetConfig+0x11c>)
 80040f0:	4293      	cmp	r3, r2
 80040f2:	d007      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	4a3b      	ldr	r2, [pc, #236]	; (80041e4 <TIM_Base_SetConfig+0x120>)
 80040f8:	4293      	cmp	r3, r2
 80040fa:	d003      	beq.n	8004104 <TIM_Base_SetConfig+0x40>
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	4a3a      	ldr	r2, [pc, #232]	; (80041e8 <TIM_Base_SetConfig+0x124>)
 8004100:	4293      	cmp	r3, r2
 8004102:	d108      	bne.n	8004116 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800410a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	685b      	ldr	r3, [r3, #4]
 8004110:	68fa      	ldr	r2, [r7, #12]
 8004112:	4313      	orrs	r3, r2
 8004114:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	4a2f      	ldr	r2, [pc, #188]	; (80041d8 <TIM_Base_SetConfig+0x114>)
 800411a:	4293      	cmp	r3, r2
 800411c:	d02b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004124:	d027      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	4a2c      	ldr	r2, [pc, #176]	; (80041dc <TIM_Base_SetConfig+0x118>)
 800412a:	4293      	cmp	r3, r2
 800412c:	d023      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	4a2b      	ldr	r2, [pc, #172]	; (80041e0 <TIM_Base_SetConfig+0x11c>)
 8004132:	4293      	cmp	r3, r2
 8004134:	d01f      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	4a2a      	ldr	r2, [pc, #168]	; (80041e4 <TIM_Base_SetConfig+0x120>)
 800413a:	4293      	cmp	r3, r2
 800413c:	d01b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	4a29      	ldr	r2, [pc, #164]	; (80041e8 <TIM_Base_SetConfig+0x124>)
 8004142:	4293      	cmp	r3, r2
 8004144:	d017      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	4a28      	ldr	r2, [pc, #160]	; (80041ec <TIM_Base_SetConfig+0x128>)
 800414a:	4293      	cmp	r3, r2
 800414c:	d013      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800414e:	687b      	ldr	r3, [r7, #4]
 8004150:	4a27      	ldr	r2, [pc, #156]	; (80041f0 <TIM_Base_SetConfig+0x12c>)
 8004152:	4293      	cmp	r3, r2
 8004154:	d00f      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a26      	ldr	r2, [pc, #152]	; (80041f4 <TIM_Base_SetConfig+0x130>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d00b      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	4a25      	ldr	r2, [pc, #148]	; (80041f8 <TIM_Base_SetConfig+0x134>)
 8004162:	4293      	cmp	r3, r2
 8004164:	d007      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	4a24      	ldr	r2, [pc, #144]	; (80041fc <TIM_Base_SetConfig+0x138>)
 800416a:	4293      	cmp	r3, r2
 800416c:	d003      	beq.n	8004176 <TIM_Base_SetConfig+0xb2>
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	4a23      	ldr	r2, [pc, #140]	; (8004200 <TIM_Base_SetConfig+0x13c>)
 8004172:	4293      	cmp	r3, r2
 8004174:	d108      	bne.n	8004188 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800417c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800417e:	683b      	ldr	r3, [r7, #0]
 8004180:	68db      	ldr	r3, [r3, #12]
 8004182:	68fa      	ldr	r2, [r7, #12]
 8004184:	4313      	orrs	r3, r2
 8004186:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	695b      	ldr	r3, [r3, #20]
 8004192:	4313      	orrs	r3, r2
 8004194:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	68fa      	ldr	r2, [r7, #12]
 800419a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800419c:	683b      	ldr	r3, [r7, #0]
 800419e:	689a      	ldr	r2, [r3, #8]
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80041a4:	683b      	ldr	r3, [r7, #0]
 80041a6:	681a      	ldr	r2, [r3, #0]
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	4a0a      	ldr	r2, [pc, #40]	; (80041d8 <TIM_Base_SetConfig+0x114>)
 80041b0:	4293      	cmp	r3, r2
 80041b2:	d003      	beq.n	80041bc <TIM_Base_SetConfig+0xf8>
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	4a0c      	ldr	r2, [pc, #48]	; (80041e8 <TIM_Base_SetConfig+0x124>)
 80041b8:	4293      	cmp	r3, r2
 80041ba:	d103      	bne.n	80041c4 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	691a      	ldr	r2, [r3, #16]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	2201      	movs	r2, #1
 80041c8:	615a      	str	r2, [r3, #20]
}
 80041ca:	bf00      	nop
 80041cc:	3714      	adds	r7, #20
 80041ce:	46bd      	mov	sp, r7
 80041d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d4:	4770      	bx	lr
 80041d6:	bf00      	nop
 80041d8:	40010000 	.word	0x40010000
 80041dc:	40000400 	.word	0x40000400
 80041e0:	40000800 	.word	0x40000800
 80041e4:	40000c00 	.word	0x40000c00
 80041e8:	40010400 	.word	0x40010400
 80041ec:	40014000 	.word	0x40014000
 80041f0:	40014400 	.word	0x40014400
 80041f4:	40014800 	.word	0x40014800
 80041f8:	40001800 	.word	0x40001800
 80041fc:	40001c00 	.word	0x40001c00
 8004200:	40002000 	.word	0x40002000

08004204 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004204:	b480      	push	{r7}
 8004206:	b087      	sub	sp, #28
 8004208:	af00      	add	r7, sp, #0
 800420a:	60f8      	str	r0, [r7, #12]
 800420c:	60b9      	str	r1, [r7, #8]
 800420e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6a1b      	ldr	r3, [r3, #32]
 8004214:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	6a1b      	ldr	r3, [r3, #32]
 800421a:	f023 0201 	bic.w	r2, r3, #1
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	699b      	ldr	r3, [r3, #24]
 8004226:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004228:	693b      	ldr	r3, [r7, #16]
 800422a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800422e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	011b      	lsls	r3, r3, #4
 8004234:	693a      	ldr	r2, [r7, #16]
 8004236:	4313      	orrs	r3, r2
 8004238:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800423a:	697b      	ldr	r3, [r7, #20]
 800423c:	f023 030a 	bic.w	r3, r3, #10
 8004240:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	68bb      	ldr	r3, [r7, #8]
 8004246:	4313      	orrs	r3, r2
 8004248:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	693a      	ldr	r2, [r7, #16]
 800424e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	697a      	ldr	r2, [r7, #20]
 8004254:	621a      	str	r2, [r3, #32]
}
 8004256:	bf00      	nop
 8004258:	371c      	adds	r7, #28
 800425a:	46bd      	mov	sp, r7
 800425c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004260:	4770      	bx	lr

08004262 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004262:	b480      	push	{r7}
 8004264:	b087      	sub	sp, #28
 8004266:	af00      	add	r7, sp, #0
 8004268:	60f8      	str	r0, [r7, #12]
 800426a:	60b9      	str	r1, [r7, #8]
 800426c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	6a1b      	ldr	r3, [r3, #32]
 8004272:	f023 0210 	bic.w	r2, r3, #16
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	699b      	ldr	r3, [r3, #24]
 800427e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	6a1b      	ldr	r3, [r3, #32]
 8004284:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004286:	697b      	ldr	r3, [r7, #20]
 8004288:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800428c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800428e:	687b      	ldr	r3, [r7, #4]
 8004290:	031b      	lsls	r3, r3, #12
 8004292:	697a      	ldr	r2, [r7, #20]
 8004294:	4313      	orrs	r3, r2
 8004296:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004298:	693b      	ldr	r3, [r7, #16]
 800429a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800429e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80042a0:	68bb      	ldr	r3, [r7, #8]
 80042a2:	011b      	lsls	r3, r3, #4
 80042a4:	693a      	ldr	r2, [r7, #16]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	697a      	ldr	r2, [r7, #20]
 80042ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	693a      	ldr	r2, [r7, #16]
 80042b4:	621a      	str	r2, [r3, #32]
}
 80042b6:	bf00      	nop
 80042b8:	371c      	adds	r7, #28
 80042ba:	46bd      	mov	sp, r7
 80042bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042c0:	4770      	bx	lr

080042c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80042c2:	b480      	push	{r7}
 80042c4:	b085      	sub	sp, #20
 80042c6:	af00      	add	r7, sp, #0
 80042c8:	6078      	str	r0, [r7, #4]
 80042ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	689b      	ldr	r3, [r3, #8]
 80042d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80042d2:	68fb      	ldr	r3, [r7, #12]
 80042d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80042d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80042da:	683a      	ldr	r2, [r7, #0]
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	4313      	orrs	r3, r2
 80042e0:	f043 0307 	orr.w	r3, r3, #7
 80042e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80042e6:	687b      	ldr	r3, [r7, #4]
 80042e8:	68fa      	ldr	r2, [r7, #12]
 80042ea:	609a      	str	r2, [r3, #8]
}
 80042ec:	bf00      	nop
 80042ee:	3714      	adds	r7, #20
 80042f0:	46bd      	mov	sp, r7
 80042f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042f6:	4770      	bx	lr

080042f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80042f8:	b480      	push	{r7}
 80042fa:	b087      	sub	sp, #28
 80042fc:	af00      	add	r7, sp, #0
 80042fe:	60f8      	str	r0, [r7, #12]
 8004300:	60b9      	str	r1, [r7, #8]
 8004302:	607a      	str	r2, [r7, #4]
 8004304:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004306:	68fb      	ldr	r3, [r7, #12]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430c:	697b      	ldr	r3, [r7, #20]
 800430e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004312:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004314:	683b      	ldr	r3, [r7, #0]
 8004316:	021a      	lsls	r2, r3, #8
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	431a      	orrs	r2, r3
 800431c:	68bb      	ldr	r3, [r7, #8]
 800431e:	4313      	orrs	r3, r2
 8004320:	697a      	ldr	r2, [r7, #20]
 8004322:	4313      	orrs	r3, r2
 8004324:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004326:	68fb      	ldr	r3, [r7, #12]
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	609a      	str	r2, [r3, #8]
}
 800432c:	bf00      	nop
 800432e:	371c      	adds	r7, #28
 8004330:	46bd      	mov	sp, r7
 8004332:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004336:	4770      	bx	lr

08004338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004338:	b480      	push	{r7}
 800433a:	b085      	sub	sp, #20
 800433c:	af00      	add	r7, sp, #0
 800433e:	6078      	str	r0, [r7, #4]
 8004340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004342:	687b      	ldr	r3, [r7, #4]
 8004344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004348:	2b01      	cmp	r3, #1
 800434a:	d101      	bne.n	8004350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800434c:	2302      	movs	r3, #2
 800434e:	e06d      	b.n	800442c <HAL_TIMEx_MasterConfigSynchronization+0xf4>
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	2201      	movs	r2, #1
 8004354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	2202      	movs	r2, #2
 800435c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	685b      	ldr	r3, [r3, #4]
 8004366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	689b      	ldr	r3, [r3, #8]
 800436e:	60bb      	str	r3, [r7, #8]

  /* If the timer supports ADC synchronization through TRGO2, set the master mode selection 2 */
  if (IS_TIM_TRGO2_INSTANCE(htim->Instance))
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	4a30      	ldr	r2, [pc, #192]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 8004376:	4293      	cmp	r3, r2
 8004378:	d004      	beq.n	8004384 <HAL_TIMEx_MasterConfigSynchronization+0x4c>
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	4a2f      	ldr	r2, [pc, #188]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 8004380:	4293      	cmp	r3, r2
 8004382:	d108      	bne.n	8004396 <HAL_TIMEx_MasterConfigSynchronization+0x5e>
  {
    /* Check the parameters */
    assert_param(IS_TIM_TRGO2_SOURCE(sMasterConfig->MasterOutputTrigger2));

    /* Clear the MMS2 bits */
    tmpcr2 &= ~TIM_CR2_MMS2;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 0370 	bic.w	r3, r3, #15728640	; 0xf00000
 800438a:	60fb      	str	r3, [r7, #12]
    /* Select the TRGO2 source*/
    tmpcr2 |= sMasterConfig->MasterOutputTrigger2;
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	685b      	ldr	r3, [r3, #4]
 8004390:	68fa      	ldr	r2, [r7, #12]
 8004392:	4313      	orrs	r3, r2
 8004394:	60fb      	str	r3, [r7, #12]
  }

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800439c:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	68fa      	ldr	r2, [r7, #12]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	68fa      	ldr	r2, [r7, #12]
 80043ae:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	4a20      	ldr	r2, [pc, #128]	; (8004438 <HAL_TIMEx_MasterConfigSynchronization+0x100>)
 80043b6:	4293      	cmp	r3, r2
 80043b8:	d022      	beq.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80043c2:	d01d      	beq.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a1d      	ldr	r2, [pc, #116]	; (8004440 <HAL_TIMEx_MasterConfigSynchronization+0x108>)
 80043ca:	4293      	cmp	r3, r2
 80043cc:	d018      	beq.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	4a1c      	ldr	r2, [pc, #112]	; (8004444 <HAL_TIMEx_MasterConfigSynchronization+0x10c>)
 80043d4:	4293      	cmp	r3, r2
 80043d6:	d013      	beq.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	4a1a      	ldr	r2, [pc, #104]	; (8004448 <HAL_TIMEx_MasterConfigSynchronization+0x110>)
 80043de:	4293      	cmp	r3, r2
 80043e0:	d00e      	beq.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	4a15      	ldr	r2, [pc, #84]	; (800443c <HAL_TIMEx_MasterConfigSynchronization+0x104>)
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d009      	beq.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	4a16      	ldr	r2, [pc, #88]	; (800444c <HAL_TIMEx_MasterConfigSynchronization+0x114>)
 80043f2:	4293      	cmp	r3, r2
 80043f4:	d004      	beq.n	8004400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>
 80043f6:	687b      	ldr	r3, [r7, #4]
 80043f8:	681b      	ldr	r3, [r3, #0]
 80043fa:	4a15      	ldr	r2, [pc, #84]	; (8004450 <HAL_TIMEx_MasterConfigSynchronization+0x118>)
 80043fc:	4293      	cmp	r3, r2
 80043fe:	d10c      	bne.n	800441a <HAL_TIMEx_MasterConfigSynchronization+0xe2>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004400:	68bb      	ldr	r3, [r7, #8]
 8004402:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004406:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004408:	683b      	ldr	r3, [r7, #0]
 800440a:	689b      	ldr	r3, [r3, #8]
 800440c:	68ba      	ldr	r2, [r7, #8]
 800440e:	4313      	orrs	r3, r2
 8004410:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	68ba      	ldr	r2, [r7, #8]
 8004418:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	2201      	movs	r2, #1
 800441e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	2200      	movs	r2, #0
 8004426:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800442a:	2300      	movs	r3, #0
}
 800442c:	4618      	mov	r0, r3
 800442e:	3714      	adds	r7, #20
 8004430:	46bd      	mov	sp, r7
 8004432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004436:	4770      	bx	lr
 8004438:	40010000 	.word	0x40010000
 800443c:	40010400 	.word	0x40010400
 8004440:	40000400 	.word	0x40000400
 8004444:	40000800 	.word	0x40000800
 8004448:	40000c00 	.word	0x40000c00
 800444c:	40014000 	.word	0x40014000
 8004450:	40001800 	.word	0x40001800

08004454 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b082      	sub	sp, #8
 8004458:	af00      	add	r7, sp, #0
 800445a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d101      	bne.n	8004466 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004462:	2301      	movs	r3, #1
 8004464:	e040      	b.n	80044e8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800446a:	2b00      	cmp	r3, #0
 800446c:	d106      	bne.n	800447c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	2200      	movs	r2, #0
 8004472:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8004476:	6878      	ldr	r0, [r7, #4]
 8004478:	f7fd f88e 	bl	8001598 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2224      	movs	r2, #36	; 0x24
 8004480:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f022 0201 	bic.w	r2, r2, #1
 8004490:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8004492:	6878      	ldr	r0, [r7, #4]
 8004494:	f000 f82c 	bl	80044f0 <UART_SetConfig>
 8004498:	4603      	mov	r3, r0
 800449a:	2b01      	cmp	r3, #1
 800449c:	d101      	bne.n	80044a2 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 800449e:	2301      	movs	r3, #1
 80044a0:	e022      	b.n	80044e8 <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80044a6:	2b00      	cmp	r3, #0
 80044a8:	d002      	beq.n	80044b0 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 80044aa:	6878      	ldr	r0, [r7, #4]
 80044ac:	f000 fa82 	bl	80049b4 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	681b      	ldr	r3, [r3, #0]
 80044b4:	685a      	ldr	r2, [r3, #4]
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80044be:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	681b      	ldr	r3, [r3, #0]
 80044c4:	689a      	ldr	r2, [r3, #8]
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80044ce:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	681a      	ldr	r2, [r3, #0]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0201 	orr.w	r2, r2, #1
 80044de:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 80044e0:	6878      	ldr	r0, [r7, #4]
 80044e2:	f000 fb09 	bl	8004af8 <UART_CheckIdleState>
 80044e6:	4603      	mov	r3, r0
}
 80044e8:	4618      	mov	r0, r3
 80044ea:	3708      	adds	r7, #8
 80044ec:	46bd      	mov	sp, r7
 80044ee:	bd80      	pop	{r7, pc}

080044f0 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 80044f0:	b580      	push	{r7, lr}
 80044f2:	b088      	sub	sp, #32
 80044f4:	af00      	add	r7, sp, #0
 80044f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 80044f8:	2300      	movs	r3, #0
 80044fa:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	689a      	ldr	r2, [r3, #8]
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	691b      	ldr	r3, [r3, #16]
 8004504:	431a      	orrs	r2, r3
 8004506:	687b      	ldr	r3, [r7, #4]
 8004508:	695b      	ldr	r3, [r3, #20]
 800450a:	431a      	orrs	r2, r3
 800450c:	687b      	ldr	r3, [r7, #4]
 800450e:	69db      	ldr	r3, [r3, #28]
 8004510:	4313      	orrs	r3, r2
 8004512:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8004514:	687b      	ldr	r3, [r7, #4]
 8004516:	681b      	ldr	r3, [r3, #0]
 8004518:	681a      	ldr	r2, [r3, #0]
 800451a:	4ba7      	ldr	r3, [pc, #668]	; (80047b8 <UART_SetConfig+0x2c8>)
 800451c:	4013      	ands	r3, r2
 800451e:	687a      	ldr	r2, [r7, #4]
 8004520:	6812      	ldr	r2, [r2, #0]
 8004522:	6979      	ldr	r1, [r7, #20]
 8004524:	430b      	orrs	r3, r1
 8004526:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	685b      	ldr	r3, [r3, #4]
 800452e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	68da      	ldr	r2, [r3, #12]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	430a      	orrs	r2, r1
 800453c:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	699b      	ldr	r3, [r3, #24]
 8004542:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	6a1b      	ldr	r3, [r3, #32]
 8004548:	697a      	ldr	r2, [r7, #20]
 800454a:	4313      	orrs	r3, r2
 800454c:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	681b      	ldr	r3, [r3, #0]
 8004552:	689b      	ldr	r3, [r3, #8]
 8004554:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	697a      	ldr	r2, [r7, #20]
 800455e:	430a      	orrs	r2, r1
 8004560:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	4a95      	ldr	r2, [pc, #596]	; (80047bc <UART_SetConfig+0x2cc>)
 8004568:	4293      	cmp	r3, r2
 800456a:	d120      	bne.n	80045ae <UART_SetConfig+0xbe>
 800456c:	4b94      	ldr	r3, [pc, #592]	; (80047c0 <UART_SetConfig+0x2d0>)
 800456e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004572:	f003 0303 	and.w	r3, r3, #3
 8004576:	2b03      	cmp	r3, #3
 8004578:	d816      	bhi.n	80045a8 <UART_SetConfig+0xb8>
 800457a:	a201      	add	r2, pc, #4	; (adr r2, 8004580 <UART_SetConfig+0x90>)
 800457c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004580:	08004591 	.word	0x08004591
 8004584:	0800459d 	.word	0x0800459d
 8004588:	08004597 	.word	0x08004597
 800458c:	080045a3 	.word	0x080045a3
 8004590:	2301      	movs	r3, #1
 8004592:	77fb      	strb	r3, [r7, #31]
 8004594:	e14f      	b.n	8004836 <UART_SetConfig+0x346>
 8004596:	2302      	movs	r3, #2
 8004598:	77fb      	strb	r3, [r7, #31]
 800459a:	e14c      	b.n	8004836 <UART_SetConfig+0x346>
 800459c:	2304      	movs	r3, #4
 800459e:	77fb      	strb	r3, [r7, #31]
 80045a0:	e149      	b.n	8004836 <UART_SetConfig+0x346>
 80045a2:	2308      	movs	r3, #8
 80045a4:	77fb      	strb	r3, [r7, #31]
 80045a6:	e146      	b.n	8004836 <UART_SetConfig+0x346>
 80045a8:	2310      	movs	r3, #16
 80045aa:	77fb      	strb	r3, [r7, #31]
 80045ac:	e143      	b.n	8004836 <UART_SetConfig+0x346>
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	4a84      	ldr	r2, [pc, #528]	; (80047c4 <UART_SetConfig+0x2d4>)
 80045b4:	4293      	cmp	r3, r2
 80045b6:	d132      	bne.n	800461e <UART_SetConfig+0x12e>
 80045b8:	4b81      	ldr	r3, [pc, #516]	; (80047c0 <UART_SetConfig+0x2d0>)
 80045ba:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045be:	f003 030c 	and.w	r3, r3, #12
 80045c2:	2b0c      	cmp	r3, #12
 80045c4:	d828      	bhi.n	8004618 <UART_SetConfig+0x128>
 80045c6:	a201      	add	r2, pc, #4	; (adr r2, 80045cc <UART_SetConfig+0xdc>)
 80045c8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80045cc:	08004601 	.word	0x08004601
 80045d0:	08004619 	.word	0x08004619
 80045d4:	08004619 	.word	0x08004619
 80045d8:	08004619 	.word	0x08004619
 80045dc:	0800460d 	.word	0x0800460d
 80045e0:	08004619 	.word	0x08004619
 80045e4:	08004619 	.word	0x08004619
 80045e8:	08004619 	.word	0x08004619
 80045ec:	08004607 	.word	0x08004607
 80045f0:	08004619 	.word	0x08004619
 80045f4:	08004619 	.word	0x08004619
 80045f8:	08004619 	.word	0x08004619
 80045fc:	08004613 	.word	0x08004613
 8004600:	2300      	movs	r3, #0
 8004602:	77fb      	strb	r3, [r7, #31]
 8004604:	e117      	b.n	8004836 <UART_SetConfig+0x346>
 8004606:	2302      	movs	r3, #2
 8004608:	77fb      	strb	r3, [r7, #31]
 800460a:	e114      	b.n	8004836 <UART_SetConfig+0x346>
 800460c:	2304      	movs	r3, #4
 800460e:	77fb      	strb	r3, [r7, #31]
 8004610:	e111      	b.n	8004836 <UART_SetConfig+0x346>
 8004612:	2308      	movs	r3, #8
 8004614:	77fb      	strb	r3, [r7, #31]
 8004616:	e10e      	b.n	8004836 <UART_SetConfig+0x346>
 8004618:	2310      	movs	r3, #16
 800461a:	77fb      	strb	r3, [r7, #31]
 800461c:	e10b      	b.n	8004836 <UART_SetConfig+0x346>
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	681b      	ldr	r3, [r3, #0]
 8004622:	4a69      	ldr	r2, [pc, #420]	; (80047c8 <UART_SetConfig+0x2d8>)
 8004624:	4293      	cmp	r3, r2
 8004626:	d120      	bne.n	800466a <UART_SetConfig+0x17a>
 8004628:	4b65      	ldr	r3, [pc, #404]	; (80047c0 <UART_SetConfig+0x2d0>)
 800462a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800462e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004632:	2b30      	cmp	r3, #48	; 0x30
 8004634:	d013      	beq.n	800465e <UART_SetConfig+0x16e>
 8004636:	2b30      	cmp	r3, #48	; 0x30
 8004638:	d814      	bhi.n	8004664 <UART_SetConfig+0x174>
 800463a:	2b20      	cmp	r3, #32
 800463c:	d009      	beq.n	8004652 <UART_SetConfig+0x162>
 800463e:	2b20      	cmp	r3, #32
 8004640:	d810      	bhi.n	8004664 <UART_SetConfig+0x174>
 8004642:	2b00      	cmp	r3, #0
 8004644:	d002      	beq.n	800464c <UART_SetConfig+0x15c>
 8004646:	2b10      	cmp	r3, #16
 8004648:	d006      	beq.n	8004658 <UART_SetConfig+0x168>
 800464a:	e00b      	b.n	8004664 <UART_SetConfig+0x174>
 800464c:	2300      	movs	r3, #0
 800464e:	77fb      	strb	r3, [r7, #31]
 8004650:	e0f1      	b.n	8004836 <UART_SetConfig+0x346>
 8004652:	2302      	movs	r3, #2
 8004654:	77fb      	strb	r3, [r7, #31]
 8004656:	e0ee      	b.n	8004836 <UART_SetConfig+0x346>
 8004658:	2304      	movs	r3, #4
 800465a:	77fb      	strb	r3, [r7, #31]
 800465c:	e0eb      	b.n	8004836 <UART_SetConfig+0x346>
 800465e:	2308      	movs	r3, #8
 8004660:	77fb      	strb	r3, [r7, #31]
 8004662:	e0e8      	b.n	8004836 <UART_SetConfig+0x346>
 8004664:	2310      	movs	r3, #16
 8004666:	77fb      	strb	r3, [r7, #31]
 8004668:	e0e5      	b.n	8004836 <UART_SetConfig+0x346>
 800466a:	687b      	ldr	r3, [r7, #4]
 800466c:	681b      	ldr	r3, [r3, #0]
 800466e:	4a57      	ldr	r2, [pc, #348]	; (80047cc <UART_SetConfig+0x2dc>)
 8004670:	4293      	cmp	r3, r2
 8004672:	d120      	bne.n	80046b6 <UART_SetConfig+0x1c6>
 8004674:	4b52      	ldr	r3, [pc, #328]	; (80047c0 <UART_SetConfig+0x2d0>)
 8004676:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800467a:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800467e:	2bc0      	cmp	r3, #192	; 0xc0
 8004680:	d013      	beq.n	80046aa <UART_SetConfig+0x1ba>
 8004682:	2bc0      	cmp	r3, #192	; 0xc0
 8004684:	d814      	bhi.n	80046b0 <UART_SetConfig+0x1c0>
 8004686:	2b80      	cmp	r3, #128	; 0x80
 8004688:	d009      	beq.n	800469e <UART_SetConfig+0x1ae>
 800468a:	2b80      	cmp	r3, #128	; 0x80
 800468c:	d810      	bhi.n	80046b0 <UART_SetConfig+0x1c0>
 800468e:	2b00      	cmp	r3, #0
 8004690:	d002      	beq.n	8004698 <UART_SetConfig+0x1a8>
 8004692:	2b40      	cmp	r3, #64	; 0x40
 8004694:	d006      	beq.n	80046a4 <UART_SetConfig+0x1b4>
 8004696:	e00b      	b.n	80046b0 <UART_SetConfig+0x1c0>
 8004698:	2300      	movs	r3, #0
 800469a:	77fb      	strb	r3, [r7, #31]
 800469c:	e0cb      	b.n	8004836 <UART_SetConfig+0x346>
 800469e:	2302      	movs	r3, #2
 80046a0:	77fb      	strb	r3, [r7, #31]
 80046a2:	e0c8      	b.n	8004836 <UART_SetConfig+0x346>
 80046a4:	2304      	movs	r3, #4
 80046a6:	77fb      	strb	r3, [r7, #31]
 80046a8:	e0c5      	b.n	8004836 <UART_SetConfig+0x346>
 80046aa:	2308      	movs	r3, #8
 80046ac:	77fb      	strb	r3, [r7, #31]
 80046ae:	e0c2      	b.n	8004836 <UART_SetConfig+0x346>
 80046b0:	2310      	movs	r3, #16
 80046b2:	77fb      	strb	r3, [r7, #31]
 80046b4:	e0bf      	b.n	8004836 <UART_SetConfig+0x346>
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	4a45      	ldr	r2, [pc, #276]	; (80047d0 <UART_SetConfig+0x2e0>)
 80046bc:	4293      	cmp	r3, r2
 80046be:	d125      	bne.n	800470c <UART_SetConfig+0x21c>
 80046c0:	4b3f      	ldr	r3, [pc, #252]	; (80047c0 <UART_SetConfig+0x2d0>)
 80046c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80046c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80046ca:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046ce:	d017      	beq.n	8004700 <UART_SetConfig+0x210>
 80046d0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80046d4:	d817      	bhi.n	8004706 <UART_SetConfig+0x216>
 80046d6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046da:	d00b      	beq.n	80046f4 <UART_SetConfig+0x204>
 80046dc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80046e0:	d811      	bhi.n	8004706 <UART_SetConfig+0x216>
 80046e2:	2b00      	cmp	r3, #0
 80046e4:	d003      	beq.n	80046ee <UART_SetConfig+0x1fe>
 80046e6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80046ea:	d006      	beq.n	80046fa <UART_SetConfig+0x20a>
 80046ec:	e00b      	b.n	8004706 <UART_SetConfig+0x216>
 80046ee:	2300      	movs	r3, #0
 80046f0:	77fb      	strb	r3, [r7, #31]
 80046f2:	e0a0      	b.n	8004836 <UART_SetConfig+0x346>
 80046f4:	2302      	movs	r3, #2
 80046f6:	77fb      	strb	r3, [r7, #31]
 80046f8:	e09d      	b.n	8004836 <UART_SetConfig+0x346>
 80046fa:	2304      	movs	r3, #4
 80046fc:	77fb      	strb	r3, [r7, #31]
 80046fe:	e09a      	b.n	8004836 <UART_SetConfig+0x346>
 8004700:	2308      	movs	r3, #8
 8004702:	77fb      	strb	r3, [r7, #31]
 8004704:	e097      	b.n	8004836 <UART_SetConfig+0x346>
 8004706:	2310      	movs	r3, #16
 8004708:	77fb      	strb	r3, [r7, #31]
 800470a:	e094      	b.n	8004836 <UART_SetConfig+0x346>
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4a30      	ldr	r2, [pc, #192]	; (80047d4 <UART_SetConfig+0x2e4>)
 8004712:	4293      	cmp	r3, r2
 8004714:	d125      	bne.n	8004762 <UART_SetConfig+0x272>
 8004716:	4b2a      	ldr	r3, [pc, #168]	; (80047c0 <UART_SetConfig+0x2d0>)
 8004718:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800471c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8004720:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004724:	d017      	beq.n	8004756 <UART_SetConfig+0x266>
 8004726:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800472a:	d817      	bhi.n	800475c <UART_SetConfig+0x26c>
 800472c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004730:	d00b      	beq.n	800474a <UART_SetConfig+0x25a>
 8004732:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004736:	d811      	bhi.n	800475c <UART_SetConfig+0x26c>
 8004738:	2b00      	cmp	r3, #0
 800473a:	d003      	beq.n	8004744 <UART_SetConfig+0x254>
 800473c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004740:	d006      	beq.n	8004750 <UART_SetConfig+0x260>
 8004742:	e00b      	b.n	800475c <UART_SetConfig+0x26c>
 8004744:	2301      	movs	r3, #1
 8004746:	77fb      	strb	r3, [r7, #31]
 8004748:	e075      	b.n	8004836 <UART_SetConfig+0x346>
 800474a:	2302      	movs	r3, #2
 800474c:	77fb      	strb	r3, [r7, #31]
 800474e:	e072      	b.n	8004836 <UART_SetConfig+0x346>
 8004750:	2304      	movs	r3, #4
 8004752:	77fb      	strb	r3, [r7, #31]
 8004754:	e06f      	b.n	8004836 <UART_SetConfig+0x346>
 8004756:	2308      	movs	r3, #8
 8004758:	77fb      	strb	r3, [r7, #31]
 800475a:	e06c      	b.n	8004836 <UART_SetConfig+0x346>
 800475c:	2310      	movs	r3, #16
 800475e:	77fb      	strb	r3, [r7, #31]
 8004760:	e069      	b.n	8004836 <UART_SetConfig+0x346>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	4a1c      	ldr	r2, [pc, #112]	; (80047d8 <UART_SetConfig+0x2e8>)
 8004768:	4293      	cmp	r3, r2
 800476a:	d137      	bne.n	80047dc <UART_SetConfig+0x2ec>
 800476c:	4b14      	ldr	r3, [pc, #80]	; (80047c0 <UART_SetConfig+0x2d0>)
 800476e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004772:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 8004776:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800477a:	d017      	beq.n	80047ac <UART_SetConfig+0x2bc>
 800477c:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8004780:	d817      	bhi.n	80047b2 <UART_SetConfig+0x2c2>
 8004782:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004786:	d00b      	beq.n	80047a0 <UART_SetConfig+0x2b0>
 8004788:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800478c:	d811      	bhi.n	80047b2 <UART_SetConfig+0x2c2>
 800478e:	2b00      	cmp	r3, #0
 8004790:	d003      	beq.n	800479a <UART_SetConfig+0x2aa>
 8004792:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004796:	d006      	beq.n	80047a6 <UART_SetConfig+0x2b6>
 8004798:	e00b      	b.n	80047b2 <UART_SetConfig+0x2c2>
 800479a:	2300      	movs	r3, #0
 800479c:	77fb      	strb	r3, [r7, #31]
 800479e:	e04a      	b.n	8004836 <UART_SetConfig+0x346>
 80047a0:	2302      	movs	r3, #2
 80047a2:	77fb      	strb	r3, [r7, #31]
 80047a4:	e047      	b.n	8004836 <UART_SetConfig+0x346>
 80047a6:	2304      	movs	r3, #4
 80047a8:	77fb      	strb	r3, [r7, #31]
 80047aa:	e044      	b.n	8004836 <UART_SetConfig+0x346>
 80047ac:	2308      	movs	r3, #8
 80047ae:	77fb      	strb	r3, [r7, #31]
 80047b0:	e041      	b.n	8004836 <UART_SetConfig+0x346>
 80047b2:	2310      	movs	r3, #16
 80047b4:	77fb      	strb	r3, [r7, #31]
 80047b6:	e03e      	b.n	8004836 <UART_SetConfig+0x346>
 80047b8:	efff69f3 	.word	0xefff69f3
 80047bc:	40011000 	.word	0x40011000
 80047c0:	40023800 	.word	0x40023800
 80047c4:	40004400 	.word	0x40004400
 80047c8:	40004800 	.word	0x40004800
 80047cc:	40004c00 	.word	0x40004c00
 80047d0:	40005000 	.word	0x40005000
 80047d4:	40011400 	.word	0x40011400
 80047d8:	40007800 	.word	0x40007800
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	681b      	ldr	r3, [r3, #0]
 80047e0:	4a71      	ldr	r2, [pc, #452]	; (80049a8 <UART_SetConfig+0x4b8>)
 80047e2:	4293      	cmp	r3, r2
 80047e4:	d125      	bne.n	8004832 <UART_SetConfig+0x342>
 80047e6:	4b71      	ldr	r3, [pc, #452]	; (80049ac <UART_SetConfig+0x4bc>)
 80047e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80047ec:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80047f0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047f4:	d017      	beq.n	8004826 <UART_SetConfig+0x336>
 80047f6:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80047fa:	d817      	bhi.n	800482c <UART_SetConfig+0x33c>
 80047fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004800:	d00b      	beq.n	800481a <UART_SetConfig+0x32a>
 8004802:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004806:	d811      	bhi.n	800482c <UART_SetConfig+0x33c>
 8004808:	2b00      	cmp	r3, #0
 800480a:	d003      	beq.n	8004814 <UART_SetConfig+0x324>
 800480c:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004810:	d006      	beq.n	8004820 <UART_SetConfig+0x330>
 8004812:	e00b      	b.n	800482c <UART_SetConfig+0x33c>
 8004814:	2300      	movs	r3, #0
 8004816:	77fb      	strb	r3, [r7, #31]
 8004818:	e00d      	b.n	8004836 <UART_SetConfig+0x346>
 800481a:	2302      	movs	r3, #2
 800481c:	77fb      	strb	r3, [r7, #31]
 800481e:	e00a      	b.n	8004836 <UART_SetConfig+0x346>
 8004820:	2304      	movs	r3, #4
 8004822:	77fb      	strb	r3, [r7, #31]
 8004824:	e007      	b.n	8004836 <UART_SetConfig+0x346>
 8004826:	2308      	movs	r3, #8
 8004828:	77fb      	strb	r3, [r7, #31]
 800482a:	e004      	b.n	8004836 <UART_SetConfig+0x346>
 800482c:	2310      	movs	r3, #16
 800482e:	77fb      	strb	r3, [r7, #31]
 8004830:	e001      	b.n	8004836 <UART_SetConfig+0x346>
 8004832:	2310      	movs	r3, #16
 8004834:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	69db      	ldr	r3, [r3, #28]
 800483a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800483e:	d15b      	bne.n	80048f8 <UART_SetConfig+0x408>
  {
    switch (clocksource)
 8004840:	7ffb      	ldrb	r3, [r7, #31]
 8004842:	2b08      	cmp	r3, #8
 8004844:	d827      	bhi.n	8004896 <UART_SetConfig+0x3a6>
 8004846:	a201      	add	r2, pc, #4	; (adr r2, 800484c <UART_SetConfig+0x35c>)
 8004848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800484c:	08004871 	.word	0x08004871
 8004850:	08004879 	.word	0x08004879
 8004854:	08004881 	.word	0x08004881
 8004858:	08004897 	.word	0x08004897
 800485c:	08004887 	.word	0x08004887
 8004860:	08004897 	.word	0x08004897
 8004864:	08004897 	.word	0x08004897
 8004868:	08004897 	.word	0x08004897
 800486c:	0800488f 	.word	0x0800488f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004870:	f7fe fe82 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 8004874:	61b8      	str	r0, [r7, #24]
        break;
 8004876:	e013      	b.n	80048a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004878:	f7fe fe92 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 800487c:	61b8      	str	r0, [r7, #24]
        break;
 800487e:	e00f      	b.n	80048a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004880:	4b4b      	ldr	r3, [pc, #300]	; (80049b0 <UART_SetConfig+0x4c0>)
 8004882:	61bb      	str	r3, [r7, #24]
        break;
 8004884:	e00c      	b.n	80048a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8004886:	f7fe fd89 	bl	800339c <HAL_RCC_GetSysClockFreq>
 800488a:	61b8      	str	r0, [r7, #24]
        break;
 800488c:	e008      	b.n	80048a0 <UART_SetConfig+0x3b0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800488e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004892:	61bb      	str	r3, [r7, #24]
        break;
 8004894:	e004      	b.n	80048a0 <UART_SetConfig+0x3b0>
      default:
        pclk = 0U;
 8004896:	2300      	movs	r3, #0
 8004898:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800489a:	2301      	movs	r3, #1
 800489c:	77bb      	strb	r3, [r7, #30]
        break;
 800489e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80048a0:	69bb      	ldr	r3, [r7, #24]
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d074      	beq.n	8004990 <UART_SetConfig+0x4a0>
    {
      usartdiv = (uint16_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80048a6:	69bb      	ldr	r3, [r7, #24]
 80048a8:	005a      	lsls	r2, r3, #1
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	685b      	ldr	r3, [r3, #4]
 80048ae:	085b      	lsrs	r3, r3, #1
 80048b0:	441a      	add	r2, r3
 80048b2:	687b      	ldr	r3, [r7, #4]
 80048b4:	685b      	ldr	r3, [r3, #4]
 80048b6:	fbb2 f3f3 	udiv	r3, r2, r3
 80048ba:	b29b      	uxth	r3, r3
 80048bc:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80048be:	693b      	ldr	r3, [r7, #16]
 80048c0:	2b0f      	cmp	r3, #15
 80048c2:	d916      	bls.n	80048f2 <UART_SetConfig+0x402>
 80048c4:	693b      	ldr	r3, [r7, #16]
 80048c6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80048ca:	d212      	bcs.n	80048f2 <UART_SetConfig+0x402>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 80048cc:	693b      	ldr	r3, [r7, #16]
 80048ce:	b29b      	uxth	r3, r3
 80048d0:	f023 030f 	bic.w	r3, r3, #15
 80048d4:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 80048d6:	693b      	ldr	r3, [r7, #16]
 80048d8:	085b      	lsrs	r3, r3, #1
 80048da:	b29b      	uxth	r3, r3
 80048dc:	f003 0307 	and.w	r3, r3, #7
 80048e0:	b29a      	uxth	r2, r3
 80048e2:	89fb      	ldrh	r3, [r7, #14]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	89fa      	ldrh	r2, [r7, #14]
 80048ee:	60da      	str	r2, [r3, #12]
 80048f0:	e04e      	b.n	8004990 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 80048f2:	2301      	movs	r3, #1
 80048f4:	77bb      	strb	r3, [r7, #30]
 80048f6:	e04b      	b.n	8004990 <UART_SetConfig+0x4a0>
      }
    }
  }
  else
  {
    switch (clocksource)
 80048f8:	7ffb      	ldrb	r3, [r7, #31]
 80048fa:	2b08      	cmp	r3, #8
 80048fc:	d827      	bhi.n	800494e <UART_SetConfig+0x45e>
 80048fe:	a201      	add	r2, pc, #4	; (adr r2, 8004904 <UART_SetConfig+0x414>)
 8004900:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004904:	08004929 	.word	0x08004929
 8004908:	08004931 	.word	0x08004931
 800490c:	08004939 	.word	0x08004939
 8004910:	0800494f 	.word	0x0800494f
 8004914:	0800493f 	.word	0x0800493f
 8004918:	0800494f 	.word	0x0800494f
 800491c:	0800494f 	.word	0x0800494f
 8004920:	0800494f 	.word	0x0800494f
 8004924:	08004947 	.word	0x08004947
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8004928:	f7fe fe26 	bl	8003578 <HAL_RCC_GetPCLK1Freq>
 800492c:	61b8      	str	r0, [r7, #24]
        break;
 800492e:	e013      	b.n	8004958 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8004930:	f7fe fe36 	bl	80035a0 <HAL_RCC_GetPCLK2Freq>
 8004934:	61b8      	str	r0, [r7, #24]
        break;
 8004936:	e00f      	b.n	8004958 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 8004938:	4b1d      	ldr	r3, [pc, #116]	; (80049b0 <UART_SetConfig+0x4c0>)
 800493a:	61bb      	str	r3, [r7, #24]
        break;
 800493c:	e00c      	b.n	8004958 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800493e:	f7fe fd2d 	bl	800339c <HAL_RCC_GetSysClockFreq>
 8004942:	61b8      	str	r0, [r7, #24]
        break;
 8004944:	e008      	b.n	8004958 <UART_SetConfig+0x468>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8004946:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800494a:	61bb      	str	r3, [r7, #24]
        break;
 800494c:	e004      	b.n	8004958 <UART_SetConfig+0x468>
      default:
        pclk = 0U;
 800494e:	2300      	movs	r3, #0
 8004950:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 8004952:	2301      	movs	r3, #1
 8004954:	77bb      	strb	r3, [r7, #30]
        break;
 8004956:	bf00      	nop
    }

    if (pclk != 0U)
 8004958:	69bb      	ldr	r3, [r7, #24]
 800495a:	2b00      	cmp	r3, #0
 800495c:	d018      	beq.n	8004990 <UART_SetConfig+0x4a0>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint16_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	685b      	ldr	r3, [r3, #4]
 8004962:	085a      	lsrs	r2, r3, #1
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	441a      	add	r2, r3
 8004968:	687b      	ldr	r3, [r7, #4]
 800496a:	685b      	ldr	r3, [r3, #4]
 800496c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004970:	b29b      	uxth	r3, r3
 8004972:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	2b0f      	cmp	r3, #15
 8004978:	d908      	bls.n	800498c <UART_SetConfig+0x49c>
 800497a:	693b      	ldr	r3, [r7, #16]
 800497c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004980:	d204      	bcs.n	800498c <UART_SetConfig+0x49c>
      {
        huart->Instance->BRR = usartdiv;
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	681b      	ldr	r3, [r3, #0]
 8004986:	693a      	ldr	r2, [r7, #16]
 8004988:	60da      	str	r2, [r3, #12]
 800498a:	e001      	b.n	8004990 <UART_SetConfig+0x4a0>
      }
      else
      {
        ret = HAL_ERROR;
 800498c:	2301      	movs	r3, #1
 800498e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 8004990:	687b      	ldr	r3, [r7, #4]
 8004992:	2200      	movs	r2, #0
 8004994:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	2200      	movs	r2, #0
 800499a:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 800499c:	7fbb      	ldrb	r3, [r7, #30]
}
 800499e:	4618      	mov	r0, r3
 80049a0:	3720      	adds	r7, #32
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd80      	pop	{r7, pc}
 80049a6:	bf00      	nop
 80049a8:	40007c00 	.word	0x40007c00
 80049ac:	40023800 	.word	0x40023800
 80049b0:	00f42400 	.word	0x00f42400

080049b4 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 80049b4:	b480      	push	{r7}
 80049b6:	b083      	sub	sp, #12
 80049b8:	af00      	add	r7, sp, #0
 80049ba:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049c0:	f003 0301 	and.w	r3, r3, #1
 80049c4:	2b00      	cmp	r3, #0
 80049c6:	d00a      	beq.n	80049de <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	681b      	ldr	r3, [r3, #0]
 80049cc:	685b      	ldr	r3, [r3, #4]
 80049ce:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	681b      	ldr	r3, [r3, #0]
 80049da:	430a      	orrs	r2, r1
 80049dc:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049e2:	f003 0302 	and.w	r3, r3, #2
 80049e6:	2b00      	cmp	r3, #0
 80049e8:	d00a      	beq.n	8004a00 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	685b      	ldr	r3, [r3, #4]
 80049f0:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80049f4:	687b      	ldr	r3, [r7, #4]
 80049f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	430a      	orrs	r2, r1
 80049fe:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a04:	f003 0304 	and.w	r3, r3, #4
 8004a08:	2b00      	cmp	r3, #0
 8004a0a:	d00a      	beq.n	8004a22 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	685b      	ldr	r3, [r3, #4]
 8004a12:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	430a      	orrs	r2, r1
 8004a20:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	f003 0308 	and.w	r3, r3, #8
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00a      	beq.n	8004a44 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	685b      	ldr	r3, [r3, #4]
 8004a34:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004a3c:	687b      	ldr	r3, [r7, #4]
 8004a3e:	681b      	ldr	r3, [r3, #0]
 8004a40:	430a      	orrs	r2, r1
 8004a42:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 8004a44:	687b      	ldr	r3, [r7, #4]
 8004a46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a48:	f003 0310 	and.w	r3, r3, #16
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d00a      	beq.n	8004a66 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 8004a5a:	687b      	ldr	r3, [r7, #4]
 8004a5c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	681b      	ldr	r3, [r3, #0]
 8004a62:	430a      	orrs	r2, r1
 8004a64:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a6a:	f003 0320 	and.w	r3, r3, #32
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d00a      	beq.n	8004a88 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	681b      	ldr	r3, [r3, #0]
 8004a76:	689b      	ldr	r3, [r3, #8]
 8004a78:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	430a      	orrs	r2, r1
 8004a86:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d01a      	beq.n	8004aca <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	681b      	ldr	r3, [r3, #0]
 8004a98:	685b      	ldr	r3, [r3, #4]
 8004a9a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	681b      	ldr	r3, [r3, #0]
 8004aa6:	430a      	orrs	r2, r1
 8004aa8:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ab2:	d10a      	bne.n	8004aca <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	681b      	ldr	r3, [r3, #0]
 8004ab8:	685b      	ldr	r3, [r3, #4]
 8004aba:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	430a      	orrs	r2, r1
 8004ac8:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8004aca:	687b      	ldr	r3, [r7, #4]
 8004acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004ace:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d00a      	beq.n	8004aec <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	685b      	ldr	r3, [r3, #4]
 8004adc:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8004ae0:	687b      	ldr	r3, [r7, #4]
 8004ae2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	681b      	ldr	r3, [r3, #0]
 8004ae8:	430a      	orrs	r2, r1
 8004aea:	605a      	str	r2, [r3, #4]
  }
}
 8004aec:	bf00      	nop
 8004aee:	370c      	adds	r7, #12
 8004af0:	46bd      	mov	sp, r7
 8004af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af6:	4770      	bx	lr

08004af8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 8004af8:	b580      	push	{r7, lr}
 8004afa:	b086      	sub	sp, #24
 8004afc:	af02      	add	r7, sp, #8
 8004afe:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	2200      	movs	r2, #0
 8004b04:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 8004b08:	f7fc fea6 	bl	8001858 <HAL_GetTick>
 8004b0c:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	f003 0308 	and.w	r3, r3, #8
 8004b18:	2b08      	cmp	r3, #8
 8004b1a:	d10e      	bne.n	8004b3a <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8004b1c:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8004b20:	9300      	str	r3, [sp, #0]
 8004b22:	68fb      	ldr	r3, [r7, #12]
 8004b24:	2200      	movs	r2, #0
 8004b26:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8004b2a:	6878      	ldr	r0, [r7, #4]
 8004b2c:	f000 f817 	bl	8004b5e <UART_WaitOnFlagUntilTimeout>
 8004b30:	4603      	mov	r3, r0
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d001      	beq.n	8004b3a <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 8004b36:	2303      	movs	r3, #3
 8004b38:	e00d      	b.n	8004b56 <UART_CheckIdleState+0x5e>
    }
  }
#endif

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	2220      	movs	r2, #32
 8004b3e:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	2220      	movs	r2, #32
 8004b44:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	2200      	movs	r2, #0
 8004b4a:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8004b54:	2300      	movs	r3, #0
}
 8004b56:	4618      	mov	r0, r3
 8004b58:	3710      	adds	r7, #16
 8004b5a:	46bd      	mov	sp, r7
 8004b5c:	bd80      	pop	{r7, pc}

08004b5e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8004b5e:	b580      	push	{r7, lr}
 8004b60:	b084      	sub	sp, #16
 8004b62:	af00      	add	r7, sp, #0
 8004b64:	60f8      	str	r0, [r7, #12]
 8004b66:	60b9      	str	r1, [r7, #8]
 8004b68:	603b      	str	r3, [r7, #0]
 8004b6a:	4613      	mov	r3, r2
 8004b6c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004b6e:	e05e      	b.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xd0>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004b70:	69bb      	ldr	r3, [r7, #24]
 8004b72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004b76:	d05a      	beq.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xd0>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004b78:	f7fc fe6e 	bl	8001858 <HAL_GetTick>
 8004b7c:	4602      	mov	r2, r0
 8004b7e:	683b      	ldr	r3, [r7, #0]
 8004b80:	1ad3      	subs	r3, r2, r3
 8004b82:	69ba      	ldr	r2, [r7, #24]
 8004b84:	429a      	cmp	r2, r3
 8004b86:	d302      	bcc.n	8004b8e <UART_WaitOnFlagUntilTimeout+0x30>
 8004b88:	69bb      	ldr	r3, [r7, #24]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d11b      	bne.n	8004bc6 <UART_WaitOnFlagUntilTimeout+0x68>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
           interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004b8e:	68fb      	ldr	r3, [r7, #12]
 8004b90:	681b      	ldr	r3, [r3, #0]
 8004b92:	681a      	ldr	r2, [r3, #0]
 8004b94:	68fb      	ldr	r3, [r7, #12]
 8004b96:	681b      	ldr	r3, [r3, #0]
 8004b98:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004b9c:	601a      	str	r2, [r3, #0]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004b9e:	68fb      	ldr	r3, [r7, #12]
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	689a      	ldr	r2, [r3, #8]
 8004ba4:	68fb      	ldr	r3, [r7, #12]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f022 0201 	bic.w	r2, r2, #1
 8004bac:	609a      	str	r2, [r3, #8]

        huart->gState = HAL_UART_STATE_READY;
 8004bae:	68fb      	ldr	r3, [r7, #12]
 8004bb0:	2220      	movs	r2, #32
 8004bb2:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 8004bb4:	68fb      	ldr	r3, [r7, #12]
 8004bb6:	2220      	movs	r2, #32
 8004bb8:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 8004bba:	68fb      	ldr	r3, [r7, #12]
 8004bbc:	2200      	movs	r2, #0
 8004bbe:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 8004bc2:	2303      	movs	r3, #3
 8004bc4:	e043      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xf0>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8004bc6:	68fb      	ldr	r3, [r7, #12]
 8004bc8:	681b      	ldr	r3, [r3, #0]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f003 0304 	and.w	r3, r3, #4
 8004bd0:	2b00      	cmp	r3, #0
 8004bd2:	d02c      	beq.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xd0>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8004bd4:	68fb      	ldr	r3, [r7, #12]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	69db      	ldr	r3, [r3, #28]
 8004bda:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004bde:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004be2:	d124      	bne.n	8004c2e <UART_WaitOnFlagUntilTimeout+0xd0>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8004be4:	68fb      	ldr	r3, [r7, #12]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8004bec:	621a      	str	r2, [r3, #32]

          /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error)
             interrupts for the interrupt process */
          CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004bee:	68fb      	ldr	r3, [r7, #12]
 8004bf0:	681b      	ldr	r3, [r3, #0]
 8004bf2:	681a      	ldr	r2, [r3, #0]
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	681b      	ldr	r3, [r3, #0]
 8004bf8:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004bfc:	601a      	str	r2, [r3, #0]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004bfe:	68fb      	ldr	r3, [r7, #12]
 8004c00:	681b      	ldr	r3, [r3, #0]
 8004c02:	689a      	ldr	r2, [r3, #8]
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f022 0201 	bic.w	r2, r2, #1
 8004c0c:	609a      	str	r2, [r3, #8]

          huart->gState = HAL_UART_STATE_READY;
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2220      	movs	r2, #32
 8004c12:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8004c14:	68fb      	ldr	r3, [r7, #12]
 8004c16:	2220      	movs	r2, #32
 8004c18:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	2220      	movs	r2, #32
 8004c1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8004c22:	68fb      	ldr	r3, [r7, #12]
 8004c24:	2200      	movs	r2, #0
 8004c26:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8004c2a:	2303      	movs	r3, #3
 8004c2c:	e00f      	b.n	8004c4e <UART_WaitOnFlagUntilTimeout+0xf0>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004c2e:	68fb      	ldr	r3, [r7, #12]
 8004c30:	681b      	ldr	r3, [r3, #0]
 8004c32:	69da      	ldr	r2, [r3, #28]
 8004c34:	68bb      	ldr	r3, [r7, #8]
 8004c36:	4013      	ands	r3, r2
 8004c38:	68ba      	ldr	r2, [r7, #8]
 8004c3a:	429a      	cmp	r2, r3
 8004c3c:	bf0c      	ite	eq
 8004c3e:	2301      	moveq	r3, #1
 8004c40:	2300      	movne	r3, #0
 8004c42:	b2db      	uxtb	r3, r3
 8004c44:	461a      	mov	r2, r3
 8004c46:	79fb      	ldrb	r3, [r7, #7]
 8004c48:	429a      	cmp	r2, r3
 8004c4a:	d091      	beq.n	8004b70 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004c4c:	2300      	movs	r3, #0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3710      	adds	r7, #16
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}
	...

08004c58 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004c58:	b084      	sub	sp, #16
 8004c5a:	b580      	push	{r7, lr}
 8004c5c:	b084      	sub	sp, #16
 8004c5e:	af00      	add	r7, sp, #0
 8004c60:	6078      	str	r0, [r7, #4]
 8004c62:	f107 001c 	add.w	r0, r7, #28
 8004c66:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004c6a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c6c:	2b01      	cmp	r3, #1
 8004c6e:	d120      	bne.n	8004cb2 <USB_CoreInit+0x5a>
  {
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c74:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	639a      	str	r2, [r3, #56]	; 0x38

    /* Init The ULPI Interface */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_TSDPS | USB_OTG_GUSBCFG_ULPIFSLS | USB_OTG_GUSBCFG_PHYSEL);
 8004c7c:	687b      	ldr	r3, [r7, #4]
 8004c7e:	68da      	ldr	r2, [r3, #12]
 8004c80:	4b20      	ldr	r3, [pc, #128]	; (8004d04 <USB_CoreInit+0xac>)
 8004c82:	4013      	ands	r3, r2
 8004c84:	687a      	ldr	r2, [r7, #4]
 8004c86:	60d3      	str	r3, [r2, #12]
    /* Select ULPI Interface */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPI_UTMI_SEL;
#endif /* defined(STM32F722xx) || defined(STM32F723xx) || defined(STM32F730xx) || defined(STM32F732xx) || defined(STM32F733xx) */

    /* Select vbus source */
    USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_ULPIEVBUSD | USB_OTG_GUSBCFG_ULPIEVBUSI);
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	68db      	ldr	r3, [r3, #12]
 8004c8c:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	60da      	str	r2, [r3, #12]
    if (cfg.use_external_vbus == 1U)
 8004c94:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c96:	2b01      	cmp	r3, #1
 8004c98:	d105      	bne.n	8004ca6 <USB_CoreInit+0x4e>
    {
      USBx->GUSBCFG |= USB_OTG_GUSBCFG_ULPIEVBUSD;
 8004c9a:	687b      	ldr	r3, [r7, #4]
 8004c9c:	68db      	ldr	r3, [r3, #12]
 8004c9e:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	60da      	str	r2, [r3, #12]
    }
    /* Reset after a PHY select  */
    ret = USB_CoreReset(USBx);
 8004ca6:	6878      	ldr	r0, [r7, #4]
 8004ca8:	f000 fa5a 	bl	8005160 <USB_CoreReset>
 8004cac:	4603      	mov	r3, r0
 8004cae:	73fb      	strb	r3, [r7, #15]
 8004cb0:	e010      	b.n	8004cd4 <USB_CoreInit+0x7c>
  }
#endif
  else /* FS interface (embedded Phy) */
  {
    /* Select FS Embedded PHY */
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 8004cb2:	687b      	ldr	r3, [r7, #4]
 8004cb4:	68db      	ldr	r3, [r3, #12]
 8004cb6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	60da      	str	r2, [r3, #12]

    /* Reset after a PHY select */
    ret = USB_CoreReset(USBx);
 8004cbe:	6878      	ldr	r0, [r7, #4]
 8004cc0:	f000 fa4e 	bl	8005160 <USB_CoreReset>
 8004cc4:	4603      	mov	r3, r0
 8004cc6:	73fb      	strb	r3, [r7, #15]

    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ccc:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	639a      	str	r2, [r3, #56]	; 0x38
  }

  if (cfg.dma_enable == 1U)
 8004cd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cd6:	2b01      	cmp	r3, #1
 8004cd8:	d10b      	bne.n	8004cf2 <USB_CoreInit+0x9a>
  {
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_HBSTLEN_2;
 8004cda:	687b      	ldr	r3, [r7, #4]
 8004cdc:	689b      	ldr	r3, [r3, #8]
 8004cde:	f043 0206 	orr.w	r2, r3, #6
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	609a      	str	r2, [r3, #8]
    USBx->GAHBCFG |= USB_OTG_GAHBCFG_DMAEN;
 8004ce6:	687b      	ldr	r3, [r7, #4]
 8004ce8:	689b      	ldr	r3, [r3, #8]
 8004cea:	f043 0220 	orr.w	r2, r3, #32
 8004cee:	687b      	ldr	r3, [r7, #4]
 8004cf0:	609a      	str	r2, [r3, #8]
  }

  return ret;
 8004cf2:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cf4:	4618      	mov	r0, r3
 8004cf6:	3710      	adds	r7, #16
 8004cf8:	46bd      	mov	sp, r7
 8004cfa:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8004cfe:	b004      	add	sp, #16
 8004d00:	4770      	bx	lr
 8004d02:	bf00      	nop
 8004d04:	ffbdffbf 	.word	0xffbdffbf

08004d08 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8004d08:	b480      	push	{r7}
 8004d0a:	b083      	sub	sp, #12
 8004d0c:	af00      	add	r7, sp, #0
 8004d0e:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8004d10:	687b      	ldr	r3, [r7, #4]
 8004d12:	689b      	ldr	r3, [r3, #8]
 8004d14:	f023 0201 	bic.w	r2, r3, #1
 8004d18:	687b      	ldr	r3, [r7, #4]
 8004d1a:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8004d1c:	2300      	movs	r3, #0
}
 8004d1e:	4618      	mov	r0, r3
 8004d20:	370c      	adds	r7, #12
 8004d22:	46bd      	mov	sp, r7
 8004d24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d28:	4770      	bx	lr

08004d2a <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_OTG_ModeTypeDef mode)
{
 8004d2a:	b580      	push	{r7, lr}
 8004d2c:	b082      	sub	sp, #8
 8004d2e:	af00      	add	r7, sp, #0
 8004d30:	6078      	str	r0, [r7, #4]
 8004d32:	460b      	mov	r3, r1
 8004d34:	70fb      	strb	r3, [r7, #3]
  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	68db      	ldr	r3, [r3, #12]
 8004d3a:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 8004d42:	78fb      	ldrb	r3, [r7, #3]
 8004d44:	2b01      	cmp	r3, #1
 8004d46:	d106      	bne.n	8004d56 <USB_SetCurrentMode+0x2c>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8004d48:	687b      	ldr	r3, [r7, #4]
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	60da      	str	r2, [r3, #12]
 8004d54:	e00b      	b.n	8004d6e <USB_SetCurrentMode+0x44>
  }
  else if (mode == USB_DEVICE_MODE)
 8004d56:	78fb      	ldrb	r3, [r7, #3]
 8004d58:	2b00      	cmp	r3, #0
 8004d5a:	d106      	bne.n	8004d6a <USB_SetCurrentMode+0x40>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	68db      	ldr	r3, [r3, #12]
 8004d60:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	60da      	str	r2, [r3, #12]
 8004d68:	e001      	b.n	8004d6e <USB_SetCurrentMode+0x44>
  }
  else
  {
    return HAL_ERROR;
 8004d6a:	2301      	movs	r3, #1
 8004d6c:	e003      	b.n	8004d76 <USB_SetCurrentMode+0x4c>
  }
  HAL_Delay(50U);
 8004d6e:	2032      	movs	r0, #50	; 0x32
 8004d70:	f7fc fd7e 	bl	8001870 <HAL_Delay>

  return HAL_OK;
 8004d74:	2300      	movs	r3, #0
}
 8004d76:	4618      	mov	r0, r3
 8004d78:	3708      	adds	r7, #8
 8004d7a:	46bd      	mov	sp, r7
 8004d7c:	bd80      	pop	{r7, pc}
	...

08004d80 <USB_DevInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8004d80:	b084      	sub	sp, #16
 8004d82:	b580      	push	{r7, lr}
 8004d84:	b086      	sub	sp, #24
 8004d86:	af00      	add	r7, sp, #0
 8004d88:	6078      	str	r0, [r7, #4]
 8004d8a:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8004d8e:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8004d92:	2300      	movs	r3, #0
 8004d94:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  for (i = 0U; i < 15U; i++)
 8004d9a:	2300      	movs	r3, #0
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	e009      	b.n	8004db4 <USB_DevInit+0x34>
  {
    USBx->DIEPTXF[i] = 0U;
 8004da0:	687a      	ldr	r2, [r7, #4]
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	3340      	adds	r3, #64	; 0x40
 8004da6:	009b      	lsls	r3, r3, #2
 8004da8:	4413      	add	r3, r2
 8004daa:	2200      	movs	r2, #0
 8004dac:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < 15U; i++)
 8004dae:	693b      	ldr	r3, [r7, #16]
 8004db0:	3301      	adds	r3, #1
 8004db2:	613b      	str	r3, [r7, #16]
 8004db4:	693b      	ldr	r3, [r7, #16]
 8004db6:	2b0e      	cmp	r3, #14
 8004db8:	d9f2      	bls.n	8004da0 <USB_DevInit+0x20>
  }

  /* VBUS Sensing setup */
  if (cfg.vbus_sensing_enable == 0U)
 8004dba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d11c      	bne.n	8004dfa <USB_DevInit+0x7a>
  {
    USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 8004dc0:	68fb      	ldr	r3, [r7, #12]
 8004dc2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004dc6:	685b      	ldr	r3, [r3, #4]
 8004dc8:	68fa      	ldr	r2, [r7, #12]
 8004dca:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004dce:	f043 0302 	orr.w	r3, r3, #2
 8004dd2:	6053      	str	r3, [r2, #4]

    /* Deactivate VBUS Sensing B */
    USBx->GCCFG &= ~USB_OTG_GCCFG_VBDEN;
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dd8:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	639a      	str	r2, [r3, #56]	; 0x38

    /* B-peripheral session valid override enable */
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOEN;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	681b      	ldr	r3, [r3, #0]
 8004de4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	601a      	str	r2, [r3, #0]
    USBx->GOTGCTL |= USB_OTG_GOTGCTL_BVALOVAL;
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	601a      	str	r2, [r3, #0]
 8004df8:	e005      	b.n	8004e06 <USB_DevInit+0x86>
  }
  else
  {
    /* Enable HW VBUS sensing */
    USBx->GCCFG |= USB_OTG_GCCFG_VBDEN;
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004dfe:	f443 1200 	orr.w	r2, r3, #2097152	; 0x200000
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	639a      	str	r2, [r3, #56]	; 0x38
  }

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8004e06:	68fb      	ldr	r3, [r7, #12]
 8004e08:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8004e0c:	461a      	mov	r2, r3
 8004e0e:	2300      	movs	r3, #0
 8004e10:	6013      	str	r3, [r2, #0]

  /* Device mode configuration */
  USBx_DEVICE->DCFG |= DCFG_FRAME_INTERVAL_80;
 8004e12:	68fb      	ldr	r3, [r7, #12]
 8004e14:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e18:	4619      	mov	r1, r3
 8004e1a:	68fb      	ldr	r3, [r7, #12]
 8004e1c:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e20:	461a      	mov	r2, r3
 8004e22:	680b      	ldr	r3, [r1, #0]
 8004e24:	6013      	str	r3, [r2, #0]

  if (cfg.phy_itface == USB_OTG_ULPI_PHY)
 8004e26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e28:	2b01      	cmp	r3, #1
 8004e2a:	d10c      	bne.n	8004e46 <USB_DevInit+0xc6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e2e:	2b00      	cmp	r3, #0
 8004e30:	d104      	bne.n	8004e3c <USB_DevInit+0xbc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e32:	2100      	movs	r1, #0
 8004e34:	6878      	ldr	r0, [r7, #4]
 8004e36:	f000 f959 	bl	80050ec <USB_SetDevSpeed>
 8004e3a:	e018      	b.n	8004e6e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e3c:	2101      	movs	r1, #1
 8004e3e:	6878      	ldr	r0, [r7, #4]
 8004e40:	f000 f954 	bl	80050ec <USB_SetDevSpeed>
 8004e44:	e013      	b.n	8004e6e <USB_DevInit+0xee>
    }
  }
  else if (cfg.phy_itface == USB_OTG_HS_EMBEDDED_PHY)
 8004e46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004e48:	2b03      	cmp	r3, #3
 8004e4a:	d10c      	bne.n	8004e66 <USB_DevInit+0xe6>
  {
    if (cfg.speed == USBD_HS_SPEED)
 8004e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004e4e:	2b00      	cmp	r3, #0
 8004e50:	d104      	bne.n	8004e5c <USB_DevInit+0xdc>
    {
      /* Set Core speed to High speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH);
 8004e52:	2100      	movs	r1, #0
 8004e54:	6878      	ldr	r0, [r7, #4]
 8004e56:	f000 f949 	bl	80050ec <USB_SetDevSpeed>
 8004e5a:	e008      	b.n	8004e6e <USB_DevInit+0xee>
    }
    else
    {
      /* Set Core speed to Full speed mode */
      (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_HIGH_IN_FULL);
 8004e5c:	2101      	movs	r1, #1
 8004e5e:	6878      	ldr	r0, [r7, #4]
 8004e60:	f000 f944 	bl	80050ec <USB_SetDevSpeed>
 8004e64:	e003      	b.n	8004e6e <USB_DevInit+0xee>
    }
  }
  else
  {
    /* Set Core speed to Full speed mode */
    (void)USB_SetDevSpeed(USBx, USB_OTG_SPEED_FULL);
 8004e66:	2103      	movs	r1, #3
 8004e68:	6878      	ldr	r0, [r7, #4]
 8004e6a:	f000 f93f 	bl	80050ec <USB_SetDevSpeed>
  }

  /* Flush the FIFOs */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8004e6e:	2110      	movs	r1, #16
 8004e70:	6878      	ldr	r0, [r7, #4]
 8004e72:	f000 f8f3 	bl	800505c <USB_FlushTxFifo>
 8004e76:	4603      	mov	r3, r0
 8004e78:	2b00      	cmp	r3, #0
 8004e7a:	d001      	beq.n	8004e80 <USB_DevInit+0x100>
  {
    ret = HAL_ERROR;
 8004e7c:	2301      	movs	r3, #1
 8004e7e:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8004e80:	6878      	ldr	r0, [r7, #4]
 8004e82:	f000 f911 	bl	80050a8 <USB_FlushRxFifo>
 8004e86:	4603      	mov	r3, r0
 8004e88:	2b00      	cmp	r3, #0
 8004e8a:	d001      	beq.n	8004e90 <USB_DevInit+0x110>
  {
    ret = HAL_ERROR;
 8004e8c:	2301      	movs	r3, #1
 8004e8e:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending Device Interrupts */
  USBx_DEVICE->DIEPMSK = 0U;
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004e96:	461a      	mov	r2, r3
 8004e98:	2300      	movs	r3, #0
 8004e9a:	6113      	str	r3, [r2, #16]
  USBx_DEVICE->DOEPMSK = 0U;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004ea2:	461a      	mov	r2, r3
 8004ea4:	2300      	movs	r3, #0
 8004ea6:	6153      	str	r3, [r2, #20]
  USBx_DEVICE->DAINTMSK = 0U;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004eae:	461a      	mov	r2, r3
 8004eb0:	2300      	movs	r3, #0
 8004eb2:	61d3      	str	r3, [r2, #28]

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004eb4:	2300      	movs	r3, #0
 8004eb6:	613b      	str	r3, [r7, #16]
 8004eb8:	e043      	b.n	8004f42 <USB_DevInit+0x1c2>
  {
    if ((USBx_INEP(i)->DIEPCTL & USB_OTG_DIEPCTL_EPENA) == USB_OTG_DIEPCTL_EPENA)
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	015a      	lsls	r2, r3, #5
 8004ebe:	68fb      	ldr	r3, [r7, #12]
 8004ec0:	4413      	add	r3, r2
 8004ec2:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004ecc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004ed0:	d118      	bne.n	8004f04 <USB_DevInit+0x184>
    {
      if (i == 0U)
 8004ed2:	693b      	ldr	r3, [r7, #16]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d10a      	bne.n	8004eee <USB_DevInit+0x16e>
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_SNAK;
 8004ed8:	693b      	ldr	r3, [r7, #16]
 8004eda:	015a      	lsls	r2, r3, #5
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	4413      	add	r3, r2
 8004ee0:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004ee4:	461a      	mov	r2, r3
 8004ee6:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004eea:	6013      	str	r3, [r2, #0]
 8004eec:	e013      	b.n	8004f16 <USB_DevInit+0x196>
      }
      else
      {
        USBx_INEP(i)->DIEPCTL = USB_OTG_DIEPCTL_EPDIS | USB_OTG_DIEPCTL_SNAK;
 8004eee:	693b      	ldr	r3, [r7, #16]
 8004ef0:	015a      	lsls	r2, r3, #5
 8004ef2:	68fb      	ldr	r3, [r7, #12]
 8004ef4:	4413      	add	r3, r2
 8004ef6:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004efa:	461a      	mov	r2, r3
 8004efc:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f00:	6013      	str	r3, [r2, #0]
 8004f02:	e008      	b.n	8004f16 <USB_DevInit+0x196>
      }
    }
    else
    {
      USBx_INEP(i)->DIEPCTL = 0U;
 8004f04:	693b      	ldr	r3, [r7, #16]
 8004f06:	015a      	lsls	r2, r3, #5
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	4413      	add	r3, r2
 8004f0c:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f10:	461a      	mov	r2, r3
 8004f12:	2300      	movs	r3, #0
 8004f14:	6013      	str	r3, [r2, #0]
    }

    USBx_INEP(i)->DIEPTSIZ = 0U;
 8004f16:	693b      	ldr	r3, [r7, #16]
 8004f18:	015a      	lsls	r2, r3, #5
 8004f1a:	68fb      	ldr	r3, [r7, #12]
 8004f1c:	4413      	add	r3, r2
 8004f1e:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f22:	461a      	mov	r2, r3
 8004f24:	2300      	movs	r3, #0
 8004f26:	6113      	str	r3, [r2, #16]
    USBx_INEP(i)->DIEPINT  = 0xFB7FU;
 8004f28:	693b      	ldr	r3, [r7, #16]
 8004f2a:	015a      	lsls	r2, r3, #5
 8004f2c:	68fb      	ldr	r3, [r7, #12]
 8004f2e:	4413      	add	r3, r2
 8004f30:	f503 6310 	add.w	r3, r3, #2304	; 0x900
 8004f34:	461a      	mov	r2, r3
 8004f36:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004f3a:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f3c:	693b      	ldr	r3, [r7, #16]
 8004f3e:	3301      	adds	r3, #1
 8004f40:	613b      	str	r3, [r7, #16]
 8004f42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004f44:	693a      	ldr	r2, [r7, #16]
 8004f46:	429a      	cmp	r2, r3
 8004f48:	d3b7      	bcc.n	8004eba <USB_DevInit+0x13a>
  }

  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	613b      	str	r3, [r7, #16]
 8004f4e:	e043      	b.n	8004fd8 <USB_DevInit+0x258>
  {
    if ((USBx_OUTEP(i)->DOEPCTL & USB_OTG_DOEPCTL_EPENA) == USB_OTG_DOEPCTL_EPENA)
 8004f50:	693b      	ldr	r3, [r7, #16]
 8004f52:	015a      	lsls	r2, r3, #5
 8004f54:	68fb      	ldr	r3, [r7, #12]
 8004f56:	4413      	add	r3, r2
 8004f58:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8004f62:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8004f66:	d118      	bne.n	8004f9a <USB_DevInit+0x21a>
    {
      if (i == 0U)
 8004f68:	693b      	ldr	r3, [r7, #16]
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d10a      	bne.n	8004f84 <USB_DevInit+0x204>
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_SNAK;
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	015a      	lsls	r2, r3, #5
 8004f72:	68fb      	ldr	r3, [r7, #12]
 8004f74:	4413      	add	r3, r2
 8004f76:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f7a:	461a      	mov	r2, r3
 8004f7c:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 8004f80:	6013      	str	r3, [r2, #0]
 8004f82:	e013      	b.n	8004fac <USB_DevInit+0x22c>
      }
      else
      {
        USBx_OUTEP(i)->DOEPCTL = USB_OTG_DOEPCTL_EPDIS | USB_OTG_DOEPCTL_SNAK;
 8004f84:	693b      	ldr	r3, [r7, #16]
 8004f86:	015a      	lsls	r2, r3, #5
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	4413      	add	r3, r2
 8004f8c:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004f90:	461a      	mov	r2, r3
 8004f92:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8004f96:	6013      	str	r3, [r2, #0]
 8004f98:	e008      	b.n	8004fac <USB_DevInit+0x22c>
      }
    }
    else
    {
      USBx_OUTEP(i)->DOEPCTL = 0U;
 8004f9a:	693b      	ldr	r3, [r7, #16]
 8004f9c:	015a      	lsls	r2, r3, #5
 8004f9e:	68fb      	ldr	r3, [r7, #12]
 8004fa0:	4413      	add	r3, r2
 8004fa2:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fa6:	461a      	mov	r2, r3
 8004fa8:	2300      	movs	r3, #0
 8004faa:	6013      	str	r3, [r2, #0]
    }

    USBx_OUTEP(i)->DOEPTSIZ = 0U;
 8004fac:	693b      	ldr	r3, [r7, #16]
 8004fae:	015a      	lsls	r2, r3, #5
 8004fb0:	68fb      	ldr	r3, [r7, #12]
 8004fb2:	4413      	add	r3, r2
 8004fb4:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fb8:	461a      	mov	r2, r3
 8004fba:	2300      	movs	r3, #0
 8004fbc:	6113      	str	r3, [r2, #16]
    USBx_OUTEP(i)->DOEPINT  = 0xFB7FU;
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	015a      	lsls	r2, r3, #5
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	4413      	add	r3, r2
 8004fc6:	f503 6330 	add.w	r3, r3, #2816	; 0xb00
 8004fca:	461a      	mov	r2, r3
 8004fcc:	f64f 337f 	movw	r3, #64383	; 0xfb7f
 8004fd0:	6093      	str	r3, [r2, #8]
  for (i = 0U; i < cfg.dev_endpoints; i++)
 8004fd2:	693b      	ldr	r3, [r7, #16]
 8004fd4:	3301      	adds	r3, #1
 8004fd6:	613b      	str	r3, [r7, #16]
 8004fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004fda:	693a      	ldr	r2, [r7, #16]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d3b7      	bcc.n	8004f50 <USB_DevInit+0x1d0>
  }

  USBx_DEVICE->DIEPMSK &= ~(USB_OTG_DIEPMSK_TXFURM);
 8004fe0:	68fb      	ldr	r3, [r7, #12]
 8004fe2:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8004fe6:	691b      	ldr	r3, [r3, #16]
 8004fe8:	68fa      	ldr	r2, [r7, #12]
 8004fea:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 8004fee:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004ff2:	6113      	str	r3, [r2, #16]

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	2200      	movs	r2, #0
 8004ff8:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xBFFFFFFFU;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f06f 4280 	mvn.w	r2, #1073741824	; 0x40000000
 8005000:	615a      	str	r2, [r3, #20]

  /* Enable the common interrupts */
  if (cfg.dma_enable == 0U)
 8005002:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005004:	2b00      	cmp	r3, #0
 8005006:	d105      	bne.n	8005014 <USB_DevInit+0x294>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	699b      	ldr	r3, [r3, #24]
 800500c:	f043 0210 	orr.w	r2, r3, #16
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	619a      	str	r2, [r3, #24]
  }

  /* Enable interrupts matching to the Device mode ONLY */
  USBx->GINTMSK |= USB_OTG_GINTMSK_USBSUSPM | USB_OTG_GINTMSK_USBRST |
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	699a      	ldr	r2, [r3, #24]
 8005018:	4b0e      	ldr	r3, [pc, #56]	; (8005054 <USB_DevInit+0x2d4>)
 800501a:	4313      	orrs	r3, r2
 800501c:	687a      	ldr	r2, [r7, #4]
 800501e:	6193      	str	r3, [r2, #24]
                   USB_OTG_GINTMSK_ENUMDNEM | USB_OTG_GINTMSK_IEPINT |
                   USB_OTG_GINTMSK_OEPINT   | USB_OTG_GINTMSK_IISOIXFRM |
                   USB_OTG_GINTMSK_PXFRM_IISOOXFRM | USB_OTG_GINTMSK_WUIM;

  if (cfg.Sof_enable != 0U)
 8005020:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005022:	2b00      	cmp	r3, #0
 8005024:	d005      	beq.n	8005032 <USB_DevInit+0x2b2>
  {
    USBx->GINTMSK |= USB_OTG_GINTMSK_SOFM;
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	699b      	ldr	r3, [r3, #24]
 800502a:	f043 0208 	orr.w	r2, r3, #8
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	619a      	str	r2, [r3, #24]
  }

  if (cfg.vbus_sensing_enable == 1U)
 8005032:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005034:	2b01      	cmp	r3, #1
 8005036:	d105      	bne.n	8005044 <USB_DevInit+0x2c4>
  {
    USBx->GINTMSK |= (USB_OTG_GINTMSK_SRQIM | USB_OTG_GINTMSK_OTGINT);
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	699a      	ldr	r2, [r3, #24]
 800503c:	4b06      	ldr	r3, [pc, #24]	; (8005058 <USB_DevInit+0x2d8>)
 800503e:	4313      	orrs	r3, r2
 8005040:	687a      	ldr	r2, [r7, #4]
 8005042:	6193      	str	r3, [r2, #24]
  }

  return ret;
 8005044:	7dfb      	ldrb	r3, [r7, #23]
}
 8005046:	4618      	mov	r0, r3
 8005048:	3718      	adds	r7, #24
 800504a:	46bd      	mov	sp, r7
 800504c:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8005050:	b004      	add	sp, #16
 8005052:	4770      	bx	lr
 8005054:	803c3800 	.word	0x803c3800
 8005058:	40000004 	.word	0x40000004

0800505c <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 800505c:	b480      	push	{r7}
 800505e:	b085      	sub	sp, #20
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
 8005064:	6039      	str	r1, [r7, #0]
  uint32_t count = 0U;
 8005066:	2300      	movs	r3, #0
 8005068:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 800506a:	683b      	ldr	r3, [r7, #0]
 800506c:	019b      	lsls	r3, r3, #6
 800506e:	f043 0220 	orr.w	r2, r3, #32
 8005072:	687b      	ldr	r3, [r7, #4]
 8005074:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005076:	68fb      	ldr	r3, [r7, #12]
 8005078:	3301      	adds	r3, #1
 800507a:	60fb      	str	r3, [r7, #12]
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	4a09      	ldr	r2, [pc, #36]	; (80050a4 <USB_FlushTxFifo+0x48>)
 8005080:	4293      	cmp	r3, r2
 8005082:	d901      	bls.n	8005088 <USB_FlushTxFifo+0x2c>
    {
      return HAL_TIMEOUT;
 8005084:	2303      	movs	r3, #3
 8005086:	e006      	b.n	8005096 <USB_FlushTxFifo+0x3a>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8005088:	687b      	ldr	r3, [r7, #4]
 800508a:	691b      	ldr	r3, [r3, #16]
 800508c:	f003 0320 	and.w	r3, r3, #32
 8005090:	2b20      	cmp	r3, #32
 8005092:	d0f0      	beq.n	8005076 <USB_FlushTxFifo+0x1a>

  return HAL_OK;
 8005094:	2300      	movs	r3, #0
}
 8005096:	4618      	mov	r0, r3
 8005098:	3714      	adds	r7, #20
 800509a:	46bd      	mov	sp, r7
 800509c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050a0:	4770      	bx	lr
 80050a2:	bf00      	nop
 80050a4:	00030d40 	.word	0x00030d40

080050a8 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo : Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 80050a8:	b480      	push	{r7}
 80050aa:	b085      	sub	sp, #20
 80050ac:	af00      	add	r7, sp, #0
 80050ae:	6078      	str	r0, [r7, #4]
  uint32_t count = 0;
 80050b0:	2300      	movs	r3, #0
 80050b2:	60fb      	str	r3, [r7, #12]

  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 80050b4:	687b      	ldr	r3, [r7, #4]
 80050b6:	2210      	movs	r2, #16
 80050b8:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 80050ba:	68fb      	ldr	r3, [r7, #12]
 80050bc:	3301      	adds	r3, #1
 80050be:	60fb      	str	r3, [r7, #12]
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	4a09      	ldr	r2, [pc, #36]	; (80050e8 <USB_FlushRxFifo+0x40>)
 80050c4:	4293      	cmp	r3, r2
 80050c6:	d901      	bls.n	80050cc <USB_FlushRxFifo+0x24>
    {
      return HAL_TIMEOUT;
 80050c8:	2303      	movs	r3, #3
 80050ca:	e006      	b.n	80050da <USB_FlushRxFifo+0x32>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 80050cc:	687b      	ldr	r3, [r7, #4]
 80050ce:	691b      	ldr	r3, [r3, #16]
 80050d0:	f003 0310 	and.w	r3, r3, #16
 80050d4:	2b10      	cmp	r3, #16
 80050d6:	d0f0      	beq.n	80050ba <USB_FlushRxFifo+0x12>

  return HAL_OK;
 80050d8:	2300      	movs	r3, #0
}
 80050da:	4618      	mov	r0, r3
 80050dc:	3714      	adds	r7, #20
 80050de:	46bd      	mov	sp, r7
 80050e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050e4:	4770      	bx	lr
 80050e6:	bf00      	nop
 80050e8:	00030d40 	.word	0x00030d40

080050ec <USB_SetDevSpeed>:
  *            @arg USB_OTG_SPEED_HIGH_IN_FULL: High speed core in Full Speed mode
  *            @arg USB_OTG_SPEED_FULL: Full speed mode
  * @retval  Hal status
  */
HAL_StatusTypeDef USB_SetDevSpeed(USB_OTG_GlobalTypeDef *USBx, uint8_t speed)
{
 80050ec:	b480      	push	{r7}
 80050ee:	b085      	sub	sp, #20
 80050f0:	af00      	add	r7, sp, #0
 80050f2:	6078      	str	r0, [r7, #4]
 80050f4:	460b      	mov	r3, r1
 80050f6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80050f8:	687b      	ldr	r3, [r7, #4]
 80050fa:	60fb      	str	r3, [r7, #12]

  USBx_DEVICE->DCFG |= speed;
 80050fc:	68fb      	ldr	r3, [r7, #12]
 80050fe:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005102:	681a      	ldr	r2, [r3, #0]
 8005104:	78fb      	ldrb	r3, [r7, #3]
 8005106:	68f9      	ldr	r1, [r7, #12]
 8005108:	f501 6100 	add.w	r1, r1, #2048	; 0x800
 800510c:	4313      	orrs	r3, r2
 800510e:	600b      	str	r3, [r1, #0]
  return HAL_OK;
 8005110:	2300      	movs	r3, #0
}
 8005112:	4618      	mov	r0, r3
 8005114:	3714      	adds	r7, #20
 8005116:	46bd      	mov	sp, r7
 8005118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800511c:	4770      	bx	lr

0800511e <USB_DevDisconnect>:
  * @brief  USB_DevDisconnect : Disconnect the USB device by disabling Rpu
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevDisconnect(USB_OTG_GlobalTypeDef *USBx)
{
 800511e:	b480      	push	{r7}
 8005120:	b085      	sub	sp, #20
 8005122:	af00      	add	r7, sp, #0
 8005124:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	60fb      	str	r3, [r7, #12]

  /* In case phy is stopped, ensure to ungate and restore the phy CLK */
  USBx_PCGCCTL &= ~(USB_OTG_PCGCCTL_STOPCLK | USB_OTG_PCGCCTL_GATECLK);
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	68fa      	ldr	r2, [r7, #12]
 8005134:	f502 6260 	add.w	r2, r2, #3584	; 0xe00
 8005138:	f023 0303 	bic.w	r3, r3, #3
 800513c:	6013      	str	r3, [r2, #0]

  USBx_DEVICE->DCTL |= USB_OTG_DCTL_SDIS;
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8005144:	685b      	ldr	r3, [r3, #4]
 8005146:	68fa      	ldr	r2, [r7, #12]
 8005148:	f502 6200 	add.w	r2, r2, #2048	; 0x800
 800514c:	f043 0302 	orr.w	r3, r3, #2
 8005150:	6053      	str	r3, [r2, #4]

  return HAL_OK;
 8005152:	2300      	movs	r3, #0
}
 8005154:	4618      	mov	r0, r3
 8005156:	3714      	adds	r7, #20
 8005158:	46bd      	mov	sp, r7
 800515a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800515e:	4770      	bx	lr

08005160 <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8005160:	b480      	push	{r7}
 8005162:	b085      	sub	sp, #20
 8005164:	af00      	add	r7, sp, #0
 8005166:	6078      	str	r0, [r7, #4]
  uint32_t count = 0U;
 8005168:	2300      	movs	r3, #0
 800516a:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    if (++count > 200000U)
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	3301      	adds	r3, #1
 8005170:	60fb      	str	r3, [r7, #12]
 8005172:	68fb      	ldr	r3, [r7, #12]
 8005174:	4a13      	ldr	r2, [pc, #76]	; (80051c4 <USB_CoreReset+0x64>)
 8005176:	4293      	cmp	r3, r2
 8005178:	d901      	bls.n	800517e <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 800517a:	2303      	movs	r3, #3
 800517c:	e01b      	b.n	80051b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	691b      	ldr	r3, [r3, #16]
 8005182:	2b00      	cmp	r3, #0
 8005184:	daf2      	bge.n	800516c <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8005186:	2300      	movs	r3, #0
 8005188:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 800518a:	687b      	ldr	r3, [r7, #4]
 800518c:	691b      	ldr	r3, [r3, #16]
 800518e:	f043 0201 	orr.w	r2, r3, #1
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	611a      	str	r2, [r3, #16]

  do
  {
    if (++count > 200000U)
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	3301      	adds	r3, #1
 800519a:	60fb      	str	r3, [r7, #12]
 800519c:	68fb      	ldr	r3, [r7, #12]
 800519e:	4a09      	ldr	r2, [pc, #36]	; (80051c4 <USB_CoreReset+0x64>)
 80051a0:	4293      	cmp	r3, r2
 80051a2:	d901      	bls.n	80051a8 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 80051a4:	2303      	movs	r3, #3
 80051a6:	e006      	b.n	80051b6 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 80051a8:	687b      	ldr	r3, [r7, #4]
 80051aa:	691b      	ldr	r3, [r3, #16]
 80051ac:	f003 0301 	and.w	r3, r3, #1
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d0f0      	beq.n	8005196 <USB_CoreReset+0x36>

  return HAL_OK;
 80051b4:	2300      	movs	r3, #0
}
 80051b6:	4618      	mov	r0, r3
 80051b8:	3714      	adds	r7, #20
 80051ba:	46bd      	mov	sp, r7
 80051bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c0:	4770      	bx	lr
 80051c2:	bf00      	nop
 80051c4:	00030d40 	.word	0x00030d40

080051c8 <__libc_init_array>:
 80051c8:	b570      	push	{r4, r5, r6, lr}
 80051ca:	4d0d      	ldr	r5, [pc, #52]	; (8005200 <__libc_init_array+0x38>)
 80051cc:	4c0d      	ldr	r4, [pc, #52]	; (8005204 <__libc_init_array+0x3c>)
 80051ce:	1b64      	subs	r4, r4, r5
 80051d0:	10a4      	asrs	r4, r4, #2
 80051d2:	2600      	movs	r6, #0
 80051d4:	42a6      	cmp	r6, r4
 80051d6:	d109      	bne.n	80051ec <__libc_init_array+0x24>
 80051d8:	4d0b      	ldr	r5, [pc, #44]	; (8005208 <__libc_init_array+0x40>)
 80051da:	4c0c      	ldr	r4, [pc, #48]	; (800520c <__libc_init_array+0x44>)
 80051dc:	f001 f856 	bl	800628c <_init>
 80051e0:	1b64      	subs	r4, r4, r5
 80051e2:	10a4      	asrs	r4, r4, #2
 80051e4:	2600      	movs	r6, #0
 80051e6:	42a6      	cmp	r6, r4
 80051e8:	d105      	bne.n	80051f6 <__libc_init_array+0x2e>
 80051ea:	bd70      	pop	{r4, r5, r6, pc}
 80051ec:	f855 3b04 	ldr.w	r3, [r5], #4
 80051f0:	4798      	blx	r3
 80051f2:	3601      	adds	r6, #1
 80051f4:	e7ee      	b.n	80051d4 <__libc_init_array+0xc>
 80051f6:	f855 3b04 	ldr.w	r3, [r5], #4
 80051fa:	4798      	blx	r3
 80051fc:	3601      	adds	r6, #1
 80051fe:	e7f2      	b.n	80051e6 <__libc_init_array+0x1e>
 8005200:	080064a8 	.word	0x080064a8
 8005204:	080064a8 	.word	0x080064a8
 8005208:	080064a8 	.word	0x080064a8
 800520c:	080064ac 	.word	0x080064ac

08005210 <memset>:
 8005210:	4402      	add	r2, r0
 8005212:	4603      	mov	r3, r0
 8005214:	4293      	cmp	r3, r2
 8005216:	d100      	bne.n	800521a <memset+0xa>
 8005218:	4770      	bx	lr
 800521a:	f803 1b01 	strb.w	r1, [r3], #1
 800521e:	e7f9      	b.n	8005214 <memset+0x4>

08005220 <sin>:
 8005220:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8005222:	ec53 2b10 	vmov	r2, r3, d0
 8005226:	4826      	ldr	r0, [pc, #152]	; (80052c0 <sin+0xa0>)
 8005228:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800522c:	4281      	cmp	r1, r0
 800522e:	dc07      	bgt.n	8005240 <sin+0x20>
 8005230:	ed9f 1b21 	vldr	d1, [pc, #132]	; 80052b8 <sin+0x98>
 8005234:	2000      	movs	r0, #0
 8005236:	f000 fe5b 	bl	8005ef0 <__kernel_sin>
 800523a:	ec51 0b10 	vmov	r0, r1, d0
 800523e:	e007      	b.n	8005250 <sin+0x30>
 8005240:	4820      	ldr	r0, [pc, #128]	; (80052c4 <sin+0xa4>)
 8005242:	4281      	cmp	r1, r0
 8005244:	dd09      	ble.n	800525a <sin+0x3a>
 8005246:	ee10 0a10 	vmov	r0, s0
 800524a:	4619      	mov	r1, r3
 800524c:	f7fa ffe0 	bl	8000210 <__aeabi_dsub>
 8005250:	ec41 0b10 	vmov	d0, r0, r1
 8005254:	b005      	add	sp, #20
 8005256:	f85d fb04 	ldr.w	pc, [sp], #4
 800525a:	4668      	mov	r0, sp
 800525c:	f000 f834 	bl	80052c8 <__ieee754_rem_pio2>
 8005260:	f000 0003 	and.w	r0, r0, #3
 8005264:	2801      	cmp	r0, #1
 8005266:	d008      	beq.n	800527a <sin+0x5a>
 8005268:	2802      	cmp	r0, #2
 800526a:	d00d      	beq.n	8005288 <sin+0x68>
 800526c:	b9d0      	cbnz	r0, 80052a4 <sin+0x84>
 800526e:	ed9d 1b02 	vldr	d1, [sp, #8]
 8005272:	ed9d 0b00 	vldr	d0, [sp]
 8005276:	2001      	movs	r0, #1
 8005278:	e7dd      	b.n	8005236 <sin+0x16>
 800527a:	ed9d 1b02 	vldr	d1, [sp, #8]
 800527e:	ed9d 0b00 	vldr	d0, [sp]
 8005282:	f000 fa2d 	bl	80056e0 <__kernel_cos>
 8005286:	e7d8      	b.n	800523a <sin+0x1a>
 8005288:	ed9d 1b02 	vldr	d1, [sp, #8]
 800528c:	ed9d 0b00 	vldr	d0, [sp]
 8005290:	2001      	movs	r0, #1
 8005292:	f000 fe2d 	bl	8005ef0 <__kernel_sin>
 8005296:	ec53 2b10 	vmov	r2, r3, d0
 800529a:	ee10 0a10 	vmov	r0, s0
 800529e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80052a2:	e7d5      	b.n	8005250 <sin+0x30>
 80052a4:	ed9d 1b02 	vldr	d1, [sp, #8]
 80052a8:	ed9d 0b00 	vldr	d0, [sp]
 80052ac:	f000 fa18 	bl	80056e0 <__kernel_cos>
 80052b0:	e7f1      	b.n	8005296 <sin+0x76>
 80052b2:	bf00      	nop
 80052b4:	f3af 8000 	nop.w
	...
 80052c0:	3fe921fb 	.word	0x3fe921fb
 80052c4:	7fefffff 	.word	0x7fefffff

080052c8 <__ieee754_rem_pio2>:
 80052c8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052cc:	ed2d 8b02 	vpush	{d8}
 80052d0:	ec55 4b10 	vmov	r4, r5, d0
 80052d4:	4bca      	ldr	r3, [pc, #808]	; (8005600 <__ieee754_rem_pio2+0x338>)
 80052d6:	b08b      	sub	sp, #44	; 0x2c
 80052d8:	f025 4800 	bic.w	r8, r5, #2147483648	; 0x80000000
 80052dc:	4598      	cmp	r8, r3
 80052de:	4682      	mov	sl, r0
 80052e0:	9502      	str	r5, [sp, #8]
 80052e2:	dc08      	bgt.n	80052f6 <__ieee754_rem_pio2+0x2e>
 80052e4:	2200      	movs	r2, #0
 80052e6:	2300      	movs	r3, #0
 80052e8:	ed80 0b00 	vstr	d0, [r0]
 80052ec:	e9c0 2302 	strd	r2, r3, [r0, #8]
 80052f0:	f04f 0b00 	mov.w	fp, #0
 80052f4:	e028      	b.n	8005348 <__ieee754_rem_pio2+0x80>
 80052f6:	4bc3      	ldr	r3, [pc, #780]	; (8005604 <__ieee754_rem_pio2+0x33c>)
 80052f8:	4598      	cmp	r8, r3
 80052fa:	dc78      	bgt.n	80053ee <__ieee754_rem_pio2+0x126>
 80052fc:	9b02      	ldr	r3, [sp, #8]
 80052fe:	4ec2      	ldr	r6, [pc, #776]	; (8005608 <__ieee754_rem_pio2+0x340>)
 8005300:	2b00      	cmp	r3, #0
 8005302:	ee10 0a10 	vmov	r0, s0
 8005306:	a3b0      	add	r3, pc, #704	; (adr r3, 80055c8 <__ieee754_rem_pio2+0x300>)
 8005308:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530c:	4629      	mov	r1, r5
 800530e:	dd39      	ble.n	8005384 <__ieee754_rem_pio2+0xbc>
 8005310:	f7fa ff7e 	bl	8000210 <__aeabi_dsub>
 8005314:	45b0      	cmp	r8, r6
 8005316:	4604      	mov	r4, r0
 8005318:	460d      	mov	r5, r1
 800531a:	d01b      	beq.n	8005354 <__ieee754_rem_pio2+0x8c>
 800531c:	a3ac      	add	r3, pc, #688	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x308>)
 800531e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005322:	f7fa ff75 	bl	8000210 <__aeabi_dsub>
 8005326:	4602      	mov	r2, r0
 8005328:	460b      	mov	r3, r1
 800532a:	e9ca 2300 	strd	r2, r3, [sl]
 800532e:	4620      	mov	r0, r4
 8005330:	4629      	mov	r1, r5
 8005332:	f7fa ff6d 	bl	8000210 <__aeabi_dsub>
 8005336:	a3a6      	add	r3, pc, #664	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x308>)
 8005338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800533c:	f7fa ff68 	bl	8000210 <__aeabi_dsub>
 8005340:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005344:	f04f 0b01 	mov.w	fp, #1
 8005348:	4658      	mov	r0, fp
 800534a:	b00b      	add	sp, #44	; 0x2c
 800534c:	ecbd 8b02 	vpop	{d8}
 8005350:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005354:	a3a0      	add	r3, pc, #640	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x310>)
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f7fa ff59 	bl	8000210 <__aeabi_dsub>
 800535e:	a3a0      	add	r3, pc, #640	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x318>)
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	4604      	mov	r4, r0
 8005366:	460d      	mov	r5, r1
 8005368:	f7fa ff52 	bl	8000210 <__aeabi_dsub>
 800536c:	4602      	mov	r2, r0
 800536e:	460b      	mov	r3, r1
 8005370:	e9ca 2300 	strd	r2, r3, [sl]
 8005374:	4620      	mov	r0, r4
 8005376:	4629      	mov	r1, r5
 8005378:	f7fa ff4a 	bl	8000210 <__aeabi_dsub>
 800537c:	a398      	add	r3, pc, #608	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x318>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	e7db      	b.n	800533c <__ieee754_rem_pio2+0x74>
 8005384:	f7fa ff46 	bl	8000214 <__adddf3>
 8005388:	45b0      	cmp	r8, r6
 800538a:	4604      	mov	r4, r0
 800538c:	460d      	mov	r5, r1
 800538e:	d016      	beq.n	80053be <__ieee754_rem_pio2+0xf6>
 8005390:	a38f      	add	r3, pc, #572	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x308>)
 8005392:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005396:	f7fa ff3d 	bl	8000214 <__adddf3>
 800539a:	4602      	mov	r2, r0
 800539c:	460b      	mov	r3, r1
 800539e:	e9ca 2300 	strd	r2, r3, [sl]
 80053a2:	4620      	mov	r0, r4
 80053a4:	4629      	mov	r1, r5
 80053a6:	f7fa ff33 	bl	8000210 <__aeabi_dsub>
 80053aa:	a389      	add	r3, pc, #548	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x308>)
 80053ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053b0:	f7fa ff30 	bl	8000214 <__adddf3>
 80053b4:	f04f 3bff 	mov.w	fp, #4294967295
 80053b8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80053bc:	e7c4      	b.n	8005348 <__ieee754_rem_pio2+0x80>
 80053be:	a386      	add	r3, pc, #536	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x310>)
 80053c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c4:	f7fa ff26 	bl	8000214 <__adddf3>
 80053c8:	a385      	add	r3, pc, #532	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x318>)
 80053ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ce:	4604      	mov	r4, r0
 80053d0:	460d      	mov	r5, r1
 80053d2:	f7fa ff1f 	bl	8000214 <__adddf3>
 80053d6:	4602      	mov	r2, r0
 80053d8:	460b      	mov	r3, r1
 80053da:	e9ca 2300 	strd	r2, r3, [sl]
 80053de:	4620      	mov	r0, r4
 80053e0:	4629      	mov	r1, r5
 80053e2:	f7fa ff15 	bl	8000210 <__aeabi_dsub>
 80053e6:	a37e      	add	r3, pc, #504	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x318>)
 80053e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ec:	e7e0      	b.n	80053b0 <__ieee754_rem_pio2+0xe8>
 80053ee:	4b87      	ldr	r3, [pc, #540]	; (800560c <__ieee754_rem_pio2+0x344>)
 80053f0:	4598      	cmp	r8, r3
 80053f2:	f300 80d9 	bgt.w	80055a8 <__ieee754_rem_pio2+0x2e0>
 80053f6:	f000 fe39 	bl	800606c <fabs>
 80053fa:	ec55 4b10 	vmov	r4, r5, d0
 80053fe:	ee10 0a10 	vmov	r0, s0
 8005402:	a379      	add	r3, pc, #484	; (adr r3, 80055e8 <__ieee754_rem_pio2+0x320>)
 8005404:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005408:	4629      	mov	r1, r5
 800540a:	f7fb f8b9 	bl	8000580 <__aeabi_dmul>
 800540e:	4b80      	ldr	r3, [pc, #512]	; (8005610 <__ieee754_rem_pio2+0x348>)
 8005410:	2200      	movs	r2, #0
 8005412:	f7fa feff 	bl	8000214 <__adddf3>
 8005416:	f7fb fb4d 	bl	8000ab4 <__aeabi_d2iz>
 800541a:	4683      	mov	fp, r0
 800541c:	f7fb f846 	bl	80004ac <__aeabi_i2d>
 8005420:	4602      	mov	r2, r0
 8005422:	460b      	mov	r3, r1
 8005424:	ec43 2b18 	vmov	d8, r2, r3
 8005428:	a367      	add	r3, pc, #412	; (adr r3, 80055c8 <__ieee754_rem_pio2+0x300>)
 800542a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542e:	f7fb f8a7 	bl	8000580 <__aeabi_dmul>
 8005432:	4602      	mov	r2, r0
 8005434:	460b      	mov	r3, r1
 8005436:	4620      	mov	r0, r4
 8005438:	4629      	mov	r1, r5
 800543a:	f7fa fee9 	bl	8000210 <__aeabi_dsub>
 800543e:	a364      	add	r3, pc, #400	; (adr r3, 80055d0 <__ieee754_rem_pio2+0x308>)
 8005440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005444:	4606      	mov	r6, r0
 8005446:	460f      	mov	r7, r1
 8005448:	ec51 0b18 	vmov	r0, r1, d8
 800544c:	f7fb f898 	bl	8000580 <__aeabi_dmul>
 8005450:	f1bb 0f1f 	cmp.w	fp, #31
 8005454:	4604      	mov	r4, r0
 8005456:	460d      	mov	r5, r1
 8005458:	dc0d      	bgt.n	8005476 <__ieee754_rem_pio2+0x1ae>
 800545a:	4b6e      	ldr	r3, [pc, #440]	; (8005614 <__ieee754_rem_pio2+0x34c>)
 800545c:	f10b 32ff 	add.w	r2, fp, #4294967295
 8005460:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005464:	4543      	cmp	r3, r8
 8005466:	d006      	beq.n	8005476 <__ieee754_rem_pio2+0x1ae>
 8005468:	4622      	mov	r2, r4
 800546a:	462b      	mov	r3, r5
 800546c:	4630      	mov	r0, r6
 800546e:	4639      	mov	r1, r7
 8005470:	f7fa fece 	bl	8000210 <__aeabi_dsub>
 8005474:	e00f      	b.n	8005496 <__ieee754_rem_pio2+0x1ce>
 8005476:	462b      	mov	r3, r5
 8005478:	4622      	mov	r2, r4
 800547a:	4630      	mov	r0, r6
 800547c:	4639      	mov	r1, r7
 800547e:	f7fa fec7 	bl	8000210 <__aeabi_dsub>
 8005482:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005486:	9303      	str	r3, [sp, #12]
 8005488:	f3c1 530a 	ubfx	r3, r1, #20, #11
 800548c:	ebc3 5818 	rsb	r8, r3, r8, lsr #20
 8005490:	f1b8 0f10 	cmp.w	r8, #16
 8005494:	dc02      	bgt.n	800549c <__ieee754_rem_pio2+0x1d4>
 8005496:	e9ca 0100 	strd	r0, r1, [sl]
 800549a:	e039      	b.n	8005510 <__ieee754_rem_pio2+0x248>
 800549c:	a34e      	add	r3, pc, #312	; (adr r3, 80055d8 <__ieee754_rem_pio2+0x310>)
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	ec51 0b18 	vmov	r0, r1, d8
 80054a6:	f7fb f86b 	bl	8000580 <__aeabi_dmul>
 80054aa:	4604      	mov	r4, r0
 80054ac:	460d      	mov	r5, r1
 80054ae:	4602      	mov	r2, r0
 80054b0:	460b      	mov	r3, r1
 80054b2:	4630      	mov	r0, r6
 80054b4:	4639      	mov	r1, r7
 80054b6:	f7fa feab 	bl	8000210 <__aeabi_dsub>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4680      	mov	r8, r0
 80054c0:	4689      	mov	r9, r1
 80054c2:	4630      	mov	r0, r6
 80054c4:	4639      	mov	r1, r7
 80054c6:	f7fa fea3 	bl	8000210 <__aeabi_dsub>
 80054ca:	4622      	mov	r2, r4
 80054cc:	462b      	mov	r3, r5
 80054ce:	f7fa fe9f 	bl	8000210 <__aeabi_dsub>
 80054d2:	a343      	add	r3, pc, #268	; (adr r3, 80055e0 <__ieee754_rem_pio2+0x318>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	4604      	mov	r4, r0
 80054da:	460d      	mov	r5, r1
 80054dc:	ec51 0b18 	vmov	r0, r1, d8
 80054e0:	f7fb f84e 	bl	8000580 <__aeabi_dmul>
 80054e4:	4622      	mov	r2, r4
 80054e6:	462b      	mov	r3, r5
 80054e8:	f7fa fe92 	bl	8000210 <__aeabi_dsub>
 80054ec:	4602      	mov	r2, r0
 80054ee:	460b      	mov	r3, r1
 80054f0:	4604      	mov	r4, r0
 80054f2:	460d      	mov	r5, r1
 80054f4:	4640      	mov	r0, r8
 80054f6:	4649      	mov	r1, r9
 80054f8:	f7fa fe8a 	bl	8000210 <__aeabi_dsub>
 80054fc:	9a03      	ldr	r2, [sp, #12]
 80054fe:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005502:	1ad3      	subs	r3, r2, r3
 8005504:	2b31      	cmp	r3, #49	; 0x31
 8005506:	dc24      	bgt.n	8005552 <__ieee754_rem_pio2+0x28a>
 8005508:	e9ca 0100 	strd	r0, r1, [sl]
 800550c:	4646      	mov	r6, r8
 800550e:	464f      	mov	r7, r9
 8005510:	e9da 8900 	ldrd	r8, r9, [sl]
 8005514:	4630      	mov	r0, r6
 8005516:	4642      	mov	r2, r8
 8005518:	464b      	mov	r3, r9
 800551a:	4639      	mov	r1, r7
 800551c:	f7fa fe78 	bl	8000210 <__aeabi_dsub>
 8005520:	462b      	mov	r3, r5
 8005522:	4622      	mov	r2, r4
 8005524:	f7fa fe74 	bl	8000210 <__aeabi_dsub>
 8005528:	9b02      	ldr	r3, [sp, #8]
 800552a:	2b00      	cmp	r3, #0
 800552c:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005530:	f6bf af0a 	bge.w	8005348 <__ieee754_rem_pio2+0x80>
 8005534:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8005538:	f8ca 3004 	str.w	r3, [sl, #4]
 800553c:	f8ca 8000 	str.w	r8, [sl]
 8005540:	f8ca 0008 	str.w	r0, [sl, #8]
 8005544:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005548:	f8ca 300c 	str.w	r3, [sl, #12]
 800554c:	f1cb 0b00 	rsb	fp, fp, #0
 8005550:	e6fa      	b.n	8005348 <__ieee754_rem_pio2+0x80>
 8005552:	a327      	add	r3, pc, #156	; (adr r3, 80055f0 <__ieee754_rem_pio2+0x328>)
 8005554:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005558:	ec51 0b18 	vmov	r0, r1, d8
 800555c:	f7fb f810 	bl	8000580 <__aeabi_dmul>
 8005560:	4604      	mov	r4, r0
 8005562:	460d      	mov	r5, r1
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4640      	mov	r0, r8
 800556a:	4649      	mov	r1, r9
 800556c:	f7fa fe50 	bl	8000210 <__aeabi_dsub>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4606      	mov	r6, r0
 8005576:	460f      	mov	r7, r1
 8005578:	4640      	mov	r0, r8
 800557a:	4649      	mov	r1, r9
 800557c:	f7fa fe48 	bl	8000210 <__aeabi_dsub>
 8005580:	4622      	mov	r2, r4
 8005582:	462b      	mov	r3, r5
 8005584:	f7fa fe44 	bl	8000210 <__aeabi_dsub>
 8005588:	a31b      	add	r3, pc, #108	; (adr r3, 80055f8 <__ieee754_rem_pio2+0x330>)
 800558a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800558e:	4604      	mov	r4, r0
 8005590:	460d      	mov	r5, r1
 8005592:	ec51 0b18 	vmov	r0, r1, d8
 8005596:	f7fa fff3 	bl	8000580 <__aeabi_dmul>
 800559a:	4622      	mov	r2, r4
 800559c:	462b      	mov	r3, r5
 800559e:	f7fa fe37 	bl	8000210 <__aeabi_dsub>
 80055a2:	4604      	mov	r4, r0
 80055a4:	460d      	mov	r5, r1
 80055a6:	e75f      	b.n	8005468 <__ieee754_rem_pio2+0x1a0>
 80055a8:	4b1b      	ldr	r3, [pc, #108]	; (8005618 <__ieee754_rem_pio2+0x350>)
 80055aa:	4598      	cmp	r8, r3
 80055ac:	dd36      	ble.n	800561c <__ieee754_rem_pio2+0x354>
 80055ae:	ee10 2a10 	vmov	r2, s0
 80055b2:	462b      	mov	r3, r5
 80055b4:	4620      	mov	r0, r4
 80055b6:	4629      	mov	r1, r5
 80055b8:	f7fa fe2a 	bl	8000210 <__aeabi_dsub>
 80055bc:	e9ca 0102 	strd	r0, r1, [sl, #8]
 80055c0:	e9ca 0100 	strd	r0, r1, [sl]
 80055c4:	e694      	b.n	80052f0 <__ieee754_rem_pio2+0x28>
 80055c6:	bf00      	nop
 80055c8:	54400000 	.word	0x54400000
 80055cc:	3ff921fb 	.word	0x3ff921fb
 80055d0:	1a626331 	.word	0x1a626331
 80055d4:	3dd0b461 	.word	0x3dd0b461
 80055d8:	1a600000 	.word	0x1a600000
 80055dc:	3dd0b461 	.word	0x3dd0b461
 80055e0:	2e037073 	.word	0x2e037073
 80055e4:	3ba3198a 	.word	0x3ba3198a
 80055e8:	6dc9c883 	.word	0x6dc9c883
 80055ec:	3fe45f30 	.word	0x3fe45f30
 80055f0:	2e000000 	.word	0x2e000000
 80055f4:	3ba3198a 	.word	0x3ba3198a
 80055f8:	252049c1 	.word	0x252049c1
 80055fc:	397b839a 	.word	0x397b839a
 8005600:	3fe921fb 	.word	0x3fe921fb
 8005604:	4002d97b 	.word	0x4002d97b
 8005608:	3ff921fb 	.word	0x3ff921fb
 800560c:	413921fb 	.word	0x413921fb
 8005610:	3fe00000 	.word	0x3fe00000
 8005614:	080062c8 	.word	0x080062c8
 8005618:	7fefffff 	.word	0x7fefffff
 800561c:	ea4f 5428 	mov.w	r4, r8, asr #20
 8005620:	f2a4 4416 	subw	r4, r4, #1046	; 0x416
 8005624:	ee10 0a10 	vmov	r0, s0
 8005628:	eba8 5104 	sub.w	r1, r8, r4, lsl #20
 800562c:	ee10 6a10 	vmov	r6, s0
 8005630:	460f      	mov	r7, r1
 8005632:	f7fb fa3f 	bl	8000ab4 <__aeabi_d2iz>
 8005636:	f7fa ff39 	bl	80004ac <__aeabi_i2d>
 800563a:	4602      	mov	r2, r0
 800563c:	460b      	mov	r3, r1
 800563e:	4630      	mov	r0, r6
 8005640:	4639      	mov	r1, r7
 8005642:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005646:	f7fa fde3 	bl	8000210 <__aeabi_dsub>
 800564a:	4b22      	ldr	r3, [pc, #136]	; (80056d4 <__ieee754_rem_pio2+0x40c>)
 800564c:	2200      	movs	r2, #0
 800564e:	f7fa ff97 	bl	8000580 <__aeabi_dmul>
 8005652:	460f      	mov	r7, r1
 8005654:	4606      	mov	r6, r0
 8005656:	f7fb fa2d 	bl	8000ab4 <__aeabi_d2iz>
 800565a:	f7fa ff27 	bl	80004ac <__aeabi_i2d>
 800565e:	4602      	mov	r2, r0
 8005660:	460b      	mov	r3, r1
 8005662:	4630      	mov	r0, r6
 8005664:	4639      	mov	r1, r7
 8005666:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800566a:	f7fa fdd1 	bl	8000210 <__aeabi_dsub>
 800566e:	4b19      	ldr	r3, [pc, #100]	; (80056d4 <__ieee754_rem_pio2+0x40c>)
 8005670:	2200      	movs	r2, #0
 8005672:	f7fa ff85 	bl	8000580 <__aeabi_dmul>
 8005676:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800567a:	ad04      	add	r5, sp, #16
 800567c:	f04f 0803 	mov.w	r8, #3
 8005680:	46a9      	mov	r9, r5
 8005682:	2600      	movs	r6, #0
 8005684:	2700      	movs	r7, #0
 8005686:	4632      	mov	r2, r6
 8005688:	463b      	mov	r3, r7
 800568a:	e9d5 0104 	ldrd	r0, r1, [r5, #16]
 800568e:	46c3      	mov	fp, r8
 8005690:	3d08      	subs	r5, #8
 8005692:	f108 38ff 	add.w	r8, r8, #4294967295
 8005696:	f7fb f9db 	bl	8000a50 <__aeabi_dcmpeq>
 800569a:	2800      	cmp	r0, #0
 800569c:	d1f3      	bne.n	8005686 <__ieee754_rem_pio2+0x3be>
 800569e:	4b0e      	ldr	r3, [pc, #56]	; (80056d8 <__ieee754_rem_pio2+0x410>)
 80056a0:	9301      	str	r3, [sp, #4]
 80056a2:	2302      	movs	r3, #2
 80056a4:	9300      	str	r3, [sp, #0]
 80056a6:	4622      	mov	r2, r4
 80056a8:	465b      	mov	r3, fp
 80056aa:	4651      	mov	r1, sl
 80056ac:	4648      	mov	r0, r9
 80056ae:	f000 f8df 	bl	8005870 <__kernel_rem_pio2>
 80056b2:	9b02      	ldr	r3, [sp, #8]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	4683      	mov	fp, r0
 80056b8:	f6bf ae46 	bge.w	8005348 <__ieee754_rem_pio2+0x80>
 80056bc:	f8da 3004 	ldr.w	r3, [sl, #4]
 80056c0:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80056c4:	f8ca 3004 	str.w	r3, [sl, #4]
 80056c8:	f8da 300c 	ldr.w	r3, [sl, #12]
 80056cc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80056d0:	e73a      	b.n	8005548 <__ieee754_rem_pio2+0x280>
 80056d2:	bf00      	nop
 80056d4:	41700000 	.word	0x41700000
 80056d8:	08006348 	.word	0x08006348
 80056dc:	00000000 	.word	0x00000000

080056e0 <__kernel_cos>:
 80056e0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056e4:	ec57 6b10 	vmov	r6, r7, d0
 80056e8:	f027 4800 	bic.w	r8, r7, #2147483648	; 0x80000000
 80056ec:	f1b8 5f79 	cmp.w	r8, #1044381696	; 0x3e400000
 80056f0:	ed8d 1b00 	vstr	d1, [sp]
 80056f4:	da07      	bge.n	8005706 <__kernel_cos+0x26>
 80056f6:	ee10 0a10 	vmov	r0, s0
 80056fa:	4639      	mov	r1, r7
 80056fc:	f7fb f9da 	bl	8000ab4 <__aeabi_d2iz>
 8005700:	2800      	cmp	r0, #0
 8005702:	f000 8088 	beq.w	8005816 <__kernel_cos+0x136>
 8005706:	4632      	mov	r2, r6
 8005708:	463b      	mov	r3, r7
 800570a:	4630      	mov	r0, r6
 800570c:	4639      	mov	r1, r7
 800570e:	f7fa ff37 	bl	8000580 <__aeabi_dmul>
 8005712:	4b51      	ldr	r3, [pc, #324]	; (8005858 <__kernel_cos+0x178>)
 8005714:	2200      	movs	r2, #0
 8005716:	4604      	mov	r4, r0
 8005718:	460d      	mov	r5, r1
 800571a:	f7fa ff31 	bl	8000580 <__aeabi_dmul>
 800571e:	a340      	add	r3, pc, #256	; (adr r3, 8005820 <__kernel_cos+0x140>)
 8005720:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005724:	4682      	mov	sl, r0
 8005726:	468b      	mov	fp, r1
 8005728:	4620      	mov	r0, r4
 800572a:	4629      	mov	r1, r5
 800572c:	f7fa ff28 	bl	8000580 <__aeabi_dmul>
 8005730:	a33d      	add	r3, pc, #244	; (adr r3, 8005828 <__kernel_cos+0x148>)
 8005732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005736:	f7fa fd6d 	bl	8000214 <__adddf3>
 800573a:	4622      	mov	r2, r4
 800573c:	462b      	mov	r3, r5
 800573e:	f7fa ff1f 	bl	8000580 <__aeabi_dmul>
 8005742:	a33b      	add	r3, pc, #236	; (adr r3, 8005830 <__kernel_cos+0x150>)
 8005744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005748:	f7fa fd62 	bl	8000210 <__aeabi_dsub>
 800574c:	4622      	mov	r2, r4
 800574e:	462b      	mov	r3, r5
 8005750:	f7fa ff16 	bl	8000580 <__aeabi_dmul>
 8005754:	a338      	add	r3, pc, #224	; (adr r3, 8005838 <__kernel_cos+0x158>)
 8005756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800575a:	f7fa fd5b 	bl	8000214 <__adddf3>
 800575e:	4622      	mov	r2, r4
 8005760:	462b      	mov	r3, r5
 8005762:	f7fa ff0d 	bl	8000580 <__aeabi_dmul>
 8005766:	a336      	add	r3, pc, #216	; (adr r3, 8005840 <__kernel_cos+0x160>)
 8005768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800576c:	f7fa fd50 	bl	8000210 <__aeabi_dsub>
 8005770:	4622      	mov	r2, r4
 8005772:	462b      	mov	r3, r5
 8005774:	f7fa ff04 	bl	8000580 <__aeabi_dmul>
 8005778:	a333      	add	r3, pc, #204	; (adr r3, 8005848 <__kernel_cos+0x168>)
 800577a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800577e:	f7fa fd49 	bl	8000214 <__adddf3>
 8005782:	4622      	mov	r2, r4
 8005784:	462b      	mov	r3, r5
 8005786:	f7fa fefb 	bl	8000580 <__aeabi_dmul>
 800578a:	4622      	mov	r2, r4
 800578c:	462b      	mov	r3, r5
 800578e:	f7fa fef7 	bl	8000580 <__aeabi_dmul>
 8005792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005796:	4604      	mov	r4, r0
 8005798:	460d      	mov	r5, r1
 800579a:	4630      	mov	r0, r6
 800579c:	4639      	mov	r1, r7
 800579e:	f7fa feef 	bl	8000580 <__aeabi_dmul>
 80057a2:	460b      	mov	r3, r1
 80057a4:	4602      	mov	r2, r0
 80057a6:	4629      	mov	r1, r5
 80057a8:	4620      	mov	r0, r4
 80057aa:	f7fa fd31 	bl	8000210 <__aeabi_dsub>
 80057ae:	4b2b      	ldr	r3, [pc, #172]	; (800585c <__kernel_cos+0x17c>)
 80057b0:	4598      	cmp	r8, r3
 80057b2:	4606      	mov	r6, r0
 80057b4:	460f      	mov	r7, r1
 80057b6:	dc10      	bgt.n	80057da <__kernel_cos+0xfa>
 80057b8:	4602      	mov	r2, r0
 80057ba:	460b      	mov	r3, r1
 80057bc:	4650      	mov	r0, sl
 80057be:	4659      	mov	r1, fp
 80057c0:	f7fa fd26 	bl	8000210 <__aeabi_dsub>
 80057c4:	460b      	mov	r3, r1
 80057c6:	4926      	ldr	r1, [pc, #152]	; (8005860 <__kernel_cos+0x180>)
 80057c8:	4602      	mov	r2, r0
 80057ca:	2000      	movs	r0, #0
 80057cc:	f7fa fd20 	bl	8000210 <__aeabi_dsub>
 80057d0:	ec41 0b10 	vmov	d0, r0, r1
 80057d4:	b003      	add	sp, #12
 80057d6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80057da:	4b22      	ldr	r3, [pc, #136]	; (8005864 <__kernel_cos+0x184>)
 80057dc:	4920      	ldr	r1, [pc, #128]	; (8005860 <__kernel_cos+0x180>)
 80057de:	4598      	cmp	r8, r3
 80057e0:	bfcc      	ite	gt
 80057e2:	4d21      	ldrgt	r5, [pc, #132]	; (8005868 <__kernel_cos+0x188>)
 80057e4:	f5a8 1500 	suble.w	r5, r8, #2097152	; 0x200000
 80057e8:	2400      	movs	r4, #0
 80057ea:	4622      	mov	r2, r4
 80057ec:	462b      	mov	r3, r5
 80057ee:	2000      	movs	r0, #0
 80057f0:	f7fa fd0e 	bl	8000210 <__aeabi_dsub>
 80057f4:	4622      	mov	r2, r4
 80057f6:	4680      	mov	r8, r0
 80057f8:	4689      	mov	r9, r1
 80057fa:	462b      	mov	r3, r5
 80057fc:	4650      	mov	r0, sl
 80057fe:	4659      	mov	r1, fp
 8005800:	f7fa fd06 	bl	8000210 <__aeabi_dsub>
 8005804:	4632      	mov	r2, r6
 8005806:	463b      	mov	r3, r7
 8005808:	f7fa fd02 	bl	8000210 <__aeabi_dsub>
 800580c:	4602      	mov	r2, r0
 800580e:	460b      	mov	r3, r1
 8005810:	4640      	mov	r0, r8
 8005812:	4649      	mov	r1, r9
 8005814:	e7da      	b.n	80057cc <__kernel_cos+0xec>
 8005816:	ed9f 0b0e 	vldr	d0, [pc, #56]	; 8005850 <__kernel_cos+0x170>
 800581a:	e7db      	b.n	80057d4 <__kernel_cos+0xf4>
 800581c:	f3af 8000 	nop.w
 8005820:	be8838d4 	.word	0xbe8838d4
 8005824:	bda8fae9 	.word	0xbda8fae9
 8005828:	bdb4b1c4 	.word	0xbdb4b1c4
 800582c:	3e21ee9e 	.word	0x3e21ee9e
 8005830:	809c52ad 	.word	0x809c52ad
 8005834:	3e927e4f 	.word	0x3e927e4f
 8005838:	19cb1590 	.word	0x19cb1590
 800583c:	3efa01a0 	.word	0x3efa01a0
 8005840:	16c15177 	.word	0x16c15177
 8005844:	3f56c16c 	.word	0x3f56c16c
 8005848:	5555554c 	.word	0x5555554c
 800584c:	3fa55555 	.word	0x3fa55555
 8005850:	00000000 	.word	0x00000000
 8005854:	3ff00000 	.word	0x3ff00000
 8005858:	3fe00000 	.word	0x3fe00000
 800585c:	3fd33332 	.word	0x3fd33332
 8005860:	3ff00000 	.word	0x3ff00000
 8005864:	3fe90000 	.word	0x3fe90000
 8005868:	3fd20000 	.word	0x3fd20000
 800586c:	00000000 	.word	0x00000000

08005870 <__kernel_rem_pio2>:
 8005870:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005874:	ed2d 8b02 	vpush	{d8}
 8005878:	f5ad 7d19 	sub.w	sp, sp, #612	; 0x264
 800587c:	f112 0f14 	cmn.w	r2, #20
 8005880:	9308      	str	r3, [sp, #32]
 8005882:	9101      	str	r1, [sp, #4]
 8005884:	4bc6      	ldr	r3, [pc, #792]	; (8005ba0 <__kernel_rem_pio2+0x330>)
 8005886:	99a4      	ldr	r1, [sp, #656]	; 0x290
 8005888:	9009      	str	r0, [sp, #36]	; 0x24
 800588a:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800588e:	9304      	str	r3, [sp, #16]
 8005890:	9b08      	ldr	r3, [sp, #32]
 8005892:	f103 33ff 	add.w	r3, r3, #4294967295
 8005896:	bfa8      	it	ge
 8005898:	1ed4      	subge	r4, r2, #3
 800589a:	9306      	str	r3, [sp, #24]
 800589c:	bfb2      	itee	lt
 800589e:	2400      	movlt	r4, #0
 80058a0:	2318      	movge	r3, #24
 80058a2:	fb94 f4f3 	sdivge	r4, r4, r3
 80058a6:	f06f 0317 	mvn.w	r3, #23
 80058aa:	fb04 3303 	mla	r3, r4, r3, r3
 80058ae:	eb03 0a02 	add.w	sl, r3, r2
 80058b2:	9b04      	ldr	r3, [sp, #16]
 80058b4:	9a06      	ldr	r2, [sp, #24]
 80058b6:	ed9f 8bb6 	vldr	d8, [pc, #728]	; 8005b90 <__kernel_rem_pio2+0x320>
 80058ba:	eb03 0802 	add.w	r8, r3, r2
 80058be:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 80058c0:	1aa7      	subs	r7, r4, r2
 80058c2:	ae20      	add	r6, sp, #128	; 0x80
 80058c4:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80058c8:	2500      	movs	r5, #0
 80058ca:	4545      	cmp	r5, r8
 80058cc:	dd18      	ble.n	8005900 <__kernel_rem_pio2+0x90>
 80058ce:	9b08      	ldr	r3, [sp, #32]
 80058d0:	f8dd 8018 	ldr.w	r8, [sp, #24]
 80058d4:	aa20      	add	r2, sp, #128	; 0x80
 80058d6:	ed9f 8bae 	vldr	d8, [pc, #696]	; 8005b90 <__kernel_rem_pio2+0x320>
 80058da:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80058de:	f1c3 0301 	rsb	r3, r3, #1
 80058e2:	f50d 7be0 	add.w	fp, sp, #448	; 0x1c0
 80058e6:	9307      	str	r3, [sp, #28]
 80058e8:	9b07      	ldr	r3, [sp, #28]
 80058ea:	9a04      	ldr	r2, [sp, #16]
 80058ec:	4443      	add	r3, r8
 80058ee:	429a      	cmp	r2, r3
 80058f0:	db2f      	blt.n	8005952 <__kernel_rem_pio2+0xe2>
 80058f2:	ed8d 8b02 	vstr	d8, [sp, #8]
 80058f6:	f8dd 9024 	ldr.w	r9, [sp, #36]	; 0x24
 80058fa:	462f      	mov	r7, r5
 80058fc:	2600      	movs	r6, #0
 80058fe:	e01b      	b.n	8005938 <__kernel_rem_pio2+0xc8>
 8005900:	42ef      	cmn	r7, r5
 8005902:	d407      	bmi.n	8005914 <__kernel_rem_pio2+0xa4>
 8005904:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005908:	f7fa fdd0 	bl	80004ac <__aeabi_i2d>
 800590c:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005910:	3501      	adds	r5, #1
 8005912:	e7da      	b.n	80058ca <__kernel_rem_pio2+0x5a>
 8005914:	ec51 0b18 	vmov	r0, r1, d8
 8005918:	e7f8      	b.n	800590c <__kernel_rem_pio2+0x9c>
 800591a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800591e:	e8f9 0102 	ldrd	r0, r1, [r9], #8
 8005922:	f7fa fe2d 	bl	8000580 <__aeabi_dmul>
 8005926:	4602      	mov	r2, r0
 8005928:	460b      	mov	r3, r1
 800592a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800592e:	f7fa fc71 	bl	8000214 <__adddf3>
 8005932:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8005936:	3601      	adds	r6, #1
 8005938:	9b06      	ldr	r3, [sp, #24]
 800593a:	429e      	cmp	r6, r3
 800593c:	f1a7 0708 	sub.w	r7, r7, #8
 8005940:	ddeb      	ble.n	800591a <__kernel_rem_pio2+0xaa>
 8005942:	ed9d 7b02 	vldr	d7, [sp, #8]
 8005946:	3508      	adds	r5, #8
 8005948:	ecab 7b02 	vstmia	fp!, {d7}
 800594c:	f108 0801 	add.w	r8, r8, #1
 8005950:	e7ca      	b.n	80058e8 <__kernel_rem_pio2+0x78>
 8005952:	9b04      	ldr	r3, [sp, #16]
 8005954:	aa0c      	add	r2, sp, #48	; 0x30
 8005956:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800595a:	930b      	str	r3, [sp, #44]	; 0x2c
 800595c:	9ba5      	ldr	r3, [sp, #660]	; 0x294
 800595e:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005962:	9c04      	ldr	r4, [sp, #16]
 8005964:	930a      	str	r3, [sp, #40]	; 0x28
 8005966:	ab98      	add	r3, sp, #608	; 0x260
 8005968:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800596c:	e953 6728 	ldrd	r6, r7, [r3, #-160]	; 0xa0
 8005970:	f10d 0b30 	add.w	fp, sp, #48	; 0x30
 8005974:	f8cd b008 	str.w	fp, [sp, #8]
 8005978:	4625      	mov	r5, r4
 800597a:	2d00      	cmp	r5, #0
 800597c:	dc78      	bgt.n	8005a70 <__kernel_rem_pio2+0x200>
 800597e:	ec47 6b10 	vmov	d0, r6, r7
 8005982:	4650      	mov	r0, sl
 8005984:	f000 fbfc 	bl	8006180 <scalbn>
 8005988:	ec57 6b10 	vmov	r6, r7, d0
 800598c:	2200      	movs	r2, #0
 800598e:	f04f 537f 	mov.w	r3, #1069547520	; 0x3fc00000
 8005992:	ee10 0a10 	vmov	r0, s0
 8005996:	4639      	mov	r1, r7
 8005998:	f7fa fdf2 	bl	8000580 <__aeabi_dmul>
 800599c:	ec41 0b10 	vmov	d0, r0, r1
 80059a0:	f000 fb6e 	bl	8006080 <floor>
 80059a4:	4b7f      	ldr	r3, [pc, #508]	; (8005ba4 <__kernel_rem_pio2+0x334>)
 80059a6:	ec51 0b10 	vmov	r0, r1, d0
 80059aa:	2200      	movs	r2, #0
 80059ac:	f7fa fde8 	bl	8000580 <__aeabi_dmul>
 80059b0:	4602      	mov	r2, r0
 80059b2:	460b      	mov	r3, r1
 80059b4:	4630      	mov	r0, r6
 80059b6:	4639      	mov	r1, r7
 80059b8:	f7fa fc2a 	bl	8000210 <__aeabi_dsub>
 80059bc:	460f      	mov	r7, r1
 80059be:	4606      	mov	r6, r0
 80059c0:	f7fb f878 	bl	8000ab4 <__aeabi_d2iz>
 80059c4:	9007      	str	r0, [sp, #28]
 80059c6:	f7fa fd71 	bl	80004ac <__aeabi_i2d>
 80059ca:	4602      	mov	r2, r0
 80059cc:	460b      	mov	r3, r1
 80059ce:	4630      	mov	r0, r6
 80059d0:	4639      	mov	r1, r7
 80059d2:	f7fa fc1d 	bl	8000210 <__aeabi_dsub>
 80059d6:	f1ba 0f00 	cmp.w	sl, #0
 80059da:	4606      	mov	r6, r0
 80059dc:	460f      	mov	r7, r1
 80059de:	dd70      	ble.n	8005ac2 <__kernel_rem_pio2+0x252>
 80059e0:	1e62      	subs	r2, r4, #1
 80059e2:	ab0c      	add	r3, sp, #48	; 0x30
 80059e4:	9d07      	ldr	r5, [sp, #28]
 80059e6:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 80059ea:	f1ca 0118 	rsb	r1, sl, #24
 80059ee:	fa40 f301 	asr.w	r3, r0, r1
 80059f2:	441d      	add	r5, r3
 80059f4:	408b      	lsls	r3, r1
 80059f6:	1ac0      	subs	r0, r0, r3
 80059f8:	ab0c      	add	r3, sp, #48	; 0x30
 80059fa:	9507      	str	r5, [sp, #28]
 80059fc:	f843 0022 	str.w	r0, [r3, r2, lsl #2]
 8005a00:	f1ca 0317 	rsb	r3, sl, #23
 8005a04:	fa40 f303 	asr.w	r3, r0, r3
 8005a08:	9302      	str	r3, [sp, #8]
 8005a0a:	9b02      	ldr	r3, [sp, #8]
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	dd66      	ble.n	8005ade <__kernel_rem_pio2+0x26e>
 8005a10:	9b07      	ldr	r3, [sp, #28]
 8005a12:	2200      	movs	r2, #0
 8005a14:	3301      	adds	r3, #1
 8005a16:	9307      	str	r3, [sp, #28]
 8005a18:	4615      	mov	r5, r2
 8005a1a:	f06f 417f 	mvn.w	r1, #4278190080	; 0xff000000
 8005a1e:	4294      	cmp	r4, r2
 8005a20:	f300 8099 	bgt.w	8005b56 <__kernel_rem_pio2+0x2e6>
 8005a24:	f1ba 0f00 	cmp.w	sl, #0
 8005a28:	dd07      	ble.n	8005a3a <__kernel_rem_pio2+0x1ca>
 8005a2a:	f1ba 0f01 	cmp.w	sl, #1
 8005a2e:	f000 80a5 	beq.w	8005b7c <__kernel_rem_pio2+0x30c>
 8005a32:	f1ba 0f02 	cmp.w	sl, #2
 8005a36:	f000 80c1 	beq.w	8005bbc <__kernel_rem_pio2+0x34c>
 8005a3a:	9b02      	ldr	r3, [sp, #8]
 8005a3c:	2b02      	cmp	r3, #2
 8005a3e:	d14e      	bne.n	8005ade <__kernel_rem_pio2+0x26e>
 8005a40:	4632      	mov	r2, r6
 8005a42:	463b      	mov	r3, r7
 8005a44:	4958      	ldr	r1, [pc, #352]	; (8005ba8 <__kernel_rem_pio2+0x338>)
 8005a46:	2000      	movs	r0, #0
 8005a48:	f7fa fbe2 	bl	8000210 <__aeabi_dsub>
 8005a4c:	4606      	mov	r6, r0
 8005a4e:	460f      	mov	r7, r1
 8005a50:	2d00      	cmp	r5, #0
 8005a52:	d044      	beq.n	8005ade <__kernel_rem_pio2+0x26e>
 8005a54:	4650      	mov	r0, sl
 8005a56:	ed9f 0b50 	vldr	d0, [pc, #320]	; 8005b98 <__kernel_rem_pio2+0x328>
 8005a5a:	f000 fb91 	bl	8006180 <scalbn>
 8005a5e:	4630      	mov	r0, r6
 8005a60:	4639      	mov	r1, r7
 8005a62:	ec53 2b10 	vmov	r2, r3, d0
 8005a66:	f7fa fbd3 	bl	8000210 <__aeabi_dsub>
 8005a6a:	4606      	mov	r6, r0
 8005a6c:	460f      	mov	r7, r1
 8005a6e:	e036      	b.n	8005ade <__kernel_rem_pio2+0x26e>
 8005a70:	4b4e      	ldr	r3, [pc, #312]	; (8005bac <__kernel_rem_pio2+0x33c>)
 8005a72:	2200      	movs	r2, #0
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa fd82 	bl	8000580 <__aeabi_dmul>
 8005a7c:	f7fb f81a 	bl	8000ab4 <__aeabi_d2iz>
 8005a80:	f7fa fd14 	bl	80004ac <__aeabi_i2d>
 8005a84:	4b4a      	ldr	r3, [pc, #296]	; (8005bb0 <__kernel_rem_pio2+0x340>)
 8005a86:	2200      	movs	r2, #0
 8005a88:	4680      	mov	r8, r0
 8005a8a:	4689      	mov	r9, r1
 8005a8c:	f7fa fd78 	bl	8000580 <__aeabi_dmul>
 8005a90:	4602      	mov	r2, r0
 8005a92:	460b      	mov	r3, r1
 8005a94:	4630      	mov	r0, r6
 8005a96:	4639      	mov	r1, r7
 8005a98:	f7fa fbba 	bl	8000210 <__aeabi_dsub>
 8005a9c:	f7fb f80a 	bl	8000ab4 <__aeabi_d2iz>
 8005aa0:	9b02      	ldr	r3, [sp, #8]
 8005aa2:	f843 0b04 	str.w	r0, [r3], #4
 8005aa6:	3d01      	subs	r5, #1
 8005aa8:	9302      	str	r3, [sp, #8]
 8005aaa:	ab70      	add	r3, sp, #448	; 0x1c0
 8005aac:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005ab0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab4:	4640      	mov	r0, r8
 8005ab6:	4649      	mov	r1, r9
 8005ab8:	f7fa fbac 	bl	8000214 <__adddf3>
 8005abc:	4606      	mov	r6, r0
 8005abe:	460f      	mov	r7, r1
 8005ac0:	e75b      	b.n	800597a <__kernel_rem_pio2+0x10a>
 8005ac2:	d105      	bne.n	8005ad0 <__kernel_rem_pio2+0x260>
 8005ac4:	1e63      	subs	r3, r4, #1
 8005ac6:	aa0c      	add	r2, sp, #48	; 0x30
 8005ac8:	f852 0023 	ldr.w	r0, [r2, r3, lsl #2]
 8005acc:	15c3      	asrs	r3, r0, #23
 8005ace:	e79b      	b.n	8005a08 <__kernel_rem_pio2+0x198>
 8005ad0:	4b38      	ldr	r3, [pc, #224]	; (8005bb4 <__kernel_rem_pio2+0x344>)
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f7fa ffda 	bl	8000a8c <__aeabi_dcmpge>
 8005ad8:	2800      	cmp	r0, #0
 8005ada:	d139      	bne.n	8005b50 <__kernel_rem_pio2+0x2e0>
 8005adc:	9002      	str	r0, [sp, #8]
 8005ade:	2200      	movs	r2, #0
 8005ae0:	2300      	movs	r3, #0
 8005ae2:	4630      	mov	r0, r6
 8005ae4:	4639      	mov	r1, r7
 8005ae6:	f7fa ffb3 	bl	8000a50 <__aeabi_dcmpeq>
 8005aea:	2800      	cmp	r0, #0
 8005aec:	f000 80b4 	beq.w	8005c58 <__kernel_rem_pio2+0x3e8>
 8005af0:	f104 3bff 	add.w	fp, r4, #4294967295
 8005af4:	465b      	mov	r3, fp
 8005af6:	2200      	movs	r2, #0
 8005af8:	9904      	ldr	r1, [sp, #16]
 8005afa:	428b      	cmp	r3, r1
 8005afc:	da65      	bge.n	8005bca <__kernel_rem_pio2+0x35a>
 8005afe:	2a00      	cmp	r2, #0
 8005b00:	d07b      	beq.n	8005bfa <__kernel_rem_pio2+0x38a>
 8005b02:	ab0c      	add	r3, sp, #48	; 0x30
 8005b04:	f1aa 0a18 	sub.w	sl, sl, #24
 8005b08:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	f000 80a0 	beq.w	8005c52 <__kernel_rem_pio2+0x3e2>
 8005b12:	ed9f 0b21 	vldr	d0, [pc, #132]	; 8005b98 <__kernel_rem_pio2+0x328>
 8005b16:	4650      	mov	r0, sl
 8005b18:	f000 fb32 	bl	8006180 <scalbn>
 8005b1c:	4f23      	ldr	r7, [pc, #140]	; (8005bac <__kernel_rem_pio2+0x33c>)
 8005b1e:	ec55 4b10 	vmov	r4, r5, d0
 8005b22:	46d8      	mov	r8, fp
 8005b24:	2600      	movs	r6, #0
 8005b26:	f1b8 0f00 	cmp.w	r8, #0
 8005b2a:	f280 80cf 	bge.w	8005ccc <__kernel_rem_pio2+0x45c>
 8005b2e:	ed9f 8b18 	vldr	d8, [pc, #96]	; 8005b90 <__kernel_rem_pio2+0x320>
 8005b32:	465f      	mov	r7, fp
 8005b34:	f04f 0800 	mov.w	r8, #0
 8005b38:	2f00      	cmp	r7, #0
 8005b3a:	f2c0 80fd 	blt.w	8005d38 <__kernel_rem_pio2+0x4c8>
 8005b3e:	ab70      	add	r3, sp, #448	; 0x1c0
 8005b40:	f8df a074 	ldr.w	sl, [pc, #116]	; 8005bb8 <__kernel_rem_pio2+0x348>
 8005b44:	ec55 4b18 	vmov	r4, r5, d8
 8005b48:	eb03 09c7 	add.w	r9, r3, r7, lsl #3
 8005b4c:	2600      	movs	r6, #0
 8005b4e:	e0e5      	b.n	8005d1c <__kernel_rem_pio2+0x4ac>
 8005b50:	2302      	movs	r3, #2
 8005b52:	9302      	str	r3, [sp, #8]
 8005b54:	e75c      	b.n	8005a10 <__kernel_rem_pio2+0x1a0>
 8005b56:	f8db 3000 	ldr.w	r3, [fp]
 8005b5a:	b955      	cbnz	r5, 8005b72 <__kernel_rem_pio2+0x302>
 8005b5c:	b123      	cbz	r3, 8005b68 <__kernel_rem_pio2+0x2f8>
 8005b5e:	f1c3 7380 	rsb	r3, r3, #16777216	; 0x1000000
 8005b62:	f8cb 3000 	str.w	r3, [fp]
 8005b66:	2301      	movs	r3, #1
 8005b68:	3201      	adds	r2, #1
 8005b6a:	f10b 0b04 	add.w	fp, fp, #4
 8005b6e:	461d      	mov	r5, r3
 8005b70:	e755      	b.n	8005a1e <__kernel_rem_pio2+0x1ae>
 8005b72:	1acb      	subs	r3, r1, r3
 8005b74:	f8cb 3000 	str.w	r3, [fp]
 8005b78:	462b      	mov	r3, r5
 8005b7a:	e7f5      	b.n	8005b68 <__kernel_rem_pio2+0x2f8>
 8005b7c:	1e62      	subs	r2, r4, #1
 8005b7e:	ab0c      	add	r3, sp, #48	; 0x30
 8005b80:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005b84:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005b88:	a90c      	add	r1, sp, #48	; 0x30
 8005b8a:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005b8e:	e754      	b.n	8005a3a <__kernel_rem_pio2+0x1ca>
	...
 8005b9c:	3ff00000 	.word	0x3ff00000
 8005ba0:	08006490 	.word	0x08006490
 8005ba4:	40200000 	.word	0x40200000
 8005ba8:	3ff00000 	.word	0x3ff00000
 8005bac:	3e700000 	.word	0x3e700000
 8005bb0:	41700000 	.word	0x41700000
 8005bb4:	3fe00000 	.word	0x3fe00000
 8005bb8:	08006450 	.word	0x08006450
 8005bbc:	1e62      	subs	r2, r4, #1
 8005bbe:	ab0c      	add	r3, sp, #48	; 0x30
 8005bc0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005bc4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005bc8:	e7de      	b.n	8005b88 <__kernel_rem_pio2+0x318>
 8005bca:	a90c      	add	r1, sp, #48	; 0x30
 8005bcc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005bd0:	3b01      	subs	r3, #1
 8005bd2:	430a      	orrs	r2, r1
 8005bd4:	e790      	b.n	8005af8 <__kernel_rem_pio2+0x288>
 8005bd6:	3301      	adds	r3, #1
 8005bd8:	f852 1d04 	ldr.w	r1, [r2, #-4]!
 8005bdc:	2900      	cmp	r1, #0
 8005bde:	d0fa      	beq.n	8005bd6 <__kernel_rem_pio2+0x366>
 8005be0:	9a08      	ldr	r2, [sp, #32]
 8005be2:	18e3      	adds	r3, r4, r3
 8005be4:	18a6      	adds	r6, r4, r2
 8005be6:	aa20      	add	r2, sp, #128	; 0x80
 8005be8:	1c65      	adds	r5, r4, #1
 8005bea:	eb02 06c6 	add.w	r6, r2, r6, lsl #3
 8005bee:	9302      	str	r3, [sp, #8]
 8005bf0:	9b02      	ldr	r3, [sp, #8]
 8005bf2:	42ab      	cmp	r3, r5
 8005bf4:	da04      	bge.n	8005c00 <__kernel_rem_pio2+0x390>
 8005bf6:	461c      	mov	r4, r3
 8005bf8:	e6b5      	b.n	8005966 <__kernel_rem_pio2+0xf6>
 8005bfa:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005bfc:	2301      	movs	r3, #1
 8005bfe:	e7eb      	b.n	8005bd8 <__kernel_rem_pio2+0x368>
 8005c00:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c02:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005c06:	f7fa fc51 	bl	80004ac <__aeabi_i2d>
 8005c0a:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005c0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c10:	46b3      	mov	fp, r6
 8005c12:	461c      	mov	r4, r3
 8005c14:	2700      	movs	r7, #0
 8005c16:	f04f 0800 	mov.w	r8, #0
 8005c1a:	f04f 0900 	mov.w	r9, #0
 8005c1e:	9b06      	ldr	r3, [sp, #24]
 8005c20:	429f      	cmp	r7, r3
 8005c22:	dd06      	ble.n	8005c32 <__kernel_rem_pio2+0x3c2>
 8005c24:	ab70      	add	r3, sp, #448	; 0x1c0
 8005c26:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005c2a:	e9c3 8900 	strd	r8, r9, [r3]
 8005c2e:	3501      	adds	r5, #1
 8005c30:	e7de      	b.n	8005bf0 <__kernel_rem_pio2+0x380>
 8005c32:	e97b 2302 	ldrd	r2, r3, [fp, #-8]!
 8005c36:	e8f4 0102 	ldrd	r0, r1, [r4], #8
 8005c3a:	f7fa fca1 	bl	8000580 <__aeabi_dmul>
 8005c3e:	4602      	mov	r2, r0
 8005c40:	460b      	mov	r3, r1
 8005c42:	4640      	mov	r0, r8
 8005c44:	4649      	mov	r1, r9
 8005c46:	f7fa fae5 	bl	8000214 <__adddf3>
 8005c4a:	3701      	adds	r7, #1
 8005c4c:	4680      	mov	r8, r0
 8005c4e:	4689      	mov	r9, r1
 8005c50:	e7e5      	b.n	8005c1e <__kernel_rem_pio2+0x3ae>
 8005c52:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005c56:	e754      	b.n	8005b02 <__kernel_rem_pio2+0x292>
 8005c58:	ec47 6b10 	vmov	d0, r6, r7
 8005c5c:	f1ca 0000 	rsb	r0, sl, #0
 8005c60:	f000 fa8e 	bl	8006180 <scalbn>
 8005c64:	ec57 6b10 	vmov	r6, r7, d0
 8005c68:	4b9f      	ldr	r3, [pc, #636]	; (8005ee8 <__kernel_rem_pio2+0x678>)
 8005c6a:	ee10 0a10 	vmov	r0, s0
 8005c6e:	2200      	movs	r2, #0
 8005c70:	4639      	mov	r1, r7
 8005c72:	f7fa ff0b 	bl	8000a8c <__aeabi_dcmpge>
 8005c76:	b300      	cbz	r0, 8005cba <__kernel_rem_pio2+0x44a>
 8005c78:	4b9c      	ldr	r3, [pc, #624]	; (8005eec <__kernel_rem_pio2+0x67c>)
 8005c7a:	2200      	movs	r2, #0
 8005c7c:	4630      	mov	r0, r6
 8005c7e:	4639      	mov	r1, r7
 8005c80:	f7fa fc7e 	bl	8000580 <__aeabi_dmul>
 8005c84:	f7fa ff16 	bl	8000ab4 <__aeabi_d2iz>
 8005c88:	4605      	mov	r5, r0
 8005c8a:	f7fa fc0f 	bl	80004ac <__aeabi_i2d>
 8005c8e:	4b96      	ldr	r3, [pc, #600]	; (8005ee8 <__kernel_rem_pio2+0x678>)
 8005c90:	2200      	movs	r2, #0
 8005c92:	f7fa fc75 	bl	8000580 <__aeabi_dmul>
 8005c96:	460b      	mov	r3, r1
 8005c98:	4602      	mov	r2, r0
 8005c9a:	4639      	mov	r1, r7
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	f7fa fab7 	bl	8000210 <__aeabi_dsub>
 8005ca2:	f7fa ff07 	bl	8000ab4 <__aeabi_d2iz>
 8005ca6:	f104 0b01 	add.w	fp, r4, #1
 8005caa:	ab0c      	add	r3, sp, #48	; 0x30
 8005cac:	f10a 0a18 	add.w	sl, sl, #24
 8005cb0:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005cb4:	f843 502b 	str.w	r5, [r3, fp, lsl #2]
 8005cb8:	e72b      	b.n	8005b12 <__kernel_rem_pio2+0x2a2>
 8005cba:	4630      	mov	r0, r6
 8005cbc:	4639      	mov	r1, r7
 8005cbe:	f7fa fef9 	bl	8000ab4 <__aeabi_d2iz>
 8005cc2:	ab0c      	add	r3, sp, #48	; 0x30
 8005cc4:	46a3      	mov	fp, r4
 8005cc6:	f843 0024 	str.w	r0, [r3, r4, lsl #2]
 8005cca:	e722      	b.n	8005b12 <__kernel_rem_pio2+0x2a2>
 8005ccc:	ab70      	add	r3, sp, #448	; 0x1c0
 8005cce:	eb03 09c8 	add.w	r9, r3, r8, lsl #3
 8005cd2:	ab0c      	add	r3, sp, #48	; 0x30
 8005cd4:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005cd8:	f7fa fbe8 	bl	80004ac <__aeabi_i2d>
 8005cdc:	4622      	mov	r2, r4
 8005cde:	462b      	mov	r3, r5
 8005ce0:	f7fa fc4e 	bl	8000580 <__aeabi_dmul>
 8005ce4:	4632      	mov	r2, r6
 8005ce6:	e9c9 0100 	strd	r0, r1, [r9]
 8005cea:	463b      	mov	r3, r7
 8005cec:	4620      	mov	r0, r4
 8005cee:	4629      	mov	r1, r5
 8005cf0:	f7fa fc46 	bl	8000580 <__aeabi_dmul>
 8005cf4:	f108 38ff 	add.w	r8, r8, #4294967295
 8005cf8:	4604      	mov	r4, r0
 8005cfa:	460d      	mov	r5, r1
 8005cfc:	e713      	b.n	8005b26 <__kernel_rem_pio2+0x2b6>
 8005cfe:	e8f9 2302 	ldrd	r2, r3, [r9], #8
 8005d02:	e8fa 0102 	ldrd	r0, r1, [sl], #8
 8005d06:	f7fa fc3b 	bl	8000580 <__aeabi_dmul>
 8005d0a:	4602      	mov	r2, r0
 8005d0c:	460b      	mov	r3, r1
 8005d0e:	4620      	mov	r0, r4
 8005d10:	4629      	mov	r1, r5
 8005d12:	f7fa fa7f 	bl	8000214 <__adddf3>
 8005d16:	3601      	adds	r6, #1
 8005d18:	4604      	mov	r4, r0
 8005d1a:	460d      	mov	r5, r1
 8005d1c:	9b04      	ldr	r3, [sp, #16]
 8005d1e:	429e      	cmp	r6, r3
 8005d20:	dc01      	bgt.n	8005d26 <__kernel_rem_pio2+0x4b6>
 8005d22:	45b0      	cmp	r8, r6
 8005d24:	daeb      	bge.n	8005cfe <__kernel_rem_pio2+0x48e>
 8005d26:	ab48      	add	r3, sp, #288	; 0x120
 8005d28:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8005d2c:	e9c3 4500 	strd	r4, r5, [r3]
 8005d30:	3f01      	subs	r7, #1
 8005d32:	f108 0801 	add.w	r8, r8, #1
 8005d36:	e6ff      	b.n	8005b38 <__kernel_rem_pio2+0x2c8>
 8005d38:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005d3a:	2b02      	cmp	r3, #2
 8005d3c:	dc0b      	bgt.n	8005d56 <__kernel_rem_pio2+0x4e6>
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	dc6e      	bgt.n	8005e20 <__kernel_rem_pio2+0x5b0>
 8005d42:	d045      	beq.n	8005dd0 <__kernel_rem_pio2+0x560>
 8005d44:	9b07      	ldr	r3, [sp, #28]
 8005d46:	f003 0007 	and.w	r0, r3, #7
 8005d4a:	f50d 7d19 	add.w	sp, sp, #612	; 0x264
 8005d4e:	ecbd 8b02 	vpop	{d8}
 8005d52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005d56:	9ba4      	ldr	r3, [sp, #656]	; 0x290
 8005d58:	2b03      	cmp	r3, #3
 8005d5a:	d1f3      	bne.n	8005d44 <__kernel_rem_pio2+0x4d4>
 8005d5c:	ab48      	add	r3, sp, #288	; 0x120
 8005d5e:	eb03 0acb 	add.w	sl, r3, fp, lsl #3
 8005d62:	46d0      	mov	r8, sl
 8005d64:	46d9      	mov	r9, fp
 8005d66:	f1b9 0f00 	cmp.w	r9, #0
 8005d6a:	f1a8 0808 	sub.w	r8, r8, #8
 8005d6e:	dc64      	bgt.n	8005e3a <__kernel_rem_pio2+0x5ca>
 8005d70:	465c      	mov	r4, fp
 8005d72:	2c01      	cmp	r4, #1
 8005d74:	f1aa 0a08 	sub.w	sl, sl, #8
 8005d78:	dc7e      	bgt.n	8005e78 <__kernel_rem_pio2+0x608>
 8005d7a:	2000      	movs	r0, #0
 8005d7c:	2100      	movs	r1, #0
 8005d7e:	f1bb 0f01 	cmp.w	fp, #1
 8005d82:	f300 8097 	bgt.w	8005eb4 <__kernel_rem_pio2+0x644>
 8005d86:	9b02      	ldr	r3, [sp, #8]
 8005d88:	e9dd 5648 	ldrd	r5, r6, [sp, #288]	; 0x120
 8005d8c:	e9dd 784a 	ldrd	r7, r8, [sp, #296]	; 0x128
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	f040 8099 	bne.w	8005ec8 <__kernel_rem_pio2+0x658>
 8005d96:	9b01      	ldr	r3, [sp, #4]
 8005d98:	e9c3 5600 	strd	r5, r6, [r3]
 8005d9c:	e9c3 7802 	strd	r7, r8, [r3, #8]
 8005da0:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005da4:	e7ce      	b.n	8005d44 <__kernel_rem_pio2+0x4d4>
 8005da6:	ab48      	add	r3, sp, #288	; 0x120
 8005da8:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005dac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005db0:	f7fa fa30 	bl	8000214 <__adddf3>
 8005db4:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005db8:	f1bb 0f00 	cmp.w	fp, #0
 8005dbc:	daf3      	bge.n	8005da6 <__kernel_rem_pio2+0x536>
 8005dbe:	9b02      	ldr	r3, [sp, #8]
 8005dc0:	b113      	cbz	r3, 8005dc8 <__kernel_rem_pio2+0x558>
 8005dc2:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005dc6:	4619      	mov	r1, r3
 8005dc8:	9b01      	ldr	r3, [sp, #4]
 8005dca:	e9c3 0100 	strd	r0, r1, [r3]
 8005dce:	e7b9      	b.n	8005d44 <__kernel_rem_pio2+0x4d4>
 8005dd0:	2000      	movs	r0, #0
 8005dd2:	2100      	movs	r1, #0
 8005dd4:	e7f0      	b.n	8005db8 <__kernel_rem_pio2+0x548>
 8005dd6:	ab48      	add	r3, sp, #288	; 0x120
 8005dd8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005ddc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de0:	f7fa fa18 	bl	8000214 <__adddf3>
 8005de4:	3c01      	subs	r4, #1
 8005de6:	2c00      	cmp	r4, #0
 8005de8:	daf5      	bge.n	8005dd6 <__kernel_rem_pio2+0x566>
 8005dea:	9b02      	ldr	r3, [sp, #8]
 8005dec:	b1e3      	cbz	r3, 8005e28 <__kernel_rem_pio2+0x5b8>
 8005dee:	4602      	mov	r2, r0
 8005df0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005df4:	9c01      	ldr	r4, [sp, #4]
 8005df6:	e9c4 2300 	strd	r2, r3, [r4]
 8005dfa:	4602      	mov	r2, r0
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	; 0x120
 8005e02:	f7fa fa05 	bl	8000210 <__aeabi_dsub>
 8005e06:	ad4a      	add	r5, sp, #296	; 0x128
 8005e08:	2401      	movs	r4, #1
 8005e0a:	45a3      	cmp	fp, r4
 8005e0c:	da0f      	bge.n	8005e2e <__kernel_rem_pio2+0x5be>
 8005e0e:	9b02      	ldr	r3, [sp, #8]
 8005e10:	b113      	cbz	r3, 8005e18 <__kernel_rem_pio2+0x5a8>
 8005e12:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005e16:	4619      	mov	r1, r3
 8005e18:	9b01      	ldr	r3, [sp, #4]
 8005e1a:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005e1e:	e791      	b.n	8005d44 <__kernel_rem_pio2+0x4d4>
 8005e20:	465c      	mov	r4, fp
 8005e22:	2000      	movs	r0, #0
 8005e24:	2100      	movs	r1, #0
 8005e26:	e7de      	b.n	8005de6 <__kernel_rem_pio2+0x576>
 8005e28:	4602      	mov	r2, r0
 8005e2a:	460b      	mov	r3, r1
 8005e2c:	e7e2      	b.n	8005df4 <__kernel_rem_pio2+0x584>
 8005e2e:	e8f5 2302 	ldrd	r2, r3, [r5], #8
 8005e32:	f7fa f9ef 	bl	8000214 <__adddf3>
 8005e36:	3401      	adds	r4, #1
 8005e38:	e7e7      	b.n	8005e0a <__kernel_rem_pio2+0x59a>
 8005e3a:	e9d8 4500 	ldrd	r4, r5, [r8]
 8005e3e:	e9d8 6702 	ldrd	r6, r7, [r8, #8]
 8005e42:	4620      	mov	r0, r4
 8005e44:	4632      	mov	r2, r6
 8005e46:	463b      	mov	r3, r7
 8005e48:	4629      	mov	r1, r5
 8005e4a:	f7fa f9e3 	bl	8000214 <__adddf3>
 8005e4e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4620      	mov	r0, r4
 8005e58:	4629      	mov	r1, r5
 8005e5a:	f7fa f9d9 	bl	8000210 <__aeabi_dsub>
 8005e5e:	4632      	mov	r2, r6
 8005e60:	463b      	mov	r3, r7
 8005e62:	f7fa f9d7 	bl	8000214 <__adddf3>
 8005e66:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005e6a:	e9c8 0102 	strd	r0, r1, [r8, #8]
 8005e6e:	ed88 7b00 	vstr	d7, [r8]
 8005e72:	f109 39ff 	add.w	r9, r9, #4294967295
 8005e76:	e776      	b.n	8005d66 <__kernel_rem_pio2+0x4f6>
 8005e78:	e9da 8900 	ldrd	r8, r9, [sl]
 8005e7c:	e9da 6702 	ldrd	r6, r7, [sl, #8]
 8005e80:	4640      	mov	r0, r8
 8005e82:	4632      	mov	r2, r6
 8005e84:	463b      	mov	r3, r7
 8005e86:	4649      	mov	r1, r9
 8005e88:	f7fa f9c4 	bl	8000214 <__adddf3>
 8005e8c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005e90:	4602      	mov	r2, r0
 8005e92:	460b      	mov	r3, r1
 8005e94:	4640      	mov	r0, r8
 8005e96:	4649      	mov	r1, r9
 8005e98:	f7fa f9ba 	bl	8000210 <__aeabi_dsub>
 8005e9c:	4632      	mov	r2, r6
 8005e9e:	463b      	mov	r3, r7
 8005ea0:	f7fa f9b8 	bl	8000214 <__adddf3>
 8005ea4:	ed9d 7b04 	vldr	d7, [sp, #16]
 8005ea8:	e9ca 0102 	strd	r0, r1, [sl, #8]
 8005eac:	ed8a 7b00 	vstr	d7, [sl]
 8005eb0:	3c01      	subs	r4, #1
 8005eb2:	e75e      	b.n	8005d72 <__kernel_rem_pio2+0x502>
 8005eb4:	ab48      	add	r3, sp, #288	; 0x120
 8005eb6:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005eba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ebe:	f7fa f9a9 	bl	8000214 <__adddf3>
 8005ec2:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005ec6:	e75a      	b.n	8005d7e <__kernel_rem_pio2+0x50e>
 8005ec8:	9b01      	ldr	r3, [sp, #4]
 8005eca:	9a01      	ldr	r2, [sp, #4]
 8005ecc:	601d      	str	r5, [r3, #0]
 8005ece:	f106 4400 	add.w	r4, r6, #2147483648	; 0x80000000
 8005ed2:	605c      	str	r4, [r3, #4]
 8005ed4:	609f      	str	r7, [r3, #8]
 8005ed6:	f108 4300 	add.w	r3, r8, #2147483648	; 0x80000000
 8005eda:	60d3      	str	r3, [r2, #12]
 8005edc:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8005ee0:	6110      	str	r0, [r2, #16]
 8005ee2:	6153      	str	r3, [r2, #20]
 8005ee4:	e72e      	b.n	8005d44 <__kernel_rem_pio2+0x4d4>
 8005ee6:	bf00      	nop
 8005ee8:	41700000 	.word	0x41700000
 8005eec:	3e700000 	.word	0x3e700000

08005ef0 <__kernel_sin>:
 8005ef0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ef4:	ed2d 8b04 	vpush	{d8-d9}
 8005ef8:	eeb0 8a41 	vmov.f32	s16, s2
 8005efc:	eef0 8a61 	vmov.f32	s17, s3
 8005f00:	ec55 4b10 	vmov	r4, r5, d0
 8005f04:	b083      	sub	sp, #12
 8005f06:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f0a:	f1b3 5f79 	cmp.w	r3, #1044381696	; 0x3e400000
 8005f0e:	9001      	str	r0, [sp, #4]
 8005f10:	da06      	bge.n	8005f20 <__kernel_sin+0x30>
 8005f12:	ee10 0a10 	vmov	r0, s0
 8005f16:	4629      	mov	r1, r5
 8005f18:	f7fa fdcc 	bl	8000ab4 <__aeabi_d2iz>
 8005f1c:	2800      	cmp	r0, #0
 8005f1e:	d051      	beq.n	8005fc4 <__kernel_sin+0xd4>
 8005f20:	4622      	mov	r2, r4
 8005f22:	462b      	mov	r3, r5
 8005f24:	4620      	mov	r0, r4
 8005f26:	4629      	mov	r1, r5
 8005f28:	f7fa fb2a 	bl	8000580 <__aeabi_dmul>
 8005f2c:	4682      	mov	sl, r0
 8005f2e:	468b      	mov	fp, r1
 8005f30:	4602      	mov	r2, r0
 8005f32:	460b      	mov	r3, r1
 8005f34:	4620      	mov	r0, r4
 8005f36:	4629      	mov	r1, r5
 8005f38:	f7fa fb22 	bl	8000580 <__aeabi_dmul>
 8005f3c:	a341      	add	r3, pc, #260	; (adr r3, 8006044 <__kernel_sin+0x154>)
 8005f3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f42:	4680      	mov	r8, r0
 8005f44:	4689      	mov	r9, r1
 8005f46:	4650      	mov	r0, sl
 8005f48:	4659      	mov	r1, fp
 8005f4a:	f7fa fb19 	bl	8000580 <__aeabi_dmul>
 8005f4e:	a33f      	add	r3, pc, #252	; (adr r3, 800604c <__kernel_sin+0x15c>)
 8005f50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f54:	f7fa f95c 	bl	8000210 <__aeabi_dsub>
 8005f58:	4652      	mov	r2, sl
 8005f5a:	465b      	mov	r3, fp
 8005f5c:	f7fa fb10 	bl	8000580 <__aeabi_dmul>
 8005f60:	a33c      	add	r3, pc, #240	; (adr r3, 8006054 <__kernel_sin+0x164>)
 8005f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f66:	f7fa f955 	bl	8000214 <__adddf3>
 8005f6a:	4652      	mov	r2, sl
 8005f6c:	465b      	mov	r3, fp
 8005f6e:	f7fa fb07 	bl	8000580 <__aeabi_dmul>
 8005f72:	a33a      	add	r3, pc, #232	; (adr r3, 800605c <__kernel_sin+0x16c>)
 8005f74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f78:	f7fa f94a 	bl	8000210 <__aeabi_dsub>
 8005f7c:	4652      	mov	r2, sl
 8005f7e:	465b      	mov	r3, fp
 8005f80:	f7fa fafe 	bl	8000580 <__aeabi_dmul>
 8005f84:	a337      	add	r3, pc, #220	; (adr r3, 8006064 <__kernel_sin+0x174>)
 8005f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f8a:	f7fa f943 	bl	8000214 <__adddf3>
 8005f8e:	9b01      	ldr	r3, [sp, #4]
 8005f90:	4606      	mov	r6, r0
 8005f92:	460f      	mov	r7, r1
 8005f94:	b9eb      	cbnz	r3, 8005fd2 <__kernel_sin+0xe2>
 8005f96:	4602      	mov	r2, r0
 8005f98:	460b      	mov	r3, r1
 8005f9a:	4650      	mov	r0, sl
 8005f9c:	4659      	mov	r1, fp
 8005f9e:	f7fa faef 	bl	8000580 <__aeabi_dmul>
 8005fa2:	a325      	add	r3, pc, #148	; (adr r3, 8006038 <__kernel_sin+0x148>)
 8005fa4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fa8:	f7fa f932 	bl	8000210 <__aeabi_dsub>
 8005fac:	4642      	mov	r2, r8
 8005fae:	464b      	mov	r3, r9
 8005fb0:	f7fa fae6 	bl	8000580 <__aeabi_dmul>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4620      	mov	r0, r4
 8005fba:	4629      	mov	r1, r5
 8005fbc:	f7fa f92a 	bl	8000214 <__adddf3>
 8005fc0:	4604      	mov	r4, r0
 8005fc2:	460d      	mov	r5, r1
 8005fc4:	ec45 4b10 	vmov	d0, r4, r5
 8005fc8:	b003      	add	sp, #12
 8005fca:	ecbd 8b04 	vpop	{d8-d9}
 8005fce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005fd2:	4b1b      	ldr	r3, [pc, #108]	; (8006040 <__kernel_sin+0x150>)
 8005fd4:	ec51 0b18 	vmov	r0, r1, d8
 8005fd8:	2200      	movs	r2, #0
 8005fda:	f7fa fad1 	bl	8000580 <__aeabi_dmul>
 8005fde:	4632      	mov	r2, r6
 8005fe0:	ec41 0b19 	vmov	d9, r0, r1
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	4640      	mov	r0, r8
 8005fe8:	4649      	mov	r1, r9
 8005fea:	f7fa fac9 	bl	8000580 <__aeabi_dmul>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	460b      	mov	r3, r1
 8005ff2:	ec51 0b19 	vmov	r0, r1, d9
 8005ff6:	f7fa f90b 	bl	8000210 <__aeabi_dsub>
 8005ffa:	4652      	mov	r2, sl
 8005ffc:	465b      	mov	r3, fp
 8005ffe:	f7fa fabf 	bl	8000580 <__aeabi_dmul>
 8006002:	ec53 2b18 	vmov	r2, r3, d8
 8006006:	f7fa f903 	bl	8000210 <__aeabi_dsub>
 800600a:	a30b      	add	r3, pc, #44	; (adr r3, 8006038 <__kernel_sin+0x148>)
 800600c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006010:	4606      	mov	r6, r0
 8006012:	460f      	mov	r7, r1
 8006014:	4640      	mov	r0, r8
 8006016:	4649      	mov	r1, r9
 8006018:	f7fa fab2 	bl	8000580 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4630      	mov	r0, r6
 8006022:	4639      	mov	r1, r7
 8006024:	f7fa f8f6 	bl	8000214 <__adddf3>
 8006028:	4602      	mov	r2, r0
 800602a:	460b      	mov	r3, r1
 800602c:	4620      	mov	r0, r4
 800602e:	4629      	mov	r1, r5
 8006030:	f7fa f8ee 	bl	8000210 <__aeabi_dsub>
 8006034:	e7c4      	b.n	8005fc0 <__kernel_sin+0xd0>
 8006036:	bf00      	nop
 8006038:	55555549 	.word	0x55555549
 800603c:	3fc55555 	.word	0x3fc55555
 8006040:	3fe00000 	.word	0x3fe00000
 8006044:	5acfd57c 	.word	0x5acfd57c
 8006048:	3de5d93a 	.word	0x3de5d93a
 800604c:	8a2b9ceb 	.word	0x8a2b9ceb
 8006050:	3e5ae5e6 	.word	0x3e5ae5e6
 8006054:	57b1fe7d 	.word	0x57b1fe7d
 8006058:	3ec71de3 	.word	0x3ec71de3
 800605c:	19c161d5 	.word	0x19c161d5
 8006060:	3f2a01a0 	.word	0x3f2a01a0
 8006064:	1110f8a6 	.word	0x1110f8a6
 8006068:	3f811111 	.word	0x3f811111

0800606c <fabs>:
 800606c:	ec51 0b10 	vmov	r0, r1, d0
 8006070:	ee10 2a10 	vmov	r2, s0
 8006074:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8006078:	ec43 2b10 	vmov	d0, r2, r3
 800607c:	4770      	bx	lr
	...

08006080 <floor>:
 8006080:	ec51 0b10 	vmov	r0, r1, d0
 8006084:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006088:	f3c1 570a 	ubfx	r7, r1, #20, #11
 800608c:	f2a7 36ff 	subw	r6, r7, #1023	; 0x3ff
 8006090:	2e13      	cmp	r6, #19
 8006092:	ee10 5a10 	vmov	r5, s0
 8006096:	ee10 8a10 	vmov	r8, s0
 800609a:	460c      	mov	r4, r1
 800609c:	dc32      	bgt.n	8006104 <floor+0x84>
 800609e:	2e00      	cmp	r6, #0
 80060a0:	da14      	bge.n	80060cc <floor+0x4c>
 80060a2:	a333      	add	r3, pc, #204	; (adr r3, 8006170 <floor+0xf0>)
 80060a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060a8:	f7fa f8b4 	bl	8000214 <__adddf3>
 80060ac:	2200      	movs	r2, #0
 80060ae:	2300      	movs	r3, #0
 80060b0:	f7fa fcf6 	bl	8000aa0 <__aeabi_dcmpgt>
 80060b4:	b138      	cbz	r0, 80060c6 <floor+0x46>
 80060b6:	2c00      	cmp	r4, #0
 80060b8:	da57      	bge.n	800616a <floor+0xea>
 80060ba:	f024 4300 	bic.w	r3, r4, #2147483648	; 0x80000000
 80060be:	431d      	orrs	r5, r3
 80060c0:	d001      	beq.n	80060c6 <floor+0x46>
 80060c2:	4c2d      	ldr	r4, [pc, #180]	; (8006178 <floor+0xf8>)
 80060c4:	2500      	movs	r5, #0
 80060c6:	4621      	mov	r1, r4
 80060c8:	4628      	mov	r0, r5
 80060ca:	e025      	b.n	8006118 <floor+0x98>
 80060cc:	4f2b      	ldr	r7, [pc, #172]	; (800617c <floor+0xfc>)
 80060ce:	4137      	asrs	r7, r6
 80060d0:	ea01 0307 	and.w	r3, r1, r7
 80060d4:	4303      	orrs	r3, r0
 80060d6:	d01f      	beq.n	8006118 <floor+0x98>
 80060d8:	a325      	add	r3, pc, #148	; (adr r3, 8006170 <floor+0xf0>)
 80060da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060de:	f7fa f899 	bl	8000214 <__adddf3>
 80060e2:	2200      	movs	r2, #0
 80060e4:	2300      	movs	r3, #0
 80060e6:	f7fa fcdb 	bl	8000aa0 <__aeabi_dcmpgt>
 80060ea:	2800      	cmp	r0, #0
 80060ec:	d0eb      	beq.n	80060c6 <floor+0x46>
 80060ee:	2c00      	cmp	r4, #0
 80060f0:	bfbe      	ittt	lt
 80060f2:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 80060f6:	fa43 f606 	asrlt.w	r6, r3, r6
 80060fa:	19a4      	addlt	r4, r4, r6
 80060fc:	ea24 0407 	bic.w	r4, r4, r7
 8006100:	2500      	movs	r5, #0
 8006102:	e7e0      	b.n	80060c6 <floor+0x46>
 8006104:	2e33      	cmp	r6, #51	; 0x33
 8006106:	dd0b      	ble.n	8006120 <floor+0xa0>
 8006108:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800610c:	d104      	bne.n	8006118 <floor+0x98>
 800610e:	ee10 2a10 	vmov	r2, s0
 8006112:	460b      	mov	r3, r1
 8006114:	f7fa f87e 	bl	8000214 <__adddf3>
 8006118:	ec41 0b10 	vmov	d0, r0, r1
 800611c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006120:	f2a7 4713 	subw	r7, r7, #1043	; 0x413
 8006124:	f04f 33ff 	mov.w	r3, #4294967295
 8006128:	fa23 f707 	lsr.w	r7, r3, r7
 800612c:	4207      	tst	r7, r0
 800612e:	d0f3      	beq.n	8006118 <floor+0x98>
 8006130:	a30f      	add	r3, pc, #60	; (adr r3, 8006170 <floor+0xf0>)
 8006132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006136:	f7fa f86d 	bl	8000214 <__adddf3>
 800613a:	2200      	movs	r2, #0
 800613c:	2300      	movs	r3, #0
 800613e:	f7fa fcaf 	bl	8000aa0 <__aeabi_dcmpgt>
 8006142:	2800      	cmp	r0, #0
 8006144:	d0bf      	beq.n	80060c6 <floor+0x46>
 8006146:	2c00      	cmp	r4, #0
 8006148:	da02      	bge.n	8006150 <floor+0xd0>
 800614a:	2e14      	cmp	r6, #20
 800614c:	d103      	bne.n	8006156 <floor+0xd6>
 800614e:	3401      	adds	r4, #1
 8006150:	ea25 0507 	bic.w	r5, r5, r7
 8006154:	e7b7      	b.n	80060c6 <floor+0x46>
 8006156:	2301      	movs	r3, #1
 8006158:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 800615c:	fa03 f606 	lsl.w	r6, r3, r6
 8006160:	4435      	add	r5, r6
 8006162:	4545      	cmp	r5, r8
 8006164:	bf38      	it	cc
 8006166:	18e4      	addcc	r4, r4, r3
 8006168:	e7f2      	b.n	8006150 <floor+0xd0>
 800616a:	2500      	movs	r5, #0
 800616c:	462c      	mov	r4, r5
 800616e:	e7aa      	b.n	80060c6 <floor+0x46>
 8006170:	8800759c 	.word	0x8800759c
 8006174:	7e37e43c 	.word	0x7e37e43c
 8006178:	bff00000 	.word	0xbff00000
 800617c:	000fffff 	.word	0x000fffff

08006180 <scalbn>:
 8006180:	b570      	push	{r4, r5, r6, lr}
 8006182:	ec55 4b10 	vmov	r4, r5, d0
 8006186:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800618a:	4606      	mov	r6, r0
 800618c:	462b      	mov	r3, r5
 800618e:	b99a      	cbnz	r2, 80061b8 <scalbn+0x38>
 8006190:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8006194:	4323      	orrs	r3, r4
 8006196:	d036      	beq.n	8006206 <scalbn+0x86>
 8006198:	4b39      	ldr	r3, [pc, #228]	; (8006280 <scalbn+0x100>)
 800619a:	4629      	mov	r1, r5
 800619c:	ee10 0a10 	vmov	r0, s0
 80061a0:	2200      	movs	r2, #0
 80061a2:	f7fa f9ed 	bl	8000580 <__aeabi_dmul>
 80061a6:	4b37      	ldr	r3, [pc, #220]	; (8006284 <scalbn+0x104>)
 80061a8:	429e      	cmp	r6, r3
 80061aa:	4604      	mov	r4, r0
 80061ac:	460d      	mov	r5, r1
 80061ae:	da10      	bge.n	80061d2 <scalbn+0x52>
 80061b0:	a32b      	add	r3, pc, #172	; (adr r3, 8006260 <scalbn+0xe0>)
 80061b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80061b6:	e03a      	b.n	800622e <scalbn+0xae>
 80061b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80061bc:	428a      	cmp	r2, r1
 80061be:	d10c      	bne.n	80061da <scalbn+0x5a>
 80061c0:	ee10 2a10 	vmov	r2, s0
 80061c4:	4620      	mov	r0, r4
 80061c6:	4629      	mov	r1, r5
 80061c8:	f7fa f824 	bl	8000214 <__adddf3>
 80061cc:	4604      	mov	r4, r0
 80061ce:	460d      	mov	r5, r1
 80061d0:	e019      	b.n	8006206 <scalbn+0x86>
 80061d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80061d6:	460b      	mov	r3, r1
 80061d8:	3a36      	subs	r2, #54	; 0x36
 80061da:	4432      	add	r2, r6
 80061dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80061e0:	428a      	cmp	r2, r1
 80061e2:	dd08      	ble.n	80061f6 <scalbn+0x76>
 80061e4:	2d00      	cmp	r5, #0
 80061e6:	a120      	add	r1, pc, #128	; (adr r1, 8006268 <scalbn+0xe8>)
 80061e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061ec:	da1c      	bge.n	8006228 <scalbn+0xa8>
 80061ee:	a120      	add	r1, pc, #128	; (adr r1, 8006270 <scalbn+0xf0>)
 80061f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80061f4:	e018      	b.n	8006228 <scalbn+0xa8>
 80061f6:	2a00      	cmp	r2, #0
 80061f8:	dd08      	ble.n	800620c <scalbn+0x8c>
 80061fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 80061fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006202:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8006206:	ec45 4b10 	vmov	d0, r4, r5
 800620a:	bd70      	pop	{r4, r5, r6, pc}
 800620c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8006210:	da19      	bge.n	8006246 <scalbn+0xc6>
 8006212:	f24c 3350 	movw	r3, #50000	; 0xc350
 8006216:	429e      	cmp	r6, r3
 8006218:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800621c:	dd0a      	ble.n	8006234 <scalbn+0xb4>
 800621e:	a112      	add	r1, pc, #72	; (adr r1, 8006268 <scalbn+0xe8>)
 8006220:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006224:	2b00      	cmp	r3, #0
 8006226:	d1e2      	bne.n	80061ee <scalbn+0x6e>
 8006228:	a30f      	add	r3, pc, #60	; (adr r3, 8006268 <scalbn+0xe8>)
 800622a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800622e:	f7fa f9a7 	bl	8000580 <__aeabi_dmul>
 8006232:	e7cb      	b.n	80061cc <scalbn+0x4c>
 8006234:	a10a      	add	r1, pc, #40	; (adr r1, 8006260 <scalbn+0xe0>)
 8006236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800623a:	2b00      	cmp	r3, #0
 800623c:	d0b8      	beq.n	80061b0 <scalbn+0x30>
 800623e:	a10e      	add	r1, pc, #56	; (adr r1, 8006278 <scalbn+0xf8>)
 8006240:	e9d1 0100 	ldrd	r0, r1, [r1]
 8006244:	e7b4      	b.n	80061b0 <scalbn+0x30>
 8006246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800624a:	3236      	adds	r2, #54	; 0x36
 800624c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8006250:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8006254:	4620      	mov	r0, r4
 8006256:	4b0c      	ldr	r3, [pc, #48]	; (8006288 <scalbn+0x108>)
 8006258:	2200      	movs	r2, #0
 800625a:	e7e8      	b.n	800622e <scalbn+0xae>
 800625c:	f3af 8000 	nop.w
 8006260:	c2f8f359 	.word	0xc2f8f359
 8006264:	01a56e1f 	.word	0x01a56e1f
 8006268:	8800759c 	.word	0x8800759c
 800626c:	7e37e43c 	.word	0x7e37e43c
 8006270:	8800759c 	.word	0x8800759c
 8006274:	fe37e43c 	.word	0xfe37e43c
 8006278:	c2f8f359 	.word	0xc2f8f359
 800627c:	81a56e1f 	.word	0x81a56e1f
 8006280:	43500000 	.word	0x43500000
 8006284:	ffff3cb0 	.word	0xffff3cb0
 8006288:	3c900000 	.word	0x3c900000

0800628c <_init>:
 800628c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800628e:	bf00      	nop
 8006290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006292:	bc08      	pop	{r3}
 8006294:	469e      	mov	lr, r3
 8006296:	4770      	bx	lr

08006298 <_fini>:
 8006298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800629a:	bf00      	nop
 800629c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800629e:	bc08      	pop	{r3}
 80062a0:	469e      	mov	lr, r3
 80062a2:	4770      	bx	lr
